        -:    0:Source:/home/emibe/skola/robgit/naiad-auv-software/src/lib/math/vectors/src/math-vectors.adb
        -:    0:Programs:37
        -:    1:-- Vector package for Project Naiad
        -:    2:-- Written by Per-Erik Måhl, 2013
        -:    3:
        -:    4:with Ada.Numerics.Elementary_Functions;
        -:    5:
        -:    6:with System;
        -:    7:
        -:    8:with Ada.Text_IO;
        -:    9:
        -:   10:package body Math.Vectors is
        -:   11:
    #####:   12:   function pxCreate (fX, fY, fZ : float) return pCVector is
    #####:   13:      pxNew_Vector : pCVector;
        -:   14:   begin
        -:   15:
    #####:   16:      pxNew_Vector := new CVector;
        -:   17:
    #####:   18:      pxNew_Vector.fX := fX;
    #####:   19:      pxNew_Vector.fY := fY;
    #####:   20:      pxNew_Vector.fZ := fZ;
    #####:   21:      return pxNew_Vector;
        -:   22:   end pxCreate;
        -:   23:
        -:   24:
    #####:   25:   function fLength_Squared (this : in CVector) return float is
        -:   26:   begin
    #####:   27:      return (this.fX**2) + (this.fY**2) + (this.fZ**2);
        -:   28:   end fLength_Squared;
        -:   29:
    #####:   30:   function fLength (this : in CVector) return float is
        -:   31:   begin
    #####:   32:      return Ada.Numerics.Elementary_Functions.Sqrt(this.fLength_Squared);
        -:   33:   end fLength;
        -:   34:
        -:   35:
    #####:   36:   function "*" (pxLeftOperandVector, pxRightOperandVector : in pCVector) return pCVector is
    #####:   37:      pxProductVector : pCVector;
        -:   38:   begin
    #####:   39:      pxProductVector := pxCreate(fX => pxLeftOperandVector.fX * pxRightOperandVector.fX,
    #####:   40:                                  fY => pxLeftOperandVector.fY * pxRightOperandVector.fY,
    #####:   41:                                  fZ => pxLeftOperandVector.fZ * pxRightOperandVector.fZ);
    #####:   42:      return pxProductVector;
        -:   43:   end "*";
        -:   44:
    #####:   45:   function "*" (pxLeftOperandVector : in pCVector; fRightOperand : in float) return pCVector is
    #####:   46:      pxScaledVector : pCVector;
        -:   47:   begin
    #####:   48:      pxScaledVector := pxCreate(fX => pxLeftOperandVector.fX * fRightOperand,
    #####:   49:                                 fY => pxLeftOperandVector.fY * fRightOperand,
    #####:   50:                                 fZ => pxLeftOperandVector.fZ * fRightOperand);
    #####:   51:      return pxScaledVector;
        -:   52:   end "*";
        -:   53:
    #####:   54:   function "*" (fLeftOperand : in float; pxRightOperandVector : in pCVector) return pCVector is
    #####:   55:      pxScaledVector : pCVector;
        -:   56:   begin
    #####:   57:      pxScaledVector := pxCreate(fX => pxRightOperandVector.fX * fLeftOperand,
    #####:   58:                                 fY => pxRightOperandVector.fY * fLeftOperand,
    #####:   59:                                 fZ => pxRightOperandVector.fZ * fLeftOperand);
    #####:   60:      return pxScaledVector;
        -:   61:   end "*";
        -:   62:
    #####:   63:   function "/" (pxLeftOperandVector : in pCVector; fRightOperand : in float) return pCVector is
        -:   64:      fScaleFactor : float;
        -:   65:   begin
    #####:   66:      if abs(fRightOperand) = 0.0 then
    #####:   67:         raise Numeric_Error;
        -:   68:      end if;
        -:   69:
    #####:   70:      fScaleFactor := 1.0 / fRightOperand;
    #####:   71:      return pxLeftOperandVector * fScaleFactor;
        -:   72:   end "/";
        -:   73:
    #####:   74:   function "=" (pxLeftOperandVector : in pCVector; pxRightOperandVector : in pCVector) return boolean is
        -:   75:      use System;
        -:   76:
        -:   77:
    #####:   78:      function CheckIfBothNull(pxLeftOperandVector : in pCVector; pxRightOperandVector : in pCVector) return boolean is
        -:   79:         f : float;
        -:   80:      begin
    #####:   81:         f := pxRightOperandVector.fX;
    #####:   82:         return false;
        -:   83:      exception
    #####:   84:            when CONSTRAINT_ERROR =>
        -:   85:            begin
    #####:   86:               f :=  pxLeftOperandVector.fX;
    #####:   87:               return false;
        -:   88:            exception
    #####:   89:               when CONSTRAINT_ERROR =>
    #####:   90:                  return true;
    #####:   91:            end;
    #####:   92:      end;
        -:   93:
        -:   94:
        -:   95:   begin
    #####:   96:      if (CheckIfBothNull(pxLeftOperandVector,pxRightOperandVector)) then
    #####:   97:         return true;
        -:   98:      end if;
        -:   99:
        -:  100:
    #####:  101:      return abs(pxLeftOperandVector.fX - pxRightOperandVector.fX) < 0.0001 and
    #####:  102:        abs(pxLeftOperandVector.fY - pxRightOperandVector.fY) < 0.0001 and
    #####:  103:        abs(pxLeftOperandVector.fZ - pxRightOperandVector.fZ) < 0.0001;
        -:  104:
        -:  105:   exception
    #####:  106:         when CONSTRAINT_ERROR => return false;
    #####:  107:   end "=";
        -:  108:
    #####:  109:   function fGet_X (this : in CVector) return float is
        -:  110:   begin
    #####:  111:      return this.fX;
        -:  112:   end fGet_X;
        -:  113:
    #####:  114:   function fGet_Y (this : in CVector) return float is
        -:  115:   begin
    #####:  116:      return this.fY;
        -:  117:   end fGet_Y;
        -:  118:
    #####:  119:   function fGet_Z (this : in CVector) return float is
        -:  120:   begin
    #####:  121:      return this.fZ;
        -:  122:   end fGet_Z;
        -:  123:
        -:  124:
        -:  125:
        -:  126:
        -:  127:
        -:  128:
    #####:  129:   function "+" (pxLeftOperandVector, pxRightOperandVector : in pCVector) return pCVector is
    #####:  130:      pxSumVector : pCVector;
        -:  131:   begin
    #####:  132:      pxSumVector := pxCreate(fX => pxLeftOperandVector.fX + pxRightOperandVector.fX,
    #####:  133:                              fY => pxLeftOperandVector.fY + pxRightOperandVector.fY,
    #####:  134:                              fZ => pxLeftOperandVector.fZ + pxRightOperandVector.fZ);
    #####:  135:      return pxSumVector;
        -:  136:   end "+";
        -:  137:
    #####:  138:   function "-" (pxOperandVector : in pCVector) return pCVector is
    #####:  139:      pxNegatedVector : pCVector;
        -:  140:   begin
    #####:  141:      pxNegatedVector := pxCreate(fX => -pxOperandVector.fX,
    #####:  142:                                  fY => -pxOperandVector.fY,
    #####:  143:                                  fZ => -pxOperandVector.fZ);
    #####:  144:      return pxNegatedVector;
        -:  145:   end "-";
        -:  146:
    #####:  147:   function "-" (pxLeftOperandVector, pxRightOperandVector : in pCVector) return pCVector is
        -:  148:   begin
    #####:  149:      return pxLeftOperandVector + (-pxRightOperandVector);
        -:  150:   end "-";
        -:  151:
    #####:  152:   function fDot_Product (pxLeftOperandVector : in pCVector; pxRightOperandVector : in pCVector) return float is
        -:  153:      fDotProduct : float;
        -:  154:   begin
    #####:  155:      fDotProduct := (pxLeftOperandVector.fX * pxRightOperandVector.fX)
    #####:  156:        + (pxLeftOperandVector.fY * pxRightOperandVector.fY)
    #####:  157:        + (pxLeftOperandVector.fZ * pxRightOperandVector.fZ);
    #####:  158:      return fDotProduct;
        -:  159:   end fDot_Product;
        -:  160:
        -:  161:
    #####:  162:   function fAngle_Between_In_Radians (pxLeftOperandVector, pxRightOperandVector : in pCVector) return float is
        -:  163:      fDotProduct : float;
        -:  164:   begin
    #####:  165:      fDotProduct := Math.Vectors.fDot_Product(pxLeftOperandVector  => pxLeftOperandVector,
        -:  166:                                               pxRightOperandVector => pxRightOperandVector);
    #####:  167:      fDotProduct := fDotProduct / (pxLeftOperandVector.fLength * pxRightOperandVector.fLength);
        -:  168:
    #####:  169:      fDotProduct := float'Min(float'Max(fDotProduct,-1.0),1.0);
        -:  170:
    #####:  171:      return Ada.Numerics.Elementary_Functions.Arccos(fDotProduct);
        -:  172:   end fAngle_Between_In_Radians;
        -:  173:
        -:  174:
    #####:  175:   function pxGet_Normalized (this : in CVector) return pCVector is
    #####:  176:      pxNormalizedVector : pCVector;
        -:  177:   begin
    #####:  178:      if this.fLength_Squared = 0.0 then
    #####:  179:         raise Numeric_Error;
        -:  180:      end if;
        -:  181:
    #####:  182:      pxNormalizedVector := this / this.fLength;
    #####:  183:      return pxNormalizedVector;
        -:  184:   end pxGet_Normalized;
        -:  185:
    #####:  186:   function pxCross_Product (pxLeftOperandVector : in pCVector; pxRightOperandVector : in pCVector) return pCVector is
    #####:  187:      pxCrossProductVector : pCVector;
        -:  188:   begin
    #####:  189:      pxCrossProductVector := Math.Vectors.pxCreate(fX => (pxLeftOperandVector.fY * pxRightOperandVector.fZ) - (pxLeftOperandVector.fZ * pxRightOperandVector.fY),
    #####:  190:                                                          fY => (pxLeftOperandVector.fZ * pxRightOperandVector.fX) - (pxLeftOperandVector.fX * pxRightOperandVector.fZ),
    #####:  191:                                                          fZ => (pxLeftOperandVector.fX * pxRightOperandVector.fY) - (pxLeftOperandVector.fY * pxRightOperandVector.fX));
    #####:  192:      return pxCrossProductVector;
        -:  193:   end pxCross_Product;
        -:  194:
        -:  195:
    #####:  196:   function "/" (xLeftOperandVector : in CVector; fRightOperand : in float) return pCVector is
        -:  197:   begin
    #####:  198:      if abs(fRightOperand) = 0.0 then
    #####:  199:         raise Numeric_Error;
        -:  200:      end if;
        -:  201:
    #####:  202:      return Math.Vectors.pxCreate(fX => xLeftOperandVector.fX / fRightOperand,
    #####:  203:                                         fY => xLeftOperandVector.fY / fRightOperand,
    #####:  204:                                         fZ => xLeftOperandVector.fZ / fRightOperand);
        -:  205:   end "/";
        -:  206:
    #####:  207:   function pxGet_Copy (this : in CVector) return pCVector is
    #####:  208:      pxCopy : pCVector;
        -:  209:   begin
    #####:  210:      pxCopy := Math.Vectors.pxCreate(fX => this.fX,
        -:  211:                                            fY => this.fY,
        -:  212:                                            fZ => this.fZ);
    #####:  213:      return pxCopy;
        -:  214:   end pxGet_Copy;
        -:  215:
        -:  216:
    #####:  217:   procedure Copy_From(this : in out CVector; pxSourceVector : in pCVector) is
        -:  218:   begin
    #####:  219:      this.fX := pxSourceVector.fX;
    #####:  220:      this.fY := pxSourceVector.fY;
    #####:  221:      this.fZ := pxSourceVector.fZ;
    #####:  222:   end Copy_From;
        -:  223:
        -:  224:
        -:  225:
        -:  226:
        -:  227:end Math.Vectors;
