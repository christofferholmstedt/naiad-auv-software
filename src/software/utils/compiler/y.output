Terminals unused in grammar

   IN
   OUT


Grammar

    0 $accept: program $end

    1 program: functions

    2 functions: functions function
    3          | function

    4 function: PROCEDURE ID '(' formals ')' IS decls BEGIN stmnts END ID ';'
    5         | PROCEDURE ID IS decls BEGIN stmnts END ID ';'
    6         | FUNCTION ID '(' formals ')' RETURN BASIC_TYPE IS decls BEGIN stmnts END ID ';'
    7         | FUNCTION ID RETURN BASIC_TYPE IS decls BEGIN stmnts END ID ';'

    8 formals: formals ';' formal
    9        | formal

   10 formal: ID ':' BASIC_TYPE

   11 decls: decls decl
   12      | /* empty */

   13 decl: ID ':' BASIC_TYPE ';'

   14 stmnts: stmnts stmnt
   15       | stmnt

   16 stmnt: ID ASSIGN expr ';'
   17      | IF expr THEN stmnts END IF ';'
   18      | IF expr THEN stmnts ELSE stmnts END IF ';'
   19      | WHILE expr LOOP stmnts END LOOP ';'
   20      | RETURN expr ';'
   21      | RETURN ';'
   22      | ID '(' actuals ')' ';'
   23      | LOOP stmnts END LOOP ';'
   24      | EXIT ';'

   25 expr: MINUSOP expr
   26     | NOTOP expr
   27     | expr PLUSOP expr
   28     | expr MINUSOP expr
   29     | expr MULDIVOP expr
   30     | expr ANDOP expr
   31     | expr OROP expr
   32     | expr EQOP expr
   33     | expr LELTOP expr
   34     | expr MEMTOP expr
   35     | '(' expr ')'
   36     | ID '(' actuals ')'
   37     | ID
   38     | INT_CONST
   39     | BOOL_CONST
   40     | FLOAT_CONST
   41     | '[' FLOAT_CONST ',' FLOAT_CONST ',' FLOAT_CONST ']'

   42 actuals: exprs
   43        | /* empty */

   44 exprs: exprs ',' expr
   45      | expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 6 22 35 36
')' (41) 4 6 22 35 36
',' (44) 41 44
':' (58) 10 13
';' (59) 4 5 6 7 8 13 16 17 18 19 20 21 22 23 24
'[' (91) 41
']' (93) 41
error (256)
OROP (258) 31
ANDOP (259) 30
EQOP (260) 32
MEMTOP (261) 34
LELTOP (262) 33
PLUSOP (263) 27
MINUSOP (264) 25 28
MULDIVOP (265) 29
UNOP (266)
NOTOP (267) 26
BASIC_TYPE (268) 6 7 10 13
ID (269) 4 5 6 7 10 13 16 22 36 37
BOOL_CONST (270) 39
INT_CONST (271) 38
FLOAT_CONST (272) 40 41
IF (273) 17 18
THEN (274) 17 18
ELSE (275) 18
WHILE (276) 19
RETURN (277) 6 7 20 21
END (278) 4 5 6 7 17 18 19 23
EXIT (279) 24
LOOP (280) 19 23
PROCEDURE (281) 4 5
FUNCTION (282) 6 7
IS (283) 4 5 6 7
BEGIN (284) 4 5 6 7
IN (285)
OUT (286)
ASSIGN (287) 16


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
program (41)
    on left: 1, on right: 0
functions (42)
    on left: 2 3, on right: 1 2
function (43)
    on left: 4 5 6 7, on right: 2 3
formals (44)
    on left: 8 9, on right: 4 6 8
formal (45)
    on left: 10, on right: 8 9
decls (46)
    on left: 11 12, on right: 4 5 6 7 11
decl (47)
    on left: 13, on right: 11
stmnts (48)
    on left: 14 15, on right: 4 5 6 7 14 17 18 19 23
stmnt (49)
    on left: 16 17 18 19 20 21 22 23 24, on right: 14 15
expr (50)
    on left: 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41, on right:
    16 17 18 19 20 25 26 27 28 29 30 31 32 33 34 35 44 45
actuals (51)
    on left: 42 43, on right: 22 36
exprs (52)
    on left: 44 45, on right: 42 44


state 0

    0 $accept: . program $end

    PROCEDURE  shift, and go to state 1
    FUNCTION   shift, and go to state 2

    program    go to state 3
    functions  go to state 4
    function   go to state 5


state 1

    4 function: PROCEDURE . ID '(' formals ')' IS decls BEGIN stmnts END ID ';'
    5         | PROCEDURE . ID IS decls BEGIN stmnts END ID ';'

    ID  shift, and go to state 6


state 2

    6 function: FUNCTION . ID '(' formals ')' RETURN BASIC_TYPE IS decls BEGIN stmnts END ID ';'
    7         | FUNCTION . ID RETURN BASIC_TYPE IS decls BEGIN stmnts END ID ';'

    ID  shift, and go to state 7


state 3

    0 $accept: program . $end

    $end  shift, and go to state 8


state 4

    1 program: functions .
    2 functions: functions . function

    PROCEDURE  shift, and go to state 1
    FUNCTION   shift, and go to state 2

    $default  reduce using rule 1 (program)

    function  go to state 9


state 5

    3 functions: function .

    $default  reduce using rule 3 (functions)


state 6

    4 function: PROCEDURE ID . '(' formals ')' IS decls BEGIN stmnts END ID ';'
    5         | PROCEDURE ID . IS decls BEGIN stmnts END ID ';'

    IS   shift, and go to state 10
    '('  shift, and go to state 11


state 7

    6 function: FUNCTION ID . '(' formals ')' RETURN BASIC_TYPE IS decls BEGIN stmnts END ID ';'
    7         | FUNCTION ID . RETURN BASIC_TYPE IS decls BEGIN stmnts END ID ';'

    RETURN  shift, and go to state 12
    '('     shift, and go to state 13


state 8

    0 $accept: program $end .

    $default  accept


state 9

    2 functions: functions function .

    $default  reduce using rule 2 (functions)


state 10

    5 function: PROCEDURE ID IS . decls BEGIN stmnts END ID ';'

    $default  reduce using rule 12 (decls)

    decls  go to state 14


state 11

    4 function: PROCEDURE ID '(' . formals ')' IS decls BEGIN stmnts END ID ';'

    ID  shift, and go to state 15

    formals  go to state 16
    formal   go to state 17


state 12

    7 function: FUNCTION ID RETURN . BASIC_TYPE IS decls BEGIN stmnts END ID ';'

    BASIC_TYPE  shift, and go to state 18


state 13

    6 function: FUNCTION ID '(' . formals ')' RETURN BASIC_TYPE IS decls BEGIN stmnts END ID ';'

    ID  shift, and go to state 15

    formals  go to state 19
    formal   go to state 17


state 14

    5 function: PROCEDURE ID IS decls . BEGIN stmnts END ID ';'
   11 decls: decls . decl

    ID     shift, and go to state 20
    BEGIN  shift, and go to state 21

    decl  go to state 22


state 15

   10 formal: ID . ':' BASIC_TYPE

    ':'  shift, and go to state 23


state 16

    4 function: PROCEDURE ID '(' formals . ')' IS decls BEGIN stmnts END ID ';'
    8 formals: formals . ';' formal

    ')'  shift, and go to state 24
    ';'  shift, and go to state 25


state 17

    9 formals: formal .

    $default  reduce using rule 9 (formals)


state 18

    7 function: FUNCTION ID RETURN BASIC_TYPE . IS decls BEGIN stmnts END ID ';'

    IS  shift, and go to state 26


state 19

    6 function: FUNCTION ID '(' formals . ')' RETURN BASIC_TYPE IS decls BEGIN stmnts END ID ';'
    8 formals: formals . ';' formal

    ')'  shift, and go to state 27
    ';'  shift, and go to state 25


state 20

   13 decl: ID . ':' BASIC_TYPE ';'

    ':'  shift, and go to state 28


state 21

    5 function: PROCEDURE ID IS decls BEGIN . stmnts END ID ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnts  go to state 35
    stmnt   go to state 36


state 22

   11 decls: decls decl .

    $default  reduce using rule 11 (decls)


state 23

   10 formal: ID ':' . BASIC_TYPE

    BASIC_TYPE  shift, and go to state 37


state 24

    4 function: PROCEDURE ID '(' formals ')' . IS decls BEGIN stmnts END ID ';'

    IS  shift, and go to state 38


state 25

    8 formals: formals ';' . formal

    ID  shift, and go to state 15

    formal  go to state 39


state 26

    7 function: FUNCTION ID RETURN BASIC_TYPE IS . decls BEGIN stmnts END ID ';'

    $default  reduce using rule 12 (decls)

    decls  go to state 40


state 27

    6 function: FUNCTION ID '(' formals ')' . RETURN BASIC_TYPE IS decls BEGIN stmnts END ID ';'

    RETURN  shift, and go to state 41


state 28

   13 decl: ID ':' . BASIC_TYPE ';'

    BASIC_TYPE  shift, and go to state 42


state 29

   16 stmnt: ID . ASSIGN expr ';'
   22      | ID . '(' actuals ')' ';'

    ASSIGN  shift, and go to state 43
    '('     shift, and go to state 44


state 30

   17 stmnt: IF . expr THEN stmnts END IF ';'
   18      | IF . expr THEN stmnts ELSE stmnts END IF ';'

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 53


state 31

   19 stmnt: WHILE . expr LOOP stmnts END LOOP ';'

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 54


state 32

   20 stmnt: RETURN . expr ';'
   21      | RETURN . ';'

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    ';'          shift, and go to state 55
    '['          shift, and go to state 52

    expr  go to state 56


state 33

   24 stmnt: EXIT . ';'

    ';'  shift, and go to state 57


state 34

   23 stmnt: LOOP . stmnts END LOOP ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnts  go to state 58
    stmnt   go to state 36


state 35

    5 function: PROCEDURE ID IS decls BEGIN stmnts . END ID ';'
   14 stmnts: stmnts . stmnt

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    END     shift, and go to state 59
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnt  go to state 60


state 36

   15 stmnts: stmnt .

    $default  reduce using rule 15 (stmnts)


state 37

   10 formal: ID ':' BASIC_TYPE .

    $default  reduce using rule 10 (formal)


state 38

    4 function: PROCEDURE ID '(' formals ')' IS . decls BEGIN stmnts END ID ';'

    $default  reduce using rule 12 (decls)

    decls  go to state 61


state 39

    8 formals: formals ';' formal .

    $default  reduce using rule 8 (formals)


state 40

    7 function: FUNCTION ID RETURN BASIC_TYPE IS decls . BEGIN stmnts END ID ';'
   11 decls: decls . decl

    ID     shift, and go to state 20
    BEGIN  shift, and go to state 62

    decl  go to state 22


state 41

    6 function: FUNCTION ID '(' formals ')' RETURN . BASIC_TYPE IS decls BEGIN stmnts END ID ';'

    BASIC_TYPE  shift, and go to state 63


state 42

   13 decl: ID ':' BASIC_TYPE . ';'

    ';'  shift, and go to state 64


state 43

   16 stmnt: ID ASSIGN . expr ';'

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 65


state 44

   22 stmnt: ID '(' . actuals ')' ';'

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    $default  reduce using rule 43 (actuals)

    expr     go to state 66
    actuals  go to state 67
    exprs    go to state 68


state 45

   25 expr: MINUSOP . expr

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 69


state 46

   26 expr: NOTOP . expr

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 70


state 47

   36 expr: ID . '(' actuals ')'
   37     | ID .

    '('  shift, and go to state 71

    $default  reduce using rule 37 (expr)


state 48

   39 expr: BOOL_CONST .

    $default  reduce using rule 39 (expr)


state 49

   38 expr: INT_CONST .

    $default  reduce using rule 38 (expr)


state 50

   40 expr: FLOAT_CONST .

    $default  reduce using rule 40 (expr)


state 51

   35 expr: '(' . expr ')'

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 72


state 52

   41 expr: '[' . FLOAT_CONST ',' FLOAT_CONST ',' FLOAT_CONST ']'

    FLOAT_CONST  shift, and go to state 73


state 53

   17 stmnt: IF expr . THEN stmnts END IF ';'
   18      | IF expr . THEN stmnts ELSE stmnts END IF ';'
   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    OROP      shift, and go to state 74
    ANDOP     shift, and go to state 75
    EQOP      shift, and go to state 76
    MEMTOP    shift, and go to state 77
    LELTOP    shift, and go to state 78
    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81
    THEN      shift, and go to state 82


state 54

   19 stmnt: WHILE expr . LOOP stmnts END LOOP ';'
   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    OROP      shift, and go to state 74
    ANDOP     shift, and go to state 75
    EQOP      shift, and go to state 76
    MEMTOP    shift, and go to state 77
    LELTOP    shift, and go to state 78
    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81
    LOOP      shift, and go to state 83


state 55

   21 stmnt: RETURN ';' .

    $default  reduce using rule 21 (stmnt)


state 56

   20 stmnt: RETURN expr . ';'
   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    OROP      shift, and go to state 74
    ANDOP     shift, and go to state 75
    EQOP      shift, and go to state 76
    MEMTOP    shift, and go to state 77
    LELTOP    shift, and go to state 78
    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81
    ';'       shift, and go to state 84


state 57

   24 stmnt: EXIT ';' .

    $default  reduce using rule 24 (stmnt)


state 58

   14 stmnts: stmnts . stmnt
   23 stmnt: LOOP stmnts . END LOOP ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    END     shift, and go to state 85
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnt  go to state 60


state 59

    5 function: PROCEDURE ID IS decls BEGIN stmnts END . ID ';'

    ID  shift, and go to state 86


state 60

   14 stmnts: stmnts stmnt .

    $default  reduce using rule 14 (stmnts)


state 61

    4 function: PROCEDURE ID '(' formals ')' IS decls . BEGIN stmnts END ID ';'
   11 decls: decls . decl

    ID     shift, and go to state 20
    BEGIN  shift, and go to state 87

    decl  go to state 22


state 62

    7 function: FUNCTION ID RETURN BASIC_TYPE IS decls BEGIN . stmnts END ID ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnts  go to state 88
    stmnt   go to state 36


state 63

    6 function: FUNCTION ID '(' formals ')' RETURN BASIC_TYPE . IS decls BEGIN stmnts END ID ';'

    IS  shift, and go to state 89


state 64

   13 decl: ID ':' BASIC_TYPE ';' .

    $default  reduce using rule 13 (decl)


state 65

   16 stmnt: ID ASSIGN expr . ';'
   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    OROP      shift, and go to state 74
    ANDOP     shift, and go to state 75
    EQOP      shift, and go to state 76
    MEMTOP    shift, and go to state 77
    LELTOP    shift, and go to state 78
    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81
    ';'       shift, and go to state 90


state 66

   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr
   45 exprs: expr .

    OROP      shift, and go to state 74
    ANDOP     shift, and go to state 75
    EQOP      shift, and go to state 76
    MEMTOP    shift, and go to state 77
    LELTOP    shift, and go to state 78
    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81

    $default  reduce using rule 45 (exprs)


state 67

   22 stmnt: ID '(' actuals . ')' ';'

    ')'  shift, and go to state 91


state 68

   42 actuals: exprs .
   44 exprs: exprs . ',' expr

    ','  shift, and go to state 92

    $default  reduce using rule 42 (actuals)


state 69

   25 expr: MINUSOP expr .
   27     | expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    $default  reduce using rule 25 (expr)


state 70

   26 expr: NOTOP expr .
   27     | expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    $default  reduce using rule 26 (expr)


state 71

   36 expr: ID '(' . actuals ')'

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    $default  reduce using rule 43 (actuals)

    expr     go to state 66
    actuals  go to state 93
    exprs    go to state 68


state 72

   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr
   35     | '(' expr . ')'

    OROP      shift, and go to state 74
    ANDOP     shift, and go to state 75
    EQOP      shift, and go to state 76
    MEMTOP    shift, and go to state 77
    LELTOP    shift, and go to state 78
    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81
    ')'       shift, and go to state 94


state 73

   41 expr: '[' FLOAT_CONST . ',' FLOAT_CONST ',' FLOAT_CONST ']'

    ','  shift, and go to state 95


state 74

   31 expr: expr OROP . expr

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 96


state 75

   30 expr: expr ANDOP . expr

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 97


state 76

   32 expr: expr EQOP . expr

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 98


state 77

   34 expr: expr MEMTOP . expr

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 99


state 78

   33 expr: expr LELTOP . expr

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 100


state 79

   27 expr: expr PLUSOP . expr

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 101


state 80

   28 expr: expr MINUSOP . expr

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 102


state 81

   29 expr: expr MULDIVOP . expr

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 103


state 82

   17 stmnt: IF expr THEN . stmnts END IF ';'
   18      | IF expr THEN . stmnts ELSE stmnts END IF ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnts  go to state 104
    stmnt   go to state 36


state 83

   19 stmnt: WHILE expr LOOP . stmnts END LOOP ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnts  go to state 105
    stmnt   go to state 36


state 84

   20 stmnt: RETURN expr ';' .

    $default  reduce using rule 20 (stmnt)


state 85

   23 stmnt: LOOP stmnts END . LOOP ';'

    LOOP  shift, and go to state 106


state 86

    5 function: PROCEDURE ID IS decls BEGIN stmnts END ID . ';'

    ';'  shift, and go to state 107


state 87

    4 function: PROCEDURE ID '(' formals ')' IS decls BEGIN . stmnts END ID ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnts  go to state 108
    stmnt   go to state 36


state 88

    7 function: FUNCTION ID RETURN BASIC_TYPE IS decls BEGIN stmnts . END ID ';'
   14 stmnts: stmnts . stmnt

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    END     shift, and go to state 109
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnt  go to state 60


state 89

    6 function: FUNCTION ID '(' formals ')' RETURN BASIC_TYPE IS . decls BEGIN stmnts END ID ';'

    $default  reduce using rule 12 (decls)

    decls  go to state 110


state 90

   16 stmnt: ID ASSIGN expr ';' .

    $default  reduce using rule 16 (stmnt)


state 91

   22 stmnt: ID '(' actuals ')' . ';'

    ';'  shift, and go to state 111


state 92

   44 exprs: exprs ',' . expr

    MINUSOP      shift, and go to state 45
    NOTOP        shift, and go to state 46
    ID           shift, and go to state 47
    BOOL_CONST   shift, and go to state 48
    INT_CONST    shift, and go to state 49
    FLOAT_CONST  shift, and go to state 50
    '('          shift, and go to state 51
    '['          shift, and go to state 52

    expr  go to state 112


state 93

   36 expr: ID '(' actuals . ')'

    ')'  shift, and go to state 113


state 94

   35 expr: '(' expr ')' .

    $default  reduce using rule 35 (expr)


state 95

   41 expr: '[' FLOAT_CONST ',' . FLOAT_CONST ',' FLOAT_CONST ']'

    FLOAT_CONST  shift, and go to state 114


state 96

   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   31     | expr OROP expr .
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    ANDOP     shift, and go to state 75
    EQOP      shift, and go to state 76
    MEMTOP    shift, and go to state 77
    LELTOP    shift, and go to state 78
    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81

    $default  reduce using rule 31 (expr)


state 97

   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   30     | expr ANDOP expr .
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    EQOP      shift, and go to state 76
    MEMTOP    shift, and go to state 77
    LELTOP    shift, and go to state 78
    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81

    $default  reduce using rule 30 (expr)


state 98

   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   32     | expr EQOP expr .
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    MEMTOP    shift, and go to state 77
    LELTOP    shift, and go to state 78
    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81

    $default  reduce using rule 32 (expr)


state 99

   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr
   34     | expr MEMTOP expr .

    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81

    $default  reduce using rule 34 (expr)


state 100

   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   33     | expr LELTOP expr .
   34     | expr . MEMTOP expr

    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81

    $default  reduce using rule 33 (expr)


state 101

   27 expr: expr . PLUSOP expr
   27     | expr PLUSOP expr .
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    MULDIVOP  shift, and go to state 81

    $default  reduce using rule 27 (expr)


state 102

   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   28     | expr MINUSOP expr .
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    MULDIVOP  shift, and go to state 81

    $default  reduce using rule 28 (expr)


state 103

   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   29     | expr MULDIVOP expr .
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr

    $default  reduce using rule 29 (expr)


state 104

   14 stmnts: stmnts . stmnt
   17 stmnt: IF expr THEN stmnts . END IF ';'
   18      | IF expr THEN stmnts . ELSE stmnts END IF ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    ELSE    shift, and go to state 115
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    END     shift, and go to state 116
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnt  go to state 60


state 105

   14 stmnts: stmnts . stmnt
   19 stmnt: WHILE expr LOOP stmnts . END LOOP ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    END     shift, and go to state 117
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnt  go to state 60


state 106

   23 stmnt: LOOP stmnts END LOOP . ';'

    ';'  shift, and go to state 118


state 107

    5 function: PROCEDURE ID IS decls BEGIN stmnts END ID ';' .

    $default  reduce using rule 5 (function)


state 108

    4 function: PROCEDURE ID '(' formals ')' IS decls BEGIN stmnts . END ID ';'
   14 stmnts: stmnts . stmnt

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    END     shift, and go to state 119
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnt  go to state 60


state 109

    7 function: FUNCTION ID RETURN BASIC_TYPE IS decls BEGIN stmnts END . ID ';'

    ID  shift, and go to state 120


state 110

    6 function: FUNCTION ID '(' formals ')' RETURN BASIC_TYPE IS decls . BEGIN stmnts END ID ';'
   11 decls: decls . decl

    ID     shift, and go to state 20
    BEGIN  shift, and go to state 121

    decl  go to state 22


state 111

   22 stmnt: ID '(' actuals ')' ';' .

    $default  reduce using rule 22 (stmnt)


state 112

   27 expr: expr . PLUSOP expr
   28     | expr . MINUSOP expr
   29     | expr . MULDIVOP expr
   30     | expr . ANDOP expr
   31     | expr . OROP expr
   32     | expr . EQOP expr
   33     | expr . LELTOP expr
   34     | expr . MEMTOP expr
   44 exprs: exprs ',' expr .

    OROP      shift, and go to state 74
    ANDOP     shift, and go to state 75
    EQOP      shift, and go to state 76
    MEMTOP    shift, and go to state 77
    LELTOP    shift, and go to state 78
    PLUSOP    shift, and go to state 79
    MINUSOP   shift, and go to state 80
    MULDIVOP  shift, and go to state 81

    $default  reduce using rule 44 (exprs)


state 113

   36 expr: ID '(' actuals ')' .

    $default  reduce using rule 36 (expr)


state 114

   41 expr: '[' FLOAT_CONST ',' FLOAT_CONST . ',' FLOAT_CONST ']'

    ','  shift, and go to state 122


state 115

   18 stmnt: IF expr THEN stmnts ELSE . stmnts END IF ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnts  go to state 123
    stmnt   go to state 36


state 116

   17 stmnt: IF expr THEN stmnts END . IF ';'

    IF  shift, and go to state 124


state 117

   19 stmnt: WHILE expr LOOP stmnts END . LOOP ';'

    LOOP  shift, and go to state 125


state 118

   23 stmnt: LOOP stmnts END LOOP ';' .

    $default  reduce using rule 23 (stmnt)


state 119

    4 function: PROCEDURE ID '(' formals ')' IS decls BEGIN stmnts END . ID ';'

    ID  shift, and go to state 126


state 120

    7 function: FUNCTION ID RETURN BASIC_TYPE IS decls BEGIN stmnts END ID . ';'

    ';'  shift, and go to state 127


state 121

    6 function: FUNCTION ID '(' formals ')' RETURN BASIC_TYPE IS decls BEGIN . stmnts END ID ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnts  go to state 128
    stmnt   go to state 36


state 122

   41 expr: '[' FLOAT_CONST ',' FLOAT_CONST ',' . FLOAT_CONST ']'

    FLOAT_CONST  shift, and go to state 129


state 123

   14 stmnts: stmnts . stmnt
   18 stmnt: IF expr THEN stmnts ELSE stmnts . END IF ';'

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    END     shift, and go to state 130
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnt  go to state 60


state 124

   17 stmnt: IF expr THEN stmnts END IF . ';'

    ';'  shift, and go to state 131


state 125

   19 stmnt: WHILE expr LOOP stmnts END LOOP . ';'

    ';'  shift, and go to state 132


state 126

    4 function: PROCEDURE ID '(' formals ')' IS decls BEGIN stmnts END ID . ';'

    ';'  shift, and go to state 133


state 127

    7 function: FUNCTION ID RETURN BASIC_TYPE IS decls BEGIN stmnts END ID ';' .

    $default  reduce using rule 7 (function)


state 128

    6 function: FUNCTION ID '(' formals ')' RETURN BASIC_TYPE IS decls BEGIN stmnts . END ID ';'
   14 stmnts: stmnts . stmnt

    ID      shift, and go to state 29
    IF      shift, and go to state 30
    WHILE   shift, and go to state 31
    RETURN  shift, and go to state 32
    END     shift, and go to state 134
    EXIT    shift, and go to state 33
    LOOP    shift, and go to state 34

    stmnt  go to state 60


state 129

   41 expr: '[' FLOAT_CONST ',' FLOAT_CONST ',' FLOAT_CONST . ']'

    ']'  shift, and go to state 135


state 130

   18 stmnt: IF expr THEN stmnts ELSE stmnts END . IF ';'

    IF  shift, and go to state 136


state 131

   17 stmnt: IF expr THEN stmnts END IF ';' .

    $default  reduce using rule 17 (stmnt)


state 132

   19 stmnt: WHILE expr LOOP stmnts END LOOP ';' .

    $default  reduce using rule 19 (stmnt)


state 133

    4 function: PROCEDURE ID '(' formals ')' IS decls BEGIN stmnts END ID ';' .

    $default  reduce using rule 4 (function)


state 134

    6 function: FUNCTION ID '(' formals ')' RETURN BASIC_TYPE IS decls BEGIN stmnts END . ID ';'

    ID  shift, and go to state 137


state 135

   41 expr: '[' FLOAT_CONST ',' FLOAT_CONST ',' FLOAT_CONST ']' .

    $default  reduce using rule 41 (expr)


state 136

   18 stmnt: IF expr THEN stmnts ELSE stmnts END IF . ';'

    ';'  shift, and go to state 138


state 137

    6 function: FUNCTION ID '(' formals ')' RETURN BASIC_TYPE IS decls BEGIN stmnts END ID . ';'

    ';'  shift, and go to state 139


state 138

   18 stmnt: IF expr THEN stmnts ELSE stmnts END IF ';' .

    $default  reduce using rule 18 (stmnt)


state 139

    6 function: FUNCTION ID '(' formals ')' RETURN BASIC_TYPE IS decls BEGIN stmnts END ID ';' .

    $default  reduce using rule 6 (function)
