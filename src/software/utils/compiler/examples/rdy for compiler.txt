procedure IntLessThan(iLeft : integer; iRight : integer; bResult : access(boolean)) is
begin
	bResult := iLeft < iRight;
end IntLessThan;

procedure ZeroVector(vOutput : access(vector)) is
begin
	vOutput := [0.0, 0.0, 0.0];
end ZeroVector;

procedure IdentityMatrix(mOutput : access(matrix)) is
begin
	mOutput := [	[1.0, 0.0, 0.0],
			[0.0, 1.0, 0.0],
			[0.0, 0.0, 1.0]		];
end IdentityMatrix;




procedure main is
	IntLessThan_1_iLeft : integer;
	IntLessThan_1_iRight : integer;
	IntLessThan_1_bResult : boolean;

	ZeroVector_vOutput_1 : vector;
	ZeroVector_vOutput_2 : vector;
	ZeroVector_vOutput_3 : vector;

	IdentityMatrix_mOutput_1 : matrix;
	IdentityMatrix_mOutput_2 : matrix;
	IdentityMatrix_mOutput_3 : matrix;
	IdentityMatrix_mOutput_4 : matrix;
begin

	IntLessThan_iLeft_1 := 3;
	IntLessThan_iRight_1 := 5;

<< Start >>
	IntLessThan(IntLessThan_1_iLeft, IntLessThan_1_iRight, access(IntLessThan_1_bResult));
<< Branch1 >>
	if IntLessThan_bResult_1 then
<< ZeroVector1 >>
		ZeroVector(access(ZeroVector_vOutput_1));
<< IdentityMatrix1 >>
		IdentityMatrix(access(IdentityMatrix_mOutput_1));		
<< Branch2 >>
		if IntLessThan_bResult_1 then
<< ZeroVector2 >>
			ZeroVector(access(ZeroVector_vOutput_2));
<< IdentityMatrix2 >>
			IdentityMatrix(access(IdentityMatrix_mOutput_2));		
			goto Start;
		else
<< IdentityMatrix3 >>
			IdentityMatrix(access(IdentityMatrix_mOutput_3));								
			goto Start;
		end if;
	else
<< IdentityMatrix4 >>
		IdentityMatrix(access(IdentityMatrix_mOutput_4));
		goto Start;
	end if;
	
end main;



