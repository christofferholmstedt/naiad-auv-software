        -:    0:Source:/home/evr/git/naiad-auv-software/src/navigation/vectors/obj/gnattest/tests/navigation-vectors-cvector_test_data-cvector_tests.adb
        -:    0:Programs:22
        -:    1:--  This package has been generated automatically by GNATtest.
        -:    2:--  You are allowed to add your code to the bodies of test routines.
        -:    3:--  Such changes will be kept during further regeneration of this file.
        -:    4:--  All code placed outside of test routine bodies will be lost. The
        -:    5:--  code intended to set up and tear down the test environment should be
        -:    6:--  placed into Navigation.Vectors.CVector_Test_Data.
        -:    7:
        -:    8:with AUnit.Assertions; use AUnit.Assertions;
        -:    9:
        -:   10:package body Navigation.Vectors.CVector_Test_Data.CVector_Tests is
        -:   11:
        -:   12:
        -:   13:--  begin read only
        -:   14:   procedure Test_fLength_Squared (Gnattest_T : in out Test_CVector);
        2:   15:   procedure Test_fLength_Squared_3272b8 (Gnattest_T : in out Test_CVector) renames Test_fLength_Squared;
        -:   16:--  id:2.1/3272b8b09e9cef04/fLength_Squared/1/0/
        2:   17:   procedure Test_fLength_Squared (Gnattest_T : in out Test_CVector) is
        -:   18:   --  navigation-vectors.ads:9:4:fLength_Squared
        -:   19:--  end read only
        -:   20:
        -:   21:      pragma Unreferenced (Gnattest_T);
        2:   22:      pxTestVector : Navigation.Vectors.pCVector;
        -:   23:
        -:   24:    begin
        -:   25:
        2:   26:      pxTestVector := Navigation.Vectors.pxCreate(10.0,5.0,2.0);
        2:   27:      AUnit.Assertions.Assert(Condition => pxTestVector.fLength_Squared = 10000.0,
        -:   28:                              Message   => "CVector.fLength_Squared failed");
        -:   29:--  begin read only
        2:   30:   end Test_fLength_Squared;
        -:   31:--  end read only
        -:   32:
        -:   33:
        -:   34:--  begin read only
        -:   35:   procedure Test_1_fDot_Product (Gnattest_T : in out Test_CVector);
        2:   36:   procedure Test_fDot_Product_e9a44e (Gnattest_T : in out Test_CVector) renames Test_1_fDot_Product;
        -:   37:--  id:2.1/e9a44e462a2e4775/fDot_Product/1/0/
        2:   38:   procedure Test_1_fDot_Product (Gnattest_T : in out Test_CVector) is
        -:   39:   --  navigation-vectors.ads:19:4:fDot_Product
        -:   40:--  end read only
        -:   41:
        -:   42:      pragma Unreferenced (Gnattest_T);
        -:   43:
        -:   44:      fDotProduct : float;
        2:   45:      pxTestVector : Navigation.Vectors.pCVector;
        2:   46:      pxOtherVector : Navigation.Vectors.pCVector;
        -:   47:
        -:   48:   begin
        -:   49:
        2:   50:      pxTestVector := Navigation.Vectors.pxCreate(fX => 5.0,
        -:   51:                                                  fY => 2.0,
        -:   52:                                                  fZ => 3.0);
        2:   53:      pxOtherVector := Navigation.Vectors.pxCreate(fX => 2.0,
        -:   54:                                                   fY => 7.0,
        -:   55:                                                   fZ => 3.0);
        2:   56:      fDotProduct := pxTestVector.fDot_Product(pxOtherVector);
        -:   57:
        2:   58:      AUnit.Assertions.Assert(Condition => fDotProduct = 33.0,
        -:   59:                              Message   => "CVector.fDot_Product failed, wrong result in first test");
        -:   60:
        2:   61:      pxTestVector := Navigation.Vectors.pxCreate(fX => 5.0,
        -:   62:                                                  fY => 0.0,
        -:   63:                                                  fZ => 0.0);
        2:   64:      pxOtherVector := Navigation.Vectors.pxCreate(fX => 0.0,
        -:   65:                                                   fY => 5.0,
        -:   66:                                                   fZ => 0.0);
        2:   67:      fDotProduct := pxTestVector.fDot_Product(pxOtherVector);
        -:   68:
        2:   69:      AUnit.Assertions.Assert(Condition => fDotProduct = 0.0,
        -:   70:                              Message   => "CVector.fDot_Product failed, wrong result in second test");
        -:   71:
        -:   72:
        -:   73:--  begin read only
        2:   74:   end Test_1_fDot_Product;
        -:   75:--  end read only
        -:   76:
        -:   77:
        -:   78:--  begin read only
        -:   79:   --  procedure Test_LengthSq (Gnattest_T : in out Test);
        -:   80:   --  procedure Test_LengthSq_182036 (Gnattest_T : in out Test) renames Test_LengthSq;
        -:   81:--  id:2.1/18203616527d0279/LengthSq/0/1/
        -:   82:   --  procedure Test_LengthSq (Gnattest_T : in out Test) is
        -:   83:--  end read only
        -:   84:--
        -:   85:--        pragma Unreferenced (Gnattest_T);
        -:   86:--        pxTestVector : Navigation.Vectors.pCVector;
        -:   87:--
        -:   88:--     begin
        -:   89:--
        -:   90:--        pxTestVector := Navigation.Vectors.Create(10.0,5.0,2.0);
        -:   91:--        AUnit.Assertions.Assert(Condition => pxTestVector.LengthSq = 10000.0,
        -:   92:--                                Message   => "CVector.LengthSq failed");
        -:   93:--
        -:   94:--  begin read only
        -:   95:   --  end Test_LengthSq;
        -:   96:--  end read only
        -:   97:
        -:   98:end Navigation.Vectors.CVector_Test_Data.CVector_Tests;
