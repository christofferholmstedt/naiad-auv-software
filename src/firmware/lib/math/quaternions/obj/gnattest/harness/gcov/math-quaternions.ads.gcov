        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/quaternions/src/math-quaternions.ads
        -:    0:Programs:21
        -:    1:with Math;
        -:    2:with Math.Vectors; use Math.Vectors;
        -:    3:with System; use System;
        -:    4:with Ada.Exceptions;
        -:    5:
        -:    6:-- Quaternions package for classes and functionality regarding quaternions. A quaternion object is stored in a pCQuaternion variable and is created with the pxCreate functions.
        4:    7:package Math.Quaternions is
    #####:    8:   type CQuaternion is tagged private;
        -:    9:   --  <summary>Class for quaternion.</summary>
        -:   10:
        -:   11:   type pCQuaternion is access CQuaternion;
        -:   12:   --  <summary>Pointer type for object of type CQuaternion. Objects of type CQuaternion should always be stored in variables of this type.</summary>
        -:   13:
        -:   14:   function pxCreate (fX, fY, fZ, fW : in float) return pCQuaternion;
        -:   15:   --  <summary>Creates an object of type CQuaternion. Returns a pointer of type pCQuaternion to the object created.</summary>
        -:   16:   --  <parameter name="fX">The value of the quaternion's X-component.</parameter>
        -:   17:   --  <parameter name="fY">The value of the quaternion's Y-component.</parameter>
        -:   18:   --  <parameter name="fZ">The value of the quaternion's Z-component.</parameter>
        -:   19:   --  <parameter name="fW">The value of the quaternion's W-component.</parameter>
        -:   20:
        -:   21:   function pxCreate (pxAxisVector : in Math.Vectors.pCVector; fAngleInDegrees : in float) return pCQuaternion;
        -:   22:   --  <summary>Creates an object of type CQuaternion defining it with an axis vector and an angle in degrees of rotation around that axis. Returns a pointer of type pCQuaternion to the object created.</summary>
        -:   23:   --  <parameter name="pxAxisVector">The axis vector of the quaternion.</parameter>
        -:   24:   --  <parameter name="fAngleInDegrees">The angle (in degrees) of rotation of the quaternion.</parameter>
        -:   25:
        -:   26:   function pxGet_Copy (this : in CQuaternion) return pCQuaternion;
        -:   27:   --  <summary>Creates an object of type CQuaternion with all components copied from the object called on. Returns a pointer of type pCQuaternion to the object created.</summary>
        -:   28:   --  <parameter name="this">The quaternion to copy the components from.</parameter>
        -:   29:
        -:   30:   function "+" (pxLeftOperandQuaternion, pxRightOperandQuaternion : in pCQuaternion) return pCQuaternion;
        -:   31:   --  <summary>Creates an object of type CQuaternion with each component the sum of the two operand quaternions' components. Returns a pointer of type pCQuaternion to the object created.</summary>
        -:   32:   --  <parameter name="pxLeftOperandQuaternion">The CQuaternion object representing the left operand.</parameter>
        -:   33:   --  <parameter name="pxRightOperandQuaternion">The CQuaternion object representing the right operand.</parameter>
        -:   34:
        -:   35:   function "-" (pxLeftOperandQuaternion, pxRightOperandQuaternion : in pCQuaternion) return pCQuaternion;
        -:   36:   --  <summary>Creates an object of type CQuaternion with each component the difference of the two operand quaternions' components. Returns a pointer of type pCQuaternion to the object created.</summary>
        -:   37:   --  <parameter name="pxLeftOperandQuaternion">The CQuaternion object representing the left operand.</parameter>
        -:   38:   --  <parameter name="pxRightOperandQuaternion">The CQuaternion object representing the right operand.</parameter>
        -:   39:
        -:   40:   function "*" (pxLeftOperandQuaternion, pxRightOperandQuaternion : in pCQuaternion) return pCQuaternion;
        -:   41:   --  <summary>Creates an object of type CQuaternion with each component the product of the two operand quaternions' components. Returns a pointer of type pCQuaternion to the object created.</summary>
        -:   42:   --  <parameter name="pxLeftOperandQuaternion">The CQuaternion object representing the left operand.</parameter>
        -:   43:   --  <parameter name="pxRightOperandQuaternion">The CQuaternion object representing the right operand.</parameter>
        -:   44:
        -:   45:   function "=" (pxLeftOperandQuaternion, pxRightOperandQuaternion : in pCQuaternion) return boolean;
        -:   46:   --  <summary>Returns true if the two quaternions are equal, false otherwise.</summary>
        -:   47:   --  <parameter name="pxLeftOperandQuaternion">The CQuaternion object representing the left operand.</parameter>
        -:   48:   --  <parameter name="pxRightOperandQuaternion">The CQuaternion object representing the right operand.</parameter>
        -:   49:
        -:   50:   function fGet_Dot_Product (pxLeftOperandQuaternion, pxRightOperandQuaternion : in pCQuaternion) return float;
        -:   51:   --  <summary>Returns the dot product of the two quaternions.</summary>
        -:   52:   --  <parameter name="pxLeftOperandQuaternion">The CQuaternion object representing the left operand.</parameter>
        -:   53:   --  <parameter name="pxRightOperandQuaternion">The CQuaternion object representing the right operand.</parameter>
        -:   54:
        -:   55:--   function pxGet_Spherical_Linear_Interpolation_Quaternion (pxFromQuaternion : in pCQuaternion; pxToQuaternion : in pCQuaternion; fInterpolationCoefficient : float) return pCQuaternion;
        -:   56:   function pxGet_Normalized (this : in CQuaternion) return pCQuaternion;
        -:   57:   --  <summary>Creates an object of type CQuaternion which is a normalized copy of the object called on. Returns a pointer of type pCQuaternion to the object created.</summary>
        -:   58:   --  <parameter name="this">The quaternion to normalize.</parameter>
        -:   59:
        -:   60:   function fGet_Length (this : in CQuaternion) return float;
        -:   61:   --  <summary>Returns the length of the quaternion called on.</summary>
        -:   62:   --  <parameter name="this">The quaternion to return the length of.</parameter>
        -:   63:
        -:   64:   function fGet_Length_Squared (this : in CQuaternion) return float;
        -:   65:   --  <summary>Returns the squared length of the quaternion called on.</summary>
        -:   66:   --  <parameter name="this">The quaternion to return the squared length of.</parameter>
        -:   67:
        -:   68:   function fGet_X ( this : in CQuaternion) return float;
        -:   69:   --  <summary>Returns the quaternion's X-component value.</summary>
        -:   70:   --  <parameter name="this">The quaternion holding the wanted X-component.</parameter>
        -:   71:
        -:   72:   function fGet_Y ( this : in CQuaternion) return float;
        -:   73:   --  <summary>Returns the quaternion's Y-component value.</summary>
        -:   74:   --  <parameter name="this">The quaternion holding the wanted Y-component.</parameter>
        -:   75:
        -:   76:   function fGet_Z ( this : in CQuaternion) return float;
        -:   77:   --  <summary>Returns the quaternion's Z-component value.</summary>
        -:   78:   --  <parameter name="this">The quaternion holding the wanted Z-component.</parameter>
        -:   79:
        -:   80:   function fGet_W ( this : in CQuaternion) return float;
        -:   81:   --  <summary>Returns the quaternion's W-component value.</summary>
        -:   82:   --  <parameter name="this">The quaternion holding the wanted W-component.</parameter>
        -:   83:
        -:   84:
        -:   85:   function fGet_Axis_Vector ( this : in CQuaternion) return Math.Vectors.pCVector;
        -:   86:    --  <summary>Returns a copy of the quaternion's axis vector.</summary>
        -:   87:   --  <parameter name="this">The quaternion holding the wanted axis vector.</parameter>
        -:   88:
        -:   89:   function fGet_Angle_In_Degrees (this : in CQuaternion) return float;
        -:   90:   --  <summary>Returns the quaternion's angle of rotation. (in degrees)</summary>
        -:   91:   --  <parameter name="this">The quaternion holding the wanted angle of rotation.</parameter>
        -:   92:
        -:   93:
        -:   94:private
       60:   95:   type CQuaternion is tagged
        -:   96:      record
        -:   97:         fX : float;
        -:   98:         fY : float;
        -:   99:         fZ : float;
        -:  100:         fW : float;
        -:  101:      end record;
        -:  102:
        2:  103:end Math.Quaternions;
