        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/planes/src/math-planes.ads
        -:    0:Programs:25
        -:    1:with Exception_Handling;
        -:    2:with Math;
        -:    3:with Math.Vectors;-- use Math.Vectors;
        -:    4:with Ada.Finalization;
        -:    5:with Ada.Text_IO;
        -:    6:with System;
        -:    7:with Math.Angles;
        -:    8:with Ada.Unchecked_Deallocation;
        -:    9:with Ada.Exceptions;
        -:   10:
        -:   11:-- Planes package for classes and functionality regarding planes. A plane object is stored in a pCPlane variable and is created with the pxCreate function.
        4:   12:package Math.Planes is
        -:   13:
    #####:   14:   type CPlane is tagged private;
        -:   15:   --  <summary>Class for plane.</summary>
        -:   16:
        -:   17:   type pCPlane is access CPlane;
        -:   18:   --  <summary>Pointer type for object of type CPlane. Objects of type CPlane should always be stored in variables of this type.</summary>
        -:   19:
        -:   20:   procedure Free(pxPlaneToDeallocate : in out pCPlane);
        -:   21:
        -:   22:   function xCreate (xNormalVector : in Math.Vectors.CVector; fDistanceFromOrigin : in float) return CPlane;
        -:   23:   function xCreate (pxNormalVector : in Math.Vectors.pCVector; fDistanceFromOrigin : in float) return CPlane;
        -:   24:   --  <summary>Creates an object of type CPlane. Returns a pointer of type pCPlane to the object created.</summary>
        -:   25:   --  <parameter name="pxNormalVector">The normal vector of the plane to be created.</parameter>
        -:   26:   --  <parameter name="fDistanceFromOrigin">The distance from origin to plane along the normal vector.</parameter>
        -:   27:   --  <exception>Numeric_Error, if pxNormalVector vector length = 0.0.</exception>
        -:   28:
        -:   29:   function pxGet_Allocated_Copy(this : in CPlane) return pCPlane;
        -:   30:
        -:   31:   --procedure Log_Plane(this : in CPlane);
        -:   32:
        -:   33:   function xGet_Normal_Vector (this : in CPlane) return Math.Vectors.CVector;
        -:   34:   --  <summary>Returns a copy of the plane's normal vector.</summary>
        -:   35:   --  <parameter name="this">Represents the plane which the normal vector will be copied from.</parameter>
        -:   36:
        -:   37:   function fGet_Distance_From_Origin (this : in CPlane) return float;
        -:   38:   --  <summary>Returns the distance from origin to plane along the normal vector.</summary>
        -:   39:   --  <parameter name="this">Represents the plane which the distance will be read from.</parameter>
        -:   40:
        -:   41:
        -:   42:   function fAngle_Between_In_Degrees (xLeftOperandPlane : in CPlane; pxRightOperandPlane : in pCPlane) return float;
        -:   43:   function fAngle_Between_In_Degrees (pxLeftOperandPlane : in pCPlane; xRightOperandPlane : in CPlane) return float;
        -:   44:   function fAngle_Between_In_Degrees (pxLeftOperandPlane : in pCPlane; pxRightOperandPlane : in pCPlane) return float;
        -:   45:   function fAngle_Between_In_Degrees (xLeftOperandPlane : in CPlane; xRightOperandPlane : in CPlane) return float;
        -:   46:   --  <summary>Returns the closest angle in degrees between the two planes.</summary>
        -:   47:   --  <parameter name="pxLeftOperandPlane">Represents the left operand plane.</parameter>
        -:   48:   --  <parameter name="pxRightOperandPlane">Represents the right operand plane.</parameter>
        -:   49:
        -:   50:   function xGet_Intersection_Vector_Between (xLeftOperandPlane : in CPlane; pxRightOperandPlane : in pCPlane) return Math.Vectors.CVector;
        -:   51:   function xGet_Intersection_Vector_Between (pxLeftOperandPlane : in pCPlane; xRightOperandPlane : in CPlane) return Math.Vectors.CVector;
        -:   52:   function xGet_Intersection_Vector_Between (pxLeftOperandPlane : in pCPlane; pxRightOperandPlane : in pCPlane) return Math.Vectors.CVector;
        -:   53:   function xGet_Intersection_Vector_Between (xLeftOperandPlane : in CPlane; xRightOperandPlane : in CPlane) return Math.Vectors.CVector;
        -:   54:   --  <summary>Creates an object of type CVector representing the vector defining the intersection line between the two planes.</summary>
        -:   55:   --  <parameter name="pxLeftOperandPlane">Represents the left operand plane.</parameter>
        -:   56:   --  <parameter name="pxRightOperandPlane">Represents the right operand plane.</parameter>
        -:   57:   --  <exception>Numeric_Error, if the planes are parallel.</exception>
        -:   58:
        -:   59:
        -:   60:   procedure Copy_From(this : in out CPlane; xSourcePlane : in CPlane);
        -:   61:
        -:   62:
        -:   63:private
       12:   64:   type CPlane is tagged
        -:   65:      record
        -:   66:         fA : float;
        -:   67:         fB : float;
        -:   68:         fC : float;
        -:   69:         fD : float;
        -:   70:      end record;
        -:   71:
        2:   72:end Math.Planes;
