        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/planes/obj/gnattest/tests/math-planes-test_data-tests.adb
        -:    0:Programs:25
        -:    1:--  This package has been generated automatically by GNATtest.
        -:    2:--  You are allowed to add your code to the bodies of test routines.
        -:    3:--  Such changes will be kept during further regeneration of this file.
        -:    4:--  All code placed outside of test routine bodies will be lost. The
        -:    5:--  code intended to set up and tear down the test environment should be
        -:    6:--  placed into Math.Planes.Test_Data.
        -:    7:
        -:    8:with AUnit.Assertions; use AUnit.Assertions;
        -:    9:
        -:   10:package body Math.Planes.Test_Data.Tests is
        -:   11:
        -:   12:
        -:   13:--  begin read only
        -:   14:   procedure Test_Free (Gnattest_T : in out Test);
        2:   15:   procedure Test_Free_b3f07a (Gnattest_T : in out Test) renames Test_Free;
        -:   16:--  id:2.1/b3f07a2a02b76c41/Free/1/0/
        4:   17:   procedure Test_Free (Gnattest_T : in out Test) is
        -:   18:   --  math-planes.ads:16:4:Free
        -:   19:--  end read only
        -:   20:
        -:   21:      pragma Unreferenced (Gnattest_T);
        -:   22:
        2:   23:      pxPlane : Math.Planes.pCPlane;
        2:   24:      xPlane : Math.Planes.CPlane := Math.Planes.xCreate(xNormalVector       => Math.Vectors.xCreate(fX => 3.4,
        -:   25:                                                                                                     fY => -2.4,
        -:   26:                                                                                                     fZ => 5.2),
        -:   27:                                                         fDistanceFromOrigin => 4.3);
        -:   28:   begin
        -:   29:      
        -:   30:
        2:   31:      pxPlane := xPlane.pxGet_Allocated_Copy;
        -:   32:      
        2:   33:      AUnit.Assertions.Assert(Condition => pxPlane /= null,
        -:   34:                              Message   => "Memory test failed, pointer is null after allocation.");      
        -:   35:
        2:   36:      Math.Planes.Free(pxPlaneToDeallocate => pxPlane);
        2:   37:      AUnit.Assertions.Assert(Condition => pxPlane = null,
        -:   38:                              Message   => "Memory test failed, pointer is not null after deallocation.");      
        -:   39:      
        -:   40:--  begin read only
        2:   41:   end Test_Free;
        -:   42:--  end read only
        -:   43:
        -:   44:
        -:   45:--  begin read only
        -:   46:   procedure Test_1_fAngle_Between_In_Degrees (Gnattest_T : in out Test);
        2:   47:   procedure Test_fAngle_Between_In_Degrees_4fe9d1 (Gnattest_T : in out Test) renames Test_1_fAngle_Between_In_Degrees;
        -:   48:--  id:2.1/4fe9d1bd22e7e480/fAngle_Between_In_Degrees/1/0/
        4:   49:   procedure Test_1_fAngle_Between_In_Degrees (Gnattest_T : in out Test) is
        -:   50:   --  math-planes.ads:40:4:fAngle_Between_In_Degrees
        -:   51:--  end read only
        -:   52:
        -:   53:      pragma Unreferenced (Gnattest_T);
        -:   54:
        2:   55:      pxLeftPlane : pCPlane;
        2:   56:      pxRightPlane : pCPlane;
        2:   57:      pxXVector : Math.Vectors.pCVector;
        2:   58:      pxYVector : Math.Vectors.pCVector;
        -:   59:   begin
        -:   60:
        2:   61:      pxXVector := Math.Vectors.xCreate(fX => 1.0,
        -:   62:                                         fY => 0.0,
        -:   63:                                         fZ => 0.0).pxGet_Allocated_Copy;
        2:   64:      pxYVector := Math.Vectors.xCreate(fX => 0.0,
        -:   65:                                         fY => 1.0,
        -:   66:                                         fZ => 0.0).pxGet_Allocated_Copy;
        -:   67:
        2:   68:      pxLeftPlane := Math.Planes.xCreate(pxNormalVector      => pxXVector,
        -:   69:                                          fDistanceFromOrigin => 0.0).pxGet_Allocated_Copy;
        2:   70:      pxRightPlane := Math.Planes.xCreate(pxNormalVector      => pxYVector,
        -:   71:                                          fDistanceFromOrigin => 0.0).pxGet_Allocated_Copy;
        2:   72:      AUnit.Assertions.Assert(Condition => Math.Planes.fAngle_Between_In_Degrees(pxLeftOperandPlane  => pxLeftPlane,
        -:   73:                                                                      pxRightOperandPlane => pxRightPlane) = 90.0,
        -:   74:                              Message   => "CPlane.fAngle_Between_In_Degrees failed.");
        -:   75:
        2:   76:      Math.Vectors.Free(pxVectorToDeallocate => pxXVector);
        2:   77:      Math.Vectors.Free(pxVectorToDeallocate => pxYVector);
        2:   78:      Math.Planes.Free(pxPlaneToDeallocate => pxLeftPlane);
        2:   79:      Math.Planes.Free(pxPlaneToDeallocate => pxRightPlane);
        -:   80:
        -:   81:
        -:   82:--  begin read only
        2:   83:   end Test_1_fAngle_Between_In_Degrees;
        -:   84:--  end read only
        -:   85:
        -:   86:
        -:   87:--  begin read only
        -:   88:   procedure Test_1_xGet_Intersection_Vector_Between (Gnattest_T : in out Test);
        2:   89:   procedure Test_xGet_Intersection_Vector_Between_288e7f (Gnattest_T : in out Test) renames Test_1_xGet_Intersection_Vector_Between;
        -:   90:--  id:2.1/288e7f4b8a8053a0/xGet_Intersection_Vector_Between/1/0/
        -:   91:   procedure Test_1_xGet_Intersection_Vector_Between (Gnattest_T : in out Test) is
        -:   92:   --  math-planes.ads:48:4:xGet_Intersection_Vector_Between
        -:   93:--  end read only
        -:   94:
        -:   95:      pragma Unreferenced (Gnattest_T);
        -:   96:
        -:   97:   begin
        -:   98:
        -:   99:      null;
        -:  100:      
        -:  101:--  begin read only
        -:  102:   end Test_1_xGet_Intersection_Vector_Between;
        -:  103:--  end read only
        -:  104:
        -:  105:
        -:  106:--  begin read only
        -:  107:   --  procedure Test_pxGet_Intersection_Vector_Between (Gnattest_T : in out Test);
        -:  108:   --  procedure Test_pxGet_Intersection_Vector_Between_ae083a (Gnattest_T : in out Test) renames Test_pxGet_Intersection_Vector_Between;
        -:  109:--  id:2.1/ae083a1283dac6b1/pxGet_Intersection_Vector_Between/1/1/
        -:  110:   --  procedure Test_pxGet_Intersection_Vector_Between (Gnattest_T : in out Test) is
        -:  111:--  end read only
        -:  112:--  
        -:  113:--        pragma Unreferenced (Gnattest_T);
        -:  114:--  
        -:  115:--        use Math.Vectors;
        -:  116:--        pxLeftPlane, pxRightPlane : pCPlane;
        -:  117:--        pxLeftNormal, pxRightNormal : Math.Vectors.pCVector;
        -:  118:--        pxExpectedIntersection : Math.Vectors.pCVector;
        -:  119:--        pxIntersection : Math.Vectors.pCVector;
        -:  120:--     begin
        -:  121:--  
        -:  122:--        pxLeftNormal := Math.Vectors.xCreate(fX => 1.0,
        -:  123:--                                              fY => 0.0,
        -:  124:--                                              fZ => 0.0).pxGet_Allocated_Copy;
        -:  125:--        pxRightNormal := Math.Vectors.xCreate(fX => 0.0,
        -:  126:--                                               fY => 1.0,
        -:  127:--                                               fZ => 0.0).pxGet_Allocated_Copy;
        -:  128:--        pxLeftPlane := Math.Planes.xCreate(pxNormalVector      => pxLeftNormal,
        -:  129:--                                            fDistanceFromOrigin => 0.0).pxGet_Allocated_Copy;
        -:  130:--        pxRightPlane := Math.Planes.xCreate(pxNormalVector      => pxRightNormal,
        -:  131:--                                             fDistanceFromOrigin => 0.0).pxGet_Allocated_Copy;
        -:  132:--        pxExpectedIntersection := Math.Vectors.xCreate(fX => 0.0,
        -:  133:--                                                        fY => 0.0,
        -:  134:--                                                        fZ => 1.0).pxGet_Allocated_Copy;
        -:  135:--        pxIntersection := Math.Planes.xGet_Intersection_Vector_Between(pxLeftOperandPlane  => pxLeftPlane,
        -:  136:--                                                                        pxRightOperandPlane => pxRightPlane).pxGet_Allocated_Copy;
        -:  137:--        AUnit.Assertions.Assert(Condition => pxIntersection.all = pxExpectedIntersection.all,
        -:  138:--                                Message   => "CPlane.pxGet_Intersection_Vector_Between failed.");
        -:  139:--  
        -:  140:--        Math.Vectors.Free(pxVectorToDeallocate => pxLeftNormal);
        -:  141:--        Math.Vectors.Free(pxVectorToDeallocate => pxRightNormal);
        -:  142:--        Math.Vectors.Free(pxVectorToDeallocate => pxExpectedIntersection);
        -:  143:--        Math.Vectors.Free(pxVectorToDeallocate => pxIntersection);
        -:  144:--        Math.Planes.Free(pxPlaneToDeallocate => pxLeftPlane);
        -:  145:--        Math.Planes.Free(pxPlaneToDeallocate => pxRightPlane);
        -:  146:--  
        -:  147:--  
        -:  148:--  begin read only
        -:  149:   --  end Test_pxGet_Intersection_Vector_Between;
        -:  150:--  end read only
        -:  151:
        -:  152:
        -:  153:--  begin read only
        -:  154:   --  procedure Test_pxCreate (Gnattest_T : in out Test);
        -:  155:   --  procedure Test_pxCreate_ef4fa7 (Gnattest_T : in out Test) renames Test_pxCreate;
        -:  156:--  id:2.1/ef4fa732366cbfbb/pxCreate/1/1/
        -:  157:   --  procedure Test_pxCreate (Gnattest_T : in out Test) is
        -:  158:--  end read only
        -:  159:--  
        -:  160:--        pragma Unreferenced (Gnattest_T);
        -:  161:--        use Math.Vectors;
        -:  162:--  
        -:  163:--        pxTestPlane : pCPlane;
        -:  164:--        pxTestNormal : Math.Vectors.pCVector;
        -:  165:--        fExpectedAX : float := 0.980581;
        -:  166:--        fExpectedBY : float := 0.0;
        -:  167:--        fExpectedCZ : float := -0.196116;
        -:  168:--        fExpectedD : float := 0.0;
        -:  169:--  
        -:  170:--     begin
        -:  171:--  
        -:  172:--        pxTestNormal := Math.Vectors.xCreate(fX => 5.0,
        -:  173:--                                              fY => 0.0,
        -:  174:--                                              fZ => -1.0).pxGet_Allocated_Copy;
        -:  175:--        pxTestPlane := Math.Planes.xCreate(pxNormalVector      => pxTestNormal,
        -:  176:--                                            fDistanceFromOrigin => 0.0).pxGet_Allocated_Copy;
        -:  177:--  
        -:  178:--  
        -:  179:--  
        -:  180:--        AUnit.Assertions.Assert(Condition => pxTestNormal.xGet_Normalized = pxTestPlane.xGet_Normal_Vector,
        -:  181:--                                Message   => "CPlane.pxCreate failed, normal vector is wrong.");
        -:  182:--        AUnit.Assertions.Assert(Condition => pxTestPlane.fGet_Distance_From_Origin = fExpectedD,
        -:  183:--                                Message   => "CPlane.pxCreate failed, wrong distance from origin.");
        -:  184:--  --        AUnit.Assertions.Assert(Condition => abs(pxTestPlane.fCZ - fExpectedCZ) < 0.001,
        -:  185:--  --                                Message   => "CPlane.pxCreate failed, wrong CZ value. Value: " & float'Image(pxTestPlane.fCZ) & ". Expected: " & float'Image(fExpectedCZ) & ".");
        -:  186:--  --        AUnit.Assertions.Assert(Condition => abs(pxTestPlane.fD - fExpectedD) < 0.001,
        -:  187:--  --                                Message   => "CPlane.pxCreate failed, wrong D value. Value: " & float'Image(pxTestPlane.fD) & ". Expected: " & float'Image(fExpectedD) & ".");
        -:  188:--  
        -:  189:--        Math.Vectors.Free(pxVectorToDeallocate => pxTestNormal);
        -:  190:--        Math.Planes.Free(pxPlaneToDeallocate => pxTestPlane);
        -:  191:--  begin read only
        -:  192:   --  end Test_pxCreate;
        -:  193:--  end read only
        -:  194:
        -:  195:end Math.Planes.Test_Data.Tests;
