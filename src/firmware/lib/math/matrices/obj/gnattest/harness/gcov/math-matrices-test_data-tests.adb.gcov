        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/matrices/obj/gnattest/tests/math-matrices-test_data-tests.adb
        -:    0:Programs:122
        -:    1:--  This package has been generated automatically by GNATtest.
        -:    2:--  You are allowed to add your code to the bodies of test routines.
        -:    3:--  Such changes will be kept during further regeneration of this file.
        -:    4:--  All code placed outside of test routine bodies will be lost. The
        -:    5:--  code intended to set up and tear down the test environment should be
        -:    6:--  placed into Math.Matrices.Test_Data.
        -:    7:
        -:    8:with AUnit.Assertions; use AUnit.Assertions;
        -:    9:
        -:   10:package body Math.Matrices.Test_Data.Tests is
        -:   11:
        -:   12:
        -:   13:--  begin read only
        -:   14:   procedure Test_pxCreate_From_Quaternion (Gnattest_T : in out Test);
        4:   15:   procedure Test_pxCreate_From_Quaternion_7a9b71 (Gnattest_T : in out Test) renames Test_pxCreate_From_Quaternion;
        -:   16:--  id:2.1/7a9b71c21c8b2562/pxCreate_From_Quaternion/1/0/
        4:   17:   procedure Test_pxCreate_From_Quaternion (Gnattest_T : in out Test) is
        -:   18:   --  math-matrices.ads:16:4:pxCreate_From_Quaternion
        -:   19:--  end read only
        -:   20:
        -:   21:      pragma Unreferenced (Gnattest_T);
        -:   22:      
        -:   23:      use Math.Vectors;
        -:   24:
        4:   25:      pxOriginalVector : Math.Vectors.pCVector;
        4:   26:      pxRotatedVectorWithMat : Math.Vectors.pCVector;
        4:   27:      pxRotatedVectorWithQuat : Math.Vectors.pCVector;
        -:   28:
        -:   29:      --pxRealRotMatrix : pCMatrix;
        4:   30:      pxQuatRotMatrix : pCMatrix;
        4:   31:      pxRotQuat : Math.Quaternions.pCQuaternion;
        -:   32:      fAngle : float;
        -:   33:      fSqrtAngle : float;
        -:   34:   begin
        -:   35:      
        4:   36:      pxOriginalVector := Math.Vectors.pxCreate(fX => 0.0,
        -:   37:                                                fY => 0.0,
        -:   38:                                                fZ => 1.0);
        -:   39:    
       64:   40:      for i in 1 .. 16
       64:   41:      loop
       64:   42:         fAngle := (float(i) * 22.5) - 180.0;
       64:   43:         pxRotatedVectorWithMat := Math.Vectors.pxCreate(fX => 0.0,
        -:   44:                                                fY => 0.0,
        -:   45:                                                         fZ => 1.0);
        -:   46:         
       64:   47:         fSqrtAngle := fAngle / Ada.Numerics.Elementary_Functions.Sqrt(2.0);
       64:   48:         for j in 1 .. 10000
   640000:   49:         loop
   640000:   50:            pxRotatedVectorWithMat := Math.Matrices.pxCreate_Rotation_Around_X_Axis(Math.Angles.TAngle(fSqrtAngle * 0.0001)) * pxRotatedVectorWithMat;
   640000:   51:            pxRotatedVectorWithMat := Math.Matrices.pxCreate_Rotation_Around_Y_Axis(Math.Angles.TAngle(fSqrtAngle * 0.0001)) * pxRotatedVectorWithMat;
        -:   52:         end loop;
        -:   53:         
       64:   54:         pxRotQuat := Math.Quaternions.pxCreate(pxAxisVector    => Math.Vectors.pxCreate(1.0,1.0,0.0),
        -:   55:                                                fAngleInDegrees => fAngle);
        -:   56:
       64:   57:         pxQuatRotMatrix := Math.Matrices.pxCreate_From_Quaternion(pxRotQuat);
        -:   58:         --pxRotatedVectorWithMat := pxRealRotMatrix * pxOriginalVector;
       64:   59:         pxRotatedVectorWithQuat := pxQuatRotMatrix * pxOriginalVector;
        -:   60:         
        -:   61:--           Ada.Text_IO.Put_Line("X: " & float'Image(pxRotatedVectorWithMat.fGet_X) & " -> " & float'Image(pxRotatedVectorWithQuat.fGet_X));
        -:   62:--           Ada.Text_IO.Put_Line("Y: " & float'Image(pxRotatedVectorWithMat.fGet_Y) & " -> " & float'Image(pxRotatedVectorWithQuat.fGet_Y));
        -:   63:--           Ada.Text_IO.Put_Line("Z: " & float'Image(pxRotatedVectorWithMat.fGet_Z) & " -> " & float'Image(pxRotatedVectorWithQuat.fGet_Z));
        -:   64:         
        -:   65:         
       64:   66:         AUnit.Assertions.Assert(Condition => abs(pxRotatedVectorWithMat.fGet_X - pxRotatedVectorWithQuat.fGet_X) < 0.01,
       64:   67:                                 Message   => "Matrices.pxCreate_From_Quaternion failed, X component in vector is wrong. Angle: " & float'Image(fAngle) & ". Value: " & float'Image(pxRotatedVectorWithQuat.fGet_X) & ". Expected: " & float'Image(pxRotatedVectorWithMat.fGet_X) & ".");
       64:   68:         AUnit.Assertions.Assert(Condition => abs(pxRotatedVectorWithMat.fGet_Y - pxRotatedVectorWithQuat.fGet_Y) < 0.01,
       64:   69:                                 Message   => "Matrices.pxCreate_From_Quaternion failed, Y component in vector is wrong. Angle: " & float'Image(fAngle) & ". Value: " & float'Image(pxRotatedVectorWithQuat.fGet_Y) & ". Expected: " & float'Image(pxRotatedVectorWithMat.fGet_Y) & ".");
       64:   70:         AUnit.Assertions.Assert(Condition => abs(pxRotatedVectorWithMat.fGet_Z - pxRotatedVectorWithQuat.fGet_Z) < 0.01,
       64:   71:                                 Message   => "Matrices.pxCreate_From_Quaternion failed, Z component in vector is wrong. Angle: " & float'Image(fAngle) & ". Value: " & float'Image(pxRotatedVectorWithQuat.fGet_Z) & ". Expected: " & float'Image(pxRotatedVectorWithMat.fGet_Z) & ".");
        -:   72:                           
        -:   73:      end loop;
        -:   74:      
        4:   75:      pxRotQuat := Math.Quaternions.pxCreate(fX => 0.5,
        -:   76:                                             fY => 0.0,
        -:   77:                                             fZ => 0.0,
        -:   78:                                             fW => 0.0);
        -:   79:      
        4:   80:      pxQuatRotMatrix := Math.Matrices.pxCreate_From_Quaternion(pxRotQuat);
    #####:   81:      AUnit.Assertions.Assert(Condition => False,
        -:   82:                              Message   => "Matrices.pxCreate_From_Quaternion failed, should have raised exception");
        -:   83:   exception
        4:   84:      when Numeric_Error =>
        -:   85:         null; -- Test passed
    =====:   86:      when E : others =>
    #####:   87:         AUnit.Assertions.Assert(Condition => False,
    =====:   88:                                 Message   =>"Matrices.pxCreate_From_Quaternion failed, wrong exception raised: " & Ada.Exceptions.Exception_Name (E) & ". Expected: NUMERIC_ERROR.");      
        -:   89:      
        -:   90:      
        -:   91:--  begin read only
        4:   92:   end Test_pxCreate_From_Quaternion;
        -:   93:--  end read only
        -:   94:
        -:   95:
        -:   96:--  begin read only
        -:   97:   procedure Test_pxCreate_Rotation_Around_X_Axis (Gnattest_T : in out Test);
        4:   98:   procedure Test_pxCreate_Rotation_Around_X_Axis_dc136b (Gnattest_T : in out Test) renames Test_pxCreate_Rotation_Around_X_Axis;
        -:   99:--  id:2.1/dc136b6fcd55b227/pxCreate_Rotation_Around_X_Axis/1/0/
        4:  100:   procedure Test_pxCreate_Rotation_Around_X_Axis (Gnattest_T : in out Test) is
        -:  101:   --  math-matrices.ads:17:4:pxCreate_Rotation_Around_X_Axis
        -:  102:--  end read only
        -:  103:
        -:  104:      pragma Unreferenced (Gnattest_T);
        -:  105:
        4:  106:      pxOriginalVector : Math.Vectors.pCVector;
        4:  107:      pxRotatedVector : Math.Vectors.pCVector;
        -:  108:
        4:  109:      pxRotMatrix : pCMatrix;
        -:  110:      fAngle : float;
        -:  111:      fNewAngle : float;
        -:  112:   begin
        -:  113:      
        4:  114:      pxOriginalVector := Math.Vectors.pxCreate(fX => 0.0,
        -:  115:                                                fY => 0.0,
        -:  116:                                                fZ => 1.0);
        -:  117:
        4:  118:      for i in 1 .. 360
     1440:  119:      loop
     1440:  120:         fAngle := float(i - 180);
     1440:  121:         pxRotMatrix := Math.Matrices.pxCreate_Rotation_Around_X_Axis(tfAngleInDegrees => Math.Angles.TAngle(fAngle));
     1440:  122:         pxRotatedVector := pxRotMatrix * pxOriginalVector;
     1440:  123:         fNewAngle := Math.Vectors.fAngle_Between_In_Radians(pxOriginalVector, pxRotatedVector);
     1440:  124:         fNewAngle := Math.Angles.fRadians_To_Degrees(fNewAngle);
        -:  125:
     1440:  126:         if fAngle /= 0.0 then
     1436:  127:            fNewAngle := abs(fNewAngle) * (fAngle/abs(fAngle));
        -:  128:         end if;
        -:  129:         
        -:  130:         
     1440:  131:         AUnit.Assertions.Assert(Condition => abs(fAngle - fNewAngle) < 0.001,
     1440:  132:                                 Message   => "CMatrix.pxCreate_Rotation_Around_X_Axis failed, wrong angle. Value: " & float'Image(fNewAngle) & ". Expected: " & float'Image(fAngle) & ".");
        -:  133:         
        -:  134:         
        -:  135:      end loop;
        -:  136:      
        -:  137:
        -:  138:--  begin read only
        4:  139:   end Test_pxCreate_Rotation_Around_X_Axis;
        -:  140:--  end read only
        -:  141:
        -:  142:
        -:  143:--  begin read only
        -:  144:   procedure Test_pxCreate_Rotation_Around_Y_Axis (Gnattest_T : in out Test);
        4:  145:   procedure Test_pxCreate_Rotation_Around_Y_Axis_1fc26a (Gnattest_T : in out Test) renames Test_pxCreate_Rotation_Around_Y_Axis;
        -:  146:--  id:2.1/1fc26a5b46dacfbe/pxCreate_Rotation_Around_Y_Axis/1/0/
        4:  147:   procedure Test_pxCreate_Rotation_Around_Y_Axis (Gnattest_T : in out Test) is
        -:  148:   --  math-matrices.ads:18:4:pxCreate_Rotation_Around_Y_Axis
        -:  149:--  end read only
        -:  150:
        -:  151:      pragma Unreferenced (Gnattest_T);
        -:  152:
        4:  153:      pxOriginalVector : Math.Vectors.pCVector;
        4:  154:      pxRotatedVector : Math.Vectors.pCVector;
        -:  155:
        4:  156:      pxRotMatrix : pCMatrix;
        -:  157:      fAngle : float;
        -:  158:      fNewAngle : float;
        -:  159:   begin
        -:  160:      
        4:  161:      pxOriginalVector := Math.Vectors.pxCreate(fX => 0.0,
        -:  162:                                                fY => 0.0,
        -:  163:                                                fZ => 1.0);
        -:  164:
        4:  165:      for i in 1 .. 360
     1440:  166:      loop
     1440:  167:         fAngle := float(i - 180);
     1440:  168:         pxRotMatrix := Math.Matrices.pxCreate_Rotation_Around_Y_Axis(tfAngleInDegrees => Math.Angles.TAngle(fAngle));
     1440:  169:         pxRotatedVector := pxRotMatrix * pxOriginalVector;
     1440:  170:         fNewAngle := Math.Vectors.fAngle_Between_In_Radians(pxOriginalVector, pxRotatedVector);
     1440:  171:         fNewAngle := Math.Angles.fRadians_To_Degrees(fNewAngle);
        -:  172:
     1440:  173:         if fAngle /= 0.0 then
     1436:  174:            fNewAngle := abs(fNewAngle) * (fAngle/abs(fAngle));
        -:  175:         end if;
        -:  176:         
        -:  177:         
     1440:  178:         AUnit.Assertions.Assert(Condition => abs(fAngle - fNewAngle) < 0.001,
     1440:  179:                                 Message   => "CMatrix.pxCreate_Rotation_Around_Y_Axis failed, wrong angle. Value: " & float'Image(fNewAngle) & ". Expected: " & float'Image(fAngle) & ".");
        -:  180:         
        -:  181:         
        -:  182:      end loop;
        -:  183:      
        -:  184:
        -:  185:--  begin read only
        4:  186:   end Test_pxCreate_Rotation_Around_Y_Axis;
        -:  187:--  end read only
        -:  188:
        -:  189:
        -:  190:--  begin read only
        -:  191:   procedure Test_pxCreate_Rotation_Around_Z_Axis (Gnattest_T : in out Test);
        4:  192:   procedure Test_pxCreate_Rotation_Around_Z_Axis_0d121c (Gnattest_T : in out Test) renames Test_pxCreate_Rotation_Around_Z_Axis;
        -:  193:--  id:2.1/0d121c8183192933/pxCreate_Rotation_Around_Z_Axis/1/0/
        4:  194:   procedure Test_pxCreate_Rotation_Around_Z_Axis (Gnattest_T : in out Test) is
        -:  195:   --  math-matrices.ads:19:4:pxCreate_Rotation_Around_Z_Axis
        -:  196:--  end read only
        -:  197:
        -:  198:      pragma Unreferenced (Gnattest_T);
        -:  199:
        4:  200:      pxOriginalVector : Math.Vectors.pCVector;
        4:  201:      pxRotatedVector : Math.Vectors.pCVector;
        -:  202:
        4:  203:      pxRotMatrix : pCMatrix;
        -:  204:      fAngle : float;
        -:  205:      fNewAngle : float;
        -:  206:   begin
        -:  207:      
        4:  208:      pxOriginalVector := Math.Vectors.pxCreate(fX => 0.0,
        -:  209:                                                fY => 1.0,
        -:  210:                                                fZ => 0.0);
        -:  211:
        4:  212:      for i in 1 .. 360
     1440:  213:      loop
     1440:  214:         fAngle := float(i - 180);
     1440:  215:         pxRotMatrix := Math.Matrices.pxCreate_Rotation_Around_Z_Axis(tfAngleInDegrees => Math.Angles.TAngle(fAngle));
     1440:  216:         pxRotatedVector := pxRotMatrix * pxOriginalVector;
     1440:  217:         fNewAngle := Math.Vectors.fAngle_Between_In_Radians(pxOriginalVector, pxRotatedVector);
     1440:  218:         fNewAngle := Math.Angles.fRadians_To_Degrees(fNewAngle);
        -:  219:
     1440:  220:         if fAngle /= 0.0 then
     1436:  221:            fNewAngle := abs(fNewAngle) * (fAngle/abs(fAngle));
        -:  222:         end if;
        -:  223:         
        -:  224:         
     1440:  225:         AUnit.Assertions.Assert(Condition => abs(fAngle - fNewAngle) < 0.001,
     1440:  226:                                 Message   => "CMatrix.pxCreate_Rotation_Around_Z_Axis failed, wrong angle. Value: " & float'Image(fNewAngle) & ". Expected: " & float'Image(fAngle) & ".");
        -:  227:         
        -:  228:         
        -:  229:      end loop;
        -:  230:
        -:  231:--  begin read only
        4:  232:   end Test_pxCreate_Rotation_Around_Z_Axis;
        -:  233:--  end read only
        -:  234:
        -:  235:
        -:  236:--  begin read only
        -:  237:   procedure Test_pxCreate_Identity (Gnattest_T : in out Test);
        4:  238:   procedure Test_pxCreate_Identity_4ca1dd (Gnattest_T : in out Test) renames Test_pxCreate_Identity;
        -:  239:--  id:2.1/4ca1ddd48ff74b85/pxCreate_Identity/1/0/
        4:  240:   procedure Test_pxCreate_Identity (Gnattest_T : in out Test) is
        -:  241:   --  math-matrices.ads:20:4:pxCreate_Identity
        -:  242:--  end read only
        -:  243:
        -:  244:      pragma Unreferenced (Gnattest_T);
        -:  245:
        -:  246:      tfMatrix : TMatrix;
        4:  247:      pxNewMatrix : pCMatrix;
        -:  248:   begin
        -:  249:
        4:  250:      tfMatrix := ((1.0,0.0,0.0),(0.0,1.0,0.0),(0.0,0.0,1.0));
        4:  251:      pxNewMatrix := Math.Matrices.pxCreate_Identity;
        -:  252:
        4:  253:      for i in 1 .. 3
       12:  254:      loop
       12:  255:         for j in 1 .. 3
       36:  256:         loop
       36:  257:            AUnit.Assertions.Assert(Condition => pxNewMatrix.tfMatrix(i,j) = tfMatrix(i,j),
       36:  258:                                    Message   => "CMatrix.pxCreate_Identity failed, wrong value in (" & integer'Image(i) & "," & integer'Image(j) & "). Value: " & float'Image(pxNewMatrix.tfMatrix(i,j)) & ". Expected: " & float'Image(tfMatrix(i,j)) & ".");
        -:  259:         end loop;
        -:  260:      end loop;
        -:  261:
        -:  262:--  begin read only
        4:  263:   end Test_pxCreate_Identity;
        -:  264:--  end read only
        -:  265:
        -:  266:
        -:  267:--  begin read only
        -:  268:   procedure Test_pxCreate (Gnattest_T : in out Test);
        4:  269:   procedure Test_pxCreate_23e020 (Gnattest_T : in out Test) renames Test_pxCreate;
        -:  270:--  id:2.1/23e0209614501591/pxCreate/1/0/
        4:  271:   procedure Test_pxCreate (Gnattest_T : in out Test) is
        -:  272:   --  math-matrices.ads:21:4:pxCreate
        -:  273:--  end read only
        -:  274:
        -:  275:      pragma Unreferenced (Gnattest_T);
        -:  276:
        -:  277:      use System;
        -:  278:      tfMatrix : TMatrix;
        4:  279:      pxNewMatrix : pCMatrix;
        -:  280:   begin
        -:  281:
        4:  282:      tfMatrix := ((1.0,2.0,3.0),(4.0,5.0,6.0),(7.0,8.0,9.0));
        4:  283:      pxNewMatrix := Math.Matrices.pxCreate(tfMatrix => tfMatrix);
        -:  284:
        4:  285:      AUnit.Assertions.Assert(Condition => tfMatrix'Address /= pxNewMatrix.tfMatrix'Address,
        -:  286:                              Message   => "CMatrix.pxCreate failed, shared address between original tfMatrix and the Matrix' tfMatrix.");
        -:  287:
        4:  288:      for i in 1 .. 3
       12:  289:      loop
       12:  290:         for j in 1 .. 3
       36:  291:         loop
       36:  292:            AUnit.Assertions.Assert(Condition => pxNewMatrix.tfMatrix(i,j) = tfMatrix(i,j),
       36:  293:                                    Message   => "CMatrix.pxCreate failed, wrong value in (" & integer'Image(i) & "," & integer'Image(j) & "). Value: " & float'Image(pxNewMatrix.tfMatrix(i,j)) & ". Expected: " & float'Image(tfMatrix(i,j)) & ".");
        -:  294:         end loop;
        -:  295:      end loop;
        -:  296:
        -:  297:--  begin read only
        4:  298:   end Test_pxCreate;
        -:  299:--  end read only
        -:  300:
        -:  301:
        -:  302:--  begin read only
        -:  303:   procedure Test_1_Multiply (Gnattest_T : in out Test);
        4:  304:   procedure Test_Multiply_519195 (Gnattest_T : in out Test) renames Test_1_Multiply;
        -:  305:--  id:2.1/519195d06a3006e3/Multiply/1/0/
        4:  306:   procedure Test_1_Multiply (Gnattest_T : in out Test) is
        -:  307:   --  math-matrices.ads:23:4:"*"
        -:  308:--  end read only
        -:  309:
        -:  310:      pragma Unreferenced (Gnattest_T);
        -:  311:
        4:  312:      pxLeftOperandMatrix : pCMatrix;
        4:  313:      pxRightOperandMatrix : pCMatrix;
        4:  314:      pxProductMatrix : pCMatrix;
        -:  315:      tfMatrix : TMatrix;
        -:  316:   begin
        -:  317:
        4:  318:      tfMatrix := ((1.0, 2.0, 3.0),
        -:  319:                   (4.0, 5.0, 6.0),
        -:  320:                   (7.0, 8.0, 9.0));
        4:  321:      pxLeftOperandMatrix := Math.Matrices.pxCreate(tfMatrix => tfMatrix);
        4:  322:      tfMatrix := ((3.0, 4.0, 5.0),
        -:  323:                   (6.0, 7.0, 8.0),
        -:  324:                   (3.0, 4.0, 5.0));
        4:  325:      pxRightOperandMatrix := Math.Matrices.pxCreate(tfMatrix => tfMatrix);
        4:  326:      pxProductMatrix := pxLeftOperandMatrix * pxRightOperandMatrix;
        -:  327:
        4:  328:      tfMatrix := ((24.0, 30.0, 36.0),
        -:  329:                   (60.0, 75.0, 90.0),
        -:  330:                   (96.0, 120.0, 144.0));
        -:  331:
        4:  332:      for i in 1 .. 3
       12:  333:      loop
       12:  334:         for j in 1 .. 3
       36:  335:         loop
       36:  336:            AUnit.Assertions.Assert(Condition => pxProductMatrix.tfMatrix(i,j) = tfMatrix(i,j),
       36:  337:                                    Message   => "CMatrix.*(binary matrix * matrix) failed, wrong value in (" & integer'Image(i) & "," & integer'Image(j) & "). Value: " & float'Image(pxProductMatrix.tfMatrix(i,j)) & ". Expected: " & float'Image(tfMatrix(i,j)) & ".");
        -:  338:         end loop;
        -:  339:      end loop;
        -:  340:
        -:  341:--  begin read only
        4:  342:   end Test_1_Multiply;
        -:  343:--  end read only
        -:  344:
        -:  345:
        -:  346:--  begin read only
        -:  347:   procedure Test_2_Multiply (Gnattest_T : in out Test);
        4:  348:   procedure Test_Multiply_89b399 (Gnattest_T : in out Test) renames Test_2_Multiply;
        -:  349:--  id:2.1/89b399b1e6416175/Multiply/0/0/
        4:  350:   procedure Test_2_Multiply (Gnattest_T : in out Test) is
        -:  351:   --  math-matrices.ads:24:4:"*"
        -:  352:--  end read only
        -:  353:
        -:  354:      pragma Unreferenced (Gnattest_T);
        -:  355:
        -:  356:       use Math.Vectors;
        -:  357:      
        4:  358:      pxLeftOperandMatrix : pCMatrix;
        4:  359:      pxRightOperandVector : Math.Vectors.pCVector;
        4:  360:      pxProductVector : Math.Vectors.pCVector;
        -:  361:      tfMatrix : TMatrix;
        -:  362:   begin
        -:  363:
        4:  364:      tfMatrix := ((1.0, 2.0, 3.0),
        -:  365:                   (4.0, 5.0, 6.0),
        -:  366:                   (7.0, 8.0, 9.0));
        4:  367:      pxLeftOperandMatrix := Math.Matrices.pxCreate(tfMatrix => tfMatrix);
        -:  368:
        4:  369:      pxRightOperandVector := Math.Vectors.pxCreate(fX => 2.0,
        -:  370:                                                    fY => -5.0,
        -:  371:                                                    fZ => 10.0);
        4:  372:      pxProductVector := pxLeftOperandMatrix * pxRightOperandVector;
        -:  373:
        -:  374:      
        4:  375:      pxRightOperandVector := Math.Vectors.pxCreate(fX => 22.0,
        -:  376:                                                    fY => 43.0,
        -:  377:                                                    fZ => 64.0);
        4:  378:      AUnit.Assertions.Assert(Condition => pxProductVector = pxRightOperandVector,
        -:  379:                                    Message   => "CMatrix.*(binary matrix * vector) failed.");
        -:  380:
        -:  381:
        -:  382:--  begin read only
        4:  383:   end Test_2_Multiply;
        -:  384:--  end read only
        -:  385:
        -:  386:
        -:  387:--  begin read only
        -:  388:   procedure Test_3_Multiply (Gnattest_T : in out Test);
        4:  389:   procedure Test_Multiply_a96879 (Gnattest_T : in out Test) renames Test_3_Multiply;
        -:  390:--  id:2.1/a96879e66708ce70/Multiply/0/0/
        4:  391:   procedure Test_3_Multiply (Gnattest_T : in out Test) is
        -:  392:   --  math-matrices.ads:25:4:"*"
        -:  393:--  end read only
        -:  394:
        -:  395:      pragma Unreferenced (Gnattest_T);
        -:  396:
        -:  397:      use Math.Vectors;
        4:  398:      pxLeftOperandMatrix : pCMatrix;
        4:  399:      pxRightOperandPlane : Math.Planes.pCPlane;
        -:  400:
        4:  401:      pxRotatedPlane : Math.Planes.pCPlane;
        4:  402:      pxExpectedNormal : Math.Vectors.pCVector;
        -:  403:      
        -:  404:   begin
        -:  405:
        4:  406:      pxLeftOperandMatrix := Math.Matrices.pxCreate_Rotation_Around_Z_Axis(Math.Angles.TAngle(90.0));
        -:  407:
        4:  408:      pxRightOperandPlane := Math.Planes.pxCreate(pxNormalVector      => Math.Vectors.pxCreate(0.0,1.0,0.0),
        -:  409:                                                  fDistanceFromOrigin => 0.0);
        -:  410:
        -:  411:
        4:  412:      pxRotatedPlane := pxLeftOperandMatrix * pxRightOperandPlane;
        -:  413:
        4:  414:      pxExpectedNormal := Math.Vectors.pxCreate(-1.0,0.0,0.0);
        -:  415:      
        4:  416:      AUnit.Assertions.Assert(Condition => pxExpectedNormal = pxRotatedPlane.pxGet_Normal_Vector,
        4:  417:                              Message   => "Matrices.*(binary matrix * plane) failed, wrong normal. Normal: " & float'Image(pxRotatedPlane.pxGet_Normal_Vector.fGet_X) & ", " & float'Image(pxRotatedPlane.pxGet_Normal_Vector.fGet_Y) & ", " & float'Image(pxRotatedPlane.pxGet_Normal_Vector.fGet_Z) & ". Angle: " & float'Image(Math.Angles.fRadians_To_Degrees(Math.Vectors.fAngle_Between_In_Radians(pxRightOperandPlane.pxGet_Normal_Vector, pxRotatedPlane.pxGet_Normal_Vector))));
        -:  418:
        -:  419:
        -:  420:--  begin read only
        4:  421:   end Test_3_Multiply;
        -:  422:--  end read only
        -:  423:
        -:  424:
        -:  425:--  begin read only
        -:  426:   procedure Test_Equal (Gnattest_T : in out Test);
        4:  427:   procedure Test_Equal_1c1727 (Gnattest_T : in out Test) renames Test_Equal;
        -:  428:--  id:2.1/1c1727b7e69435f3/Equal/1/0/
        4:  429:   procedure Test_Equal (Gnattest_T : in out Test) is
        -:  430:   --  math-matrices.ads:26:4:"="
        -:  431:--  end read only
        -:  432:
        -:  433:      pragma Unreferenced (Gnattest_T);
        -:  434:
        4:  435:      pxRotMatrix1 : pCMatrix;
        4:  436:      pxRotMatrix2 : pCMatrix;
        -:  437:      tfXRotAngle : Math.Angles.TAngle;
        -:  438:      tfYRotAngle : Math.Angles.TAngle;
        -:  439:      tfZRotAngle : Math.Angles.TAngle;
        -:  440:   begin
        -:  441:
        4:  442:      for iXRot in 1 .. 10
       40:  443:      loop
       40:  444:         tfXRotAngle := Math.Angles.TAngle(float(36 * iXRot - 180) );
      400:  445:         for iYRot in 1 .. 10
      400:  446:         loop
      400:  447:            tfYRotAngle := Math.Angles.TAngle(float(36 * iYRot - 180));
     4000:  448:            for iZRot in 1 .. 10
     4000:  449:            loop
     4000:  450:               tfZRotAngle := Math.Angles.TAngle(float(36 * iZRot - 180));
     4000:  451:               pxRotMatrix1 := pxCreate_Rotation_Around_Z_Axis(tfZRotAngle) *
     4000:  452:                 pxCreate_Rotation_Around_Y_Axis(tfYRotAngle) *
     4000:  453:                 pxCreate_Rotation_Around_X_Axis(tfXRotAngle);
     4000:  454:               pxRotMatrix2 := pxCreate_Rotation_Around_Z_Axis(tfZRotAngle) *
     4000:  455:                 pxCreate_Rotation_Around_Y_Axis(tfYRotAngle) *
     4000:  456:                 pxCreate_Rotation_Around_X_Axis(tfXRotAngle);
        -:  457:
        -:  458:
     4000:  459:                  AUnit.Assertions.Assert(Condition => pxRotMatrix1 = pxRotMatrix2,
        -:  460:                                          Message => "Matrices.=(binary equal) failed, not equal");
        -:  461:               
        -:  462:
        -:  463:
        -:  464:            end loop;
        -:  465:
        -:  466:         end loop;         
        -:  467:      end loop;
        -:  468:      
        4:  469:      tfXRotAngle := Math.Angles.TAngle(45.0);
        4:  470:      tfYRotAngle := Math.Angles.TAngle(-32.4);
        4:  471:      tfZRotAngle := Math.Angles.TAngle(94.0);
        -:  472:      
        4:  473:      pxRotMatrix1 := pxCreate_Rotation_Around_Z_Axis(tfZRotAngle) *
        4:  474:        pxCreate_Rotation_Around_Y_Axis(tfYRotAngle) *
        4:  475:        pxCreate_Rotation_Around_X_Axis(tfXRotAngle);
        4:  476:      AUnit.Assertions.Assert(Condition => pxRotMatrix1 /= pxCreate_Identity,
        4:  477:                              Message => "Matrices.=(binary equal) failed, equal. Values: " & float'Image(float(tfXRotAngle)) & float'Image(float(tfYRotAngle)) & float'Image(float(tfZRotAngle)));               
        -:  478:
        -:  479:
        -:  480:--  begin read only
        4:  481:   end Test_Equal;
        -:  482:--  end read only
        -:  483:
        -:  484:
        -:  485:--  begin read only
        -:  486:   procedure Test_Swap_Values_In_Extended_Matrix (Gnattest_T : in out Test);
        4:  487:   procedure Test_Swap_Values_In_Extended_Matrix_d790ab (Gnattest_T : in out Test) renames Test_Swap_Values_In_Extended_Matrix;
        -:  488:--  id:2.1/d790ab373c6b2b67/Swap_Values_In_Extended_Matrix/1/0/
        4:  489:   procedure Test_Swap_Values_In_Extended_Matrix (Gnattest_T : in out Test) is
        -:  490:   --  math-matrices.ads:47:4:Swap_Values_In_Extended_Matrix
        -:  491:--  end read only
        -:  492:
        -:  493:      pragma Unreferenced (Gnattest_T);
        -:  494:
        -:  495:      fValueOld1 : float;
        -:  496:      fValueOld2 : float;
        -:  497:      fValueNew1 : float;
        -:  498:      fValueNew2 : float;
        -:  499:      
        -:  500:   begin
        -:  501:
        4:  502:      for i in -100 .. 100
      804:  503:      loop
      804:  504:         fValueOld1 := float(i);
      804:  505:         fValueOld2 := float(i)*(-1.0);
      804:  506:         fValueNew1 := fValueOld1;
      804:  507:         fValueNew2 := fValueOld2;
      804:  508:         Math.Matrices.Swap_Values_In_Extended_Matrix(fValueNew1, fValueNew2);
      804:  509:         AUnit.Assertions.Assert(Condition => fValueOld1 = fValueNew2,
        -:  510:                                 Message   => "Matrices.Swap_Values_In_Extended_Matrix failed, first check failed.");
      804:  511:         AUnit.Assertions.Assert(Condition => fValueOld2 = fValueNew1,
        -:  512:                                 Message   => "Matrices.Swap_Values_In_Extended_Matrix failed, second check failed.");
        -:  513:         
        -:  514:      end loop;
        -:  515:      
        -:  516:
        -:  517:--  begin read only
        4:  518:   end Test_Swap_Values_In_Extended_Matrix;
        -:  519:--  end read only
        -:  520:
        -:  521:
        -:  522:--  begin read only
        -:  523:   procedure Test_Swap_Rows_In_Extended_Matrix (Gnattest_T : in out Test);
        4:  524:   procedure Test_Swap_Rows_In_Extended_Matrix_e8fd17 (Gnattest_T : in out Test) renames Test_Swap_Rows_In_Extended_Matrix;
        -:  525:--  id:2.1/e8fd17c37874e11a/Swap_Rows_In_Extended_Matrix/1/0/
        4:  526:   procedure Test_Swap_Rows_In_Extended_Matrix (Gnattest_T : in out Test) is
        -:  527:   --  math-matrices.ads:48:4:Swap_Rows_In_Extended_Matrix
        -:  528:--  end read only
        -:  529:
        -:  530:      pragma Unreferenced (Gnattest_T);
        -:  531:
        -:  532:      tfExtendedMatrixOld : TExtendedMatrix;
        -:  533:      tfExtendedMatrixNew : TExtendedMatrix;
        -:  534:   begin
        -:  535:      
        4:  536:      tfExtendedMatrixOld := ((1.0,2.0,3.0,4.0,5.0,6.0),
        -:  537:                               (7.0,8.0,9.0,10.0,11.0,12.0),
        -:  538:                              (13.0,14.0,15.0,16.0,17.0,18.0));
        4:  539:      for i in 1 .. 3
       12:  540:      loop
       12:  541:         for j in 1 .. 3
       36:  542:         loop
       36:  543:            tfExtendedMatrixNew := ((1.0,2.0,3.0,4.0,5.0,6.0),
        -:  544:                                    (7.0,8.0,9.0,10.0,11.0,12.0),
        -:  545:                                    (13.0,14.0,15.0,16.0,17.0,18.0));
       36:  546:            Math.Matrices.Swap_Rows_In_Extended_Matrix(tfExtendedMatrix => tfExtendedMatrixNew,
        -:  547:                                                       iRow1            => i,
        -:  548:                                                       iRow2            => j);
       36:  549:            for a in 1 .. 6
      216:  550:            loop
      216:  551:               AUnit.Assertions.Assert(Condition => tfExtendedMatrixOld(i,a) = tfExtendedMatrixNew(j,a),
      216:  552:                                       Message   => "Matrices.Swap_Rows_In_Extended_Matrix failed. Rows swapped: " & integer'Image(i) & " <-> " & integer'Image(j) & ". Value: " & float'Image(tfExtendedMatrixNew(j,a)) & ". Expected: " & float'Image(tfExtendedMatrixOld(i,a)) & ".");
        -:  553:               
        -:  554:            end loop;
        -:  555:         end loop;
        -:  556:      end loop;
        -:  557:      
        -:  558:
        -:  559:
        -:  560:--  begin read only
        4:  561:   end Test_Swap_Rows_In_Extended_Matrix;
        -:  562:--  end read only
        -:  563:
        -:  564:
        -:  565:--  begin read only
        -:  566:   procedure Test_Scale_Row_In_Extended_Matrix (Gnattest_T : in out Test);
        4:  567:   procedure Test_Scale_Row_In_Extended_Matrix_51dfbc (Gnattest_T : in out Test) renames Test_Scale_Row_In_Extended_Matrix;
        -:  568:--  id:2.1/51dfbc1174bc677d/Scale_Row_In_Extended_Matrix/1/0/
        4:  569:   procedure Test_Scale_Row_In_Extended_Matrix (Gnattest_T : in out Test) is
        -:  570:   --  math-matrices.ads:49:4:Scale_Row_In_Extended_Matrix
        -:  571:--  end read only
        -:  572:
        -:  573:      pragma Unreferenced (Gnattest_T);
        -:  574:
        -:  575:      tfExtendedMatrix : TExtendedMatrix;
        -:  576:      tfScaledMatrix : TExtendedMatrix;
        -:  577:   begin
        4:  578:      tfExtendedMatrix := ((3.0,9.0,12.0,27.0,30.0,6.0),
        -:  579:                          (0.0,2.0,4.0,8.0,6.0,20.0),
        -:  580:                         (0.0,0.0,15.0,30.0,60.0,150.0));
        4:  581:      tfScaledMatrix := ((1.0,3.0,4.0,9.0,10.0,2.0),
        -:  582:                          (0.0,1.0,2.0,4.0,3.0,10.0),
        -:  583:                         (0.0,0.0,1.0,2.0,4.0,10.0));
        -:  584:      
        -:  585:
        -:  586:      
        4:  587:      for iY in 1 .. 3
       12:  588:      loop
        -:  589:      
       12:  590:         Math.Matrices.Scale_Row_In_Extended_Matrix(tfExtendedMatrix => tfExtendedMatrix,
        -:  591:                                                    iStartingColumn   => iY);
        -:  592:
       12:  593:         for iX in 1 .. 6
       72:  594:         loop
       72:  595:            AUnit.Assertions.Assert(Condition => tfExtendedMatrix(iY,iX) = tfScaledMatrix(iY,iX),
       72:  596:                                    Message   => "Matrices.Scale_Row_In_Extended_Matrix failed, wrong value at (" & integer'Image(iY) & "," & integer'Image(iX) & "). Value: " & float'Image(tfExtendedMatrix(iY,iX)) & ". Expected: " & float'Image(tfScaledMatrix(iY,iX)) & ".");
        -:  597:         end loop;        
        -:  598:      end loop;
        -:  599:      
        -:  600:      
        -:  601:
        -:  602:--  begin read only
        4:  603:   end Test_Scale_Row_In_Extended_Matrix;
        -:  604:--  end read only
        -:  605:
        -:  606:
        -:  607:--  begin read only
        -:  608:   procedure Test_Remove_Component_In_Following_Rows (Gnattest_T : in out Test);
        4:  609:   procedure Test_Remove_Component_In_Following_Rows_6495d3 (Gnattest_T : in out Test) renames Test_Remove_Component_In_Following_Rows;
        -:  610:--  id:2.1/6495d3336c05d94a/Remove_Component_In_Following_Rows/1/0/
        4:  611:   procedure Test_Remove_Component_In_Following_Rows (Gnattest_T : in out Test) is
        -:  612:   --  math-matrices.ads:50:4:Remove_Component_In_Following_Rows
        -:  613:--  end read only
        -:  614:
        -:  615:      pragma Unreferenced (Gnattest_T);
        -:  616:
        -:  617:      tfExtendedMatrix : TExtendedMatrix;
        -:  618:      tfScaledMatrix : TExtendedMatrix;
        -:  619:   begin
        4:  620:      tfExtendedMatrix := ((1.0,9.0,12.0,27.0,30.0,6.0),
        -:  621:                          (6.0,2.0,4.0,8.0,6.0,20.0),
        -:  622:                         (9.0,2.0,15.0,30.0,60.0,150.0));
        4:  623:      tfScaledMatrix := ((1.0,9.0,12.0,27.0,30.0,6.0),
        -:  624:                          (0.0,-52.0,-68.0,-154.0,-174.0,-16.0),
        -:  625:                         (0.0,-79.0,-93.0,-213.0,-210.0,96.0));
        -:  626:      
        -:  627:--        tfExtendedMatrix := ((3.0,9.0,12.0,27.0,30.0,6.0),
        -:  628:--                            (6.0,2.0,4.0,8.0,6.0,20.0),
        -:  629:--                           (9.0,2.0,15.0,30.0,60.0,150.0));
        -:  630:--        tfScaledMatrix := ((3.0,9.0,12.0,27.0,30.0,6.0),
        -:  631:--                            (0.0,-1.0,0.0,-1.0,-4.0,18.0),
        -:  632:--                           (0.0,-25.0,-21.0,-51.0,-84.0,2.0));
        -:  633:--        
        -:  634:
        -:  635:
        -:  636:      
        4:  637:      Math.Matrices.Remove_Component_In_Following_Rows(tfExtendedMatrix => tfExtendedMatrix,
        -:  638:                                                       iRow             => 1);
        -:  639:
        4:  640:      for iY in 1 .. 3
       12:  641:      loop
       12:  642:         for iX in 1 .. 6
       72:  643:         loop
       72:  644:            AUnit.Assertions.Assert(Condition => tfExtendedMatrix(iY,iX) = tfScaledMatrix(iY,iX),
       72:  645:                                    Message   => "Matrices.Remove_Component_In_Following_Rows failed, wrong value at (" & integer'Image(iY) & "," & integer'Image(iX) & "). Value: " & float'Image(tfExtendedMatrix(iY,iX)) & ". Expected: " & float'Image(tfScaledMatrix(iY,iX)) & ".");
        -:  646:         end loop;        
        -:  647:      end loop;
        -:  648:      
        -:  649:
        -:  650:--  begin read only
        4:  651:   end Test_Remove_Component_In_Following_Rows;
        -:  652:--  end read only
        -:  653:
        -:  654:
        -:  655:--  begin read only
        -:  656:   procedure Test_Remove_Component_In_Leading_Rows (Gnattest_T : in out Test);
        4:  657:   procedure Test_Remove_Component_In_Leading_Rows_4f91f1 (Gnattest_T : in out Test) renames Test_Remove_Component_In_Leading_Rows;
        -:  658:--  id:2.1/4f91f1bfc85381f1/Remove_Component_In_Leading_Rows/1/0/
        4:  659:   procedure Test_Remove_Component_In_Leading_Rows (Gnattest_T : in out Test) is
        -:  660:   --  math-matrices.ads:51:4:Remove_Component_In_Leading_Rows
        -:  661:--  end read only
        -:  662:
        -:  663:      pragma Unreferenced (Gnattest_T);
        -:  664:
        -:  665:
        -:  666:      tfExtendedMatrix : TExtendedMatrix;
        -:  667:      tfScaledMatrix : TExtendedMatrix;
        -:  668:   begin
        4:  669:      tfExtendedMatrix := ((1.0,9.0,12.0,27.0,30.0,6.0),
        -:  670:                          (0.0,1.0,4.0,2.0,6.0,2.0),
        -:  671:                         (0.0,-79.0,-93.0,-213.0,-210.0,96.0));
        4:  672:      tfScaledMatrix :=         ((1.0,0.0,-24.0,9.0,-24.0,-12.0),
        -:  673:                          (0.0,1.0,4.0,2.0,6.0,2.0),
        -:  674:                         (0.0,-79.0,-93.0,-213.0,-210.0,96.0));
        -:  675:
        -:  676:      
        -:  677:--        tfExtendedMatrix := ((3.0,9.0,12.0,27.0,30.0,6.0),
        -:  678:--                            (6.0,2.0,4.0,8.0,6.0,20.0),
        -:  679:--                           (9.0,2.0,15.0,30.0,60.0,150.0));
        -:  680:--        tfScaledMatrix := ((3.0,9.0,12.0,27.0,30.0,6.0),
        -:  681:--                            (0.0,-1.0,0.0,-1.0,-4.0,18.0),
        -:  682:--                           (0.0,-25.0,-21.0,-51.0,-84.0,2.0));
        -:  683:--        
        -:  684:
        -:  685:
        -:  686:      
        4:  687:      Math.Matrices.Remove_Component_In_Leading_Rows(tfExtendedMatrix => tfExtendedMatrix,
        -:  688:                                                     iRow             => 2);
        -:  689:
        4:  690:      for iY in 1 .. 3
       12:  691:      loop
       12:  692:         for iX in 1 .. 6
       72:  693:         loop
       72:  694:            AUnit.Assertions.Assert(Condition => tfExtendedMatrix(iY,iX) = tfScaledMatrix(iY,iX),
       72:  695:                                    Message   => "Matrices.Remove_Component_In_Leading_Rows failed, wrong value at (" & integer'Image(iY) & "," & integer'Image(iX) & "). Value: " & float'Image(tfExtendedMatrix(iY,iX)) & ". Expected: " & float'Image(tfScaledMatrix(iY,iX)) & ".");
        -:  696:         end loop;        
        -:  697:      end loop;
        -:  698:      
        -:  699:
        -:  700:--  begin read only
        4:  701:   end Test_Remove_Component_In_Leading_Rows;
        -:  702:--  end read only
        -:  703:
        -:  704:
        -:  705:--  begin read only
        -:  706:   procedure Test_Find_Row_With_Highest_Component (Gnattest_T : in out Test);
        4:  707:   procedure Test_Find_Row_With_Highest_Component_203fad (Gnattest_T : in out Test) renames Test_Find_Row_With_Highest_Component;
        -:  708:--  id:2.1/203fad08cc0aa40d/Find_Row_With_Highest_Component/1/0/
        4:  709:   procedure Test_Find_Row_With_Highest_Component (Gnattest_T : in out Test) is
        -:  710:   --  math-matrices.ads:52:4:Find_Row_With_Highest_Component
        -:  711:--  end read only
        -:  712:
        -:  713:      pragma Unreferenced (Gnattest_T);
        -:  714:
        -:  715:      tfExtendedMatrix : TExtendedMatrix;
        -:  716:   begin
        4:  717:      tfExtendedMatrix := ((1.0,9.0,12.0,27.0,30.0,6.0),
        -:  718:                          (18.0,1.0,4.0,2.0,60.0,2.0),
        -:  719:                           (9.0,-79.0,1.0,4.0,10.0,96.0));
        -:  720:      
        4:  721:      AUnit.Assertions.Assert(Condition => Find_Row_With_Highest_Component(tfExtendedMatrix, 1) = 2,
        -:  722:                              Message   => "Matrices.Find_Row_With_Highest_Component failed, wrong value for column 1.");
        4:  723:      AUnit.Assertions.Assert(Condition => Find_Row_With_Highest_Component(tfExtendedMatrix, 2) = 3,
        -:  724:                              Message   => "Matrices.Find_Row_With_Highest_Component failed, wrong value for column 2.");
        4:  725:      AUnit.Assertions.Assert(Condition => Find_Row_With_Highest_Component(tfExtendedMatrix, 3) = 3,
        -:  726:                              Message   => "Matrices.Find_Row_With_Highest_Component failed, wrong value for column 3.");
        -:  727:
        -:  728:
        -:  729:--  begin read only
        4:  730:   end Test_Find_Row_With_Highest_Component;
        -:  731:--  end read only
        -:  732:
        -:  733:
        -:  734:--  begin read only
        -:  735:   procedure Test_Perform_Gauss_Jordan_Elimination_On (Gnattest_T : in out Test);
        4:  736:   procedure Test_Perform_Gauss_Jordan_Elimination_On_00378a (Gnattest_T : in out Test) renames Test_Perform_Gauss_Jordan_Elimination_On;
        -:  737:--  id:2.1/00378a185cddf76c/Perform_Gauss_Jordan_Elimination_On/1/0/
        4:  738:   procedure Test_Perform_Gauss_Jordan_Elimination_On (Gnattest_T : in out Test) is
        -:  739:   --  math-matrices.ads:53:4:Perform_Gauss_Jordan_Elimination_On
        -:  740:--  end read only
        -:  741:
        -:  742:      pragma Unreferenced (Gnattest_T);
        -:  743:
        4:  744:      pxOriginalMatrix : pCMatrix;
        4:  745:      pxInverseMatrix : pCMatrix;
        4:  746:      pxIdentityMatrix : pCMatrix;
        -:  747:      tfExtendedMatrix : TExtendedMatrix;
        -:  748:      tfMatrix : TMatrix;
        -:  749:      tfXRotAngle : Math.Angles.TAngle;
        -:  750:      tfYRotAngle : Math.Angles.TAngle;
        -:  751:      tfZRotAngle : Math.Angles.TAngle;
        -:  752:   begin
        -:  753:
        4:  754:      pxIdentityMatrix := pxCreate_Identity;
       40:  755:      for iXRot in 1 .. 10
       40:  756:      loop
       40:  757:         tfXRotAngle := Math.Angles.TAngle(float(36 * iXRot - 180) );
      400:  758:         for iYRot in 1 .. 10
      400:  759:         loop
      400:  760:            tfYRotAngle := Math.Angles.TAngle(float(36 * iYRot - 180));
     4000:  761:            for iZRot in 1 .. 10
     4000:  762:            loop
     4000:  763:               tfZRotAngle := Math.Angles.TAngle(float(36 * iZRot - 180));
     4000:  764:               pxOriginalMatrix := pxCreate_Rotation_Around_Z_Axis(tfZRotAngle) *
     4000:  765:                 pxCreate_Rotation_Around_Y_Axis(tfYRotAngle) *
     4000:  766:                 pxCreate_Rotation_Around_X_Axis(tfXRotAngle);
        -:  767:
     4000:  768:               if abs(pxOriginalMatrix.fGet_Determinant) = 0.0 then
        -:  769:                  -- raise expection
        -:  770:                  null;
        -:  771:               else
        -:  772:                  
     4000:  773:                  tfExtendedMatrix := tfCreate_Extended_Matrix_From(pxOriginalMatrix.tfMatrix);
     4000:  774:                  Perform_Gauss_Jordan_Elimination_On(tfExtendedMatrix);
     4000:  775:                  pxInverseMatrix := Math.Matrices.pxCreate(tfGet_Inverse_Part_From(tfExtendedMatrix));
        -:  776:
     4000:  777:                  AUnit.Assertions.Assert(Condition => pxOriginalMatrix * pxInverseMatrix = pxIdentityMatrix,
     4000:  778:                                          Message => "Matrices.Perform_Gauss_Jordan_Elimination_On failed, M * M-1 != I. Values: " & float'Image(float(tfXRotAngle)) & float'Image(float(tfYRotAngle)) & float'Image(float(tfZRotAngle)));
     4000:  779:                  AUnit.Assertions.Assert(Condition => pxInverseMatrix * pxOriginalMatrix = pxIdentityMatrix,
     4000:  780:                                          Message => "Matrices.Perform_Gauss_Jordan_Elimination_On failed, M-1 * M != I. Values: " & float'Image(float(tfXRotAngle)) & float'Image(float(tfYRotAngle)) & float'Image(float(tfZRotAngle)));
        -:  781:               end if;
        -:  782:
        -:  783:            end loop;
        -:  784:
        -:  785:         end loop;
        -:  786:      end loop;
        -:  787:      
        4:  788:      tfMatrix := ((5.0,5.0,5.0),
        -:  789:                   (3.0,3.0,3.0),
        -:  790:                   (0.0,5.0,2.0));
        -:  791:      
        4:  792:      tfExtendedMatrix := tfCreate_Extended_Matrix_From(tfMatrix);
        4:  793:      Perform_Gauss_Jordan_Elimination_On(tfExtendedMatrix);
    #####:  794:      AUnit.Assertions.Assert(Condition => False,
        -:  795:                              Message   => "Matrices.Perform_Gauss_Jordan_Elimination_On failed, should have raised exception");
        -:  796:   exception
        4:  797:      when Numeric_Error =>
        -:  798:         null; -- Test passed
    =====:  799:      when E : others =>
    #####:  800:         AUnit.Assertions.Assert(Condition => False,
    =====:  801:                                 Message   =>"Matrices.Perform_Gauss_Jordan_Elimination_On failed, wrong exception raised: " & Ada.Exceptions.Exception_Name (E) & ". Expected: NUMERIC_ERROR.");      
        -:  802:
        -:  803:--  begin read only
        4:  804:   end Test_Perform_Gauss_Jordan_Elimination_On;
        -:  805:--  end read only
        -:  806:
        -:  807:
        -:  808:--  begin read only
        -:  809:   procedure Test_tfCreate_Extended_Matrix_From (Gnattest_T : in out Test);
        4:  810:   procedure Test_tfCreate_Extended_Matrix_From_d7fdf5 (Gnattest_T : in out Test) renames Test_tfCreate_Extended_Matrix_From;
        -:  811:--  id:2.1/d7fdf56c22324800/tfCreate_Extended_Matrix_From/1/0/
        4:  812:   procedure Test_tfCreate_Extended_Matrix_From (Gnattest_T : in out Test) is
        -:  813:   --  math-matrices.ads:54:4:tfCreate_Extended_Matrix_From
        -:  814:--  end read only
        -:  815:
        -:  816:      pragma Unreferenced (Gnattest_T);
        -:  817:
        4:  818:      pxMatrix : pCMatrix;
        4:  819:      pxIdentity : pCMatrix;
        -:  820:      pxExtendedMatrix : TExtendedMatrix;
        -:  821:      fXAngle : float;
        -:  822:      fYAngle : float;
        -:  823:      fZAngle : float;
        -:  824:   begin
        4:  825:      pxIdentity := pxCreate_Identity;
        -:  826:      
        4:  827:      for iX in 1 .. 4       
       16:  828:      loop
       16:  829:         fXAngle := (360.0 / float(iX)) - 180.0;
       16:  830:         for iY in 1 .. 4
       64:  831:         loop
       64:  832:            fYAngle := (360.0 / float(iX)) - 180.0;
       64:  833:            for iZ in 1 .. 4
      256:  834:            loop
      256:  835:               fZAngle := (360.0 / float(iX)) - 180.0;               
      256:  836:               pxMatrix := pxCreate_Rotation_Around_Z_Axis(Math.Angles.TAngle(fZAngle)) * 
      256:  837:                 pxCreate_Rotation_Around_Y_Axis(Math.Angles.TAngle(fYAngle)) *
      256:  838:                 pxCreate_Rotation_Around_X_Axis(Math.Angles.TAngle(fXAngle));
      256:  839:               pxExtendedMatrix := tfCreate_Extended_Matrix_From(pxMatrix.tfMatrix);
      256:  840:               for i in 1 .. 3
      768:  841:               loop
      768:  842:                  for j in 1 .. 3
     2304:  843:                  loop
     2304:  844:                     AUnit.Assertions.Assert(Condition => pxExtendedMatrix(i,j) = pxMatrix.tfMatrix(i,j),
     2304:  845:                                             Message   => "Matrices.tfCreate_Extended_Matrix_From failed, wrong value for (" & integer'Image(i) & "," & integer'Image(j) & "). Value: " & float'Image(pxExtendedMatrix(i,j)) & ". Expected: " & float'Image(pxMatrix.tfMatrix(i,j)) & ".");
     2304:  846:                     AUnit.Assertions.Assert(Condition => pxExtendedMatrix(i,j+3) = pxIdentity.tfMatrix(i,j),
     2304:  847:                                             Message   => "Matrices.tfCreate_Extended_Matrix_From failed, wrong value for (" & integer'Image(i) & "," & integer'Image(j+3) & "). Value: " & float'Image(pxExtendedMatrix(i,j+3)) & ". Expected: " & float'Image(pxIdentity.tfMatrix(i,j)) & ".");
        -:  848:                     
        -:  849:                  end loop;
        -:  850:               end loop;
        -:  851:               
        -:  852:            end loop;
        -:  853:            
        -:  854:         end loop;
        -:  855:         
        -:  856:      end loop;
        -:  857:
        -:  858:--  begin read only
        4:  859:   end Test_tfCreate_Extended_Matrix_From;
        -:  860:--  end read only
        -:  861:
        -:  862:
        -:  863:--  begin read only
        -:  864:   procedure Test_tfGet_Inverse_Part_From (Gnattest_T : in out Test);
        4:  865:   procedure Test_tfGet_Inverse_Part_From_e434a4 (Gnattest_T : in out Test) renames Test_tfGet_Inverse_Part_From;
        -:  866:--  id:2.1/e434a4d0aac93f30/tfGet_Inverse_Part_From/1/0/
        4:  867:   procedure Test_tfGet_Inverse_Part_From (Gnattest_T : in out Test) is
        -:  868:   --  math-matrices.ads:55:4:tfGet_Inverse_Part_From
        -:  869:--  end read only
        -:  870:
        -:  871:      pragma Unreferenced (Gnattest_T);
        -:  872:
        4:  873:      pxMatrix : pCMatrix;
        4:  874:      pxIdentity : pCMatrix;
        -:  875:      pxExtendedMatrix : TExtendedMatrix;
        -:  876:      tfIdentityPart : TMatrix;
        -:  877:      fXAngle : float;
        -:  878:      fYAngle : float;
        -:  879:      fZAngle : float;
        -:  880:   begin
        4:  881:      pxIdentity := pxCreate_Identity;
        -:  882:      
        4:  883:      for iX in 1 .. 4       
       16:  884:      loop
       16:  885:         fXAngle := (360.0 / float(iX)) - 180.0;
       16:  886:         for iY in 1 .. 4
       64:  887:         loop
       64:  888:            fYAngle := (360.0 / float(iX)) - 180.0;
       64:  889:            for iZ in 1 .. 4
      256:  890:            loop
      256:  891:               fZAngle := (360.0 / float(iX)) - 180.0;               
      256:  892:               pxMatrix := pxCreate_Rotation_Around_Z_Axis(Math.Angles.TAngle(fZAngle)) * 
      256:  893:                 pxCreate_Rotation_Around_Y_Axis(Math.Angles.TAngle(fYAngle)) *
      256:  894:                 pxCreate_Rotation_Around_X_Axis(Math.Angles.TAngle(fXAngle));
      256:  895:               pxExtendedMatrix := tfCreate_Extended_Matrix_From(pxMatrix.tfMatrix);
      256:  896:               tfIdentityPart := Math.Matrices.tfGet_Inverse_Part_From(pxExtendedMatrix);
      256:  897:               for i in 1 .. 3
      768:  898:               loop
      768:  899:                  for j in 1 .. 3
     2304:  900:                  loop
     2304:  901:                     AUnit.Assertions.Assert(Condition => tfIdentityPart(i,j) = pxIdentity.tfMatrix(i,j),
     2304:  902:                                             Message   => "Matrices.tfGet_Inverse_Part_From failed, wrong value for (" & integer'Image(i) & "," & integer'Image(j) & "). Value: " & float'Image(tfIdentityPart(i,j)) & ". Expected: " & float'Image(pxIdentity.tfMatrix(i,j)) & ".");
        -:  903:                     
        -:  904:                  end loop;
        -:  905:               end loop;
        -:  906:               
        -:  907:            end loop;
        -:  908:            
        -:  909:         end loop;
        -:  910:         
        -:  911:      end loop;
        -:  912:--  begin read only
        4:  913:   end Test_tfGet_Inverse_Part_From;
        -:  914:--  end read only
        -:  915:
        -:  916:
        -:  917:--  begin read only
        -:  918:   procedure Test_bMatrix_Has_No_Inverse (Gnattest_T : in out Test);
        4:  919:   procedure Test_bMatrix_Has_No_Inverse_8de23e (Gnattest_T : in out Test) renames Test_bMatrix_Has_No_Inverse;
        -:  920:--  id:2.1/8de23e19802d9aa9/bMatrix_Has_No_Inverse/1/0/
        4:  921:   procedure Test_bMatrix_Has_No_Inverse (Gnattest_T : in out Test) is
        -:  922:   --  math-matrices.ads:56:4:bMatrix_Has_No_Inverse
        -:  923:--  end read only
        -:  924:
        -:  925:      pragma Unreferenced (Gnattest_T);
        -:  926:
        -:  927:      fValue : float;
        -:  928:   begin
        -:  929:
        4:  930:      fValue := 0.0;
        -:  931:      
        4:  932:      AUnit.Assertions.Assert(Condition => Math.Matrices.bMatrix_Has_No_Inverse(fValue),
        4:  933:                              Message   => "Matrices.bMatrix_Has_No_Inverse failed with value: " & float'Image(fValue));
        -:  934:      
        4:  935:      fValue := -0.0;
        -:  936:      
        4:  937:      AUnit.Assertions.Assert(Condition => Math.Matrices.bMatrix_Has_No_Inverse(fValue),
        4:  938:                              Message   => "Matrices.bMatrix_Has_No_Inverse failed with value: " & float'Image(fValue));
        -:  939:
        4:  940:      fValue := 10.0;
        -:  941:      
        4:  942:      AUnit.Assertions.Assert(Condition => not Math.Matrices.bMatrix_Has_No_Inverse(fValue),
        4:  943:                              Message   => "Matrices.bMatrix_Has_No_Inverse failed with value: " & float'Image(fValue));
        -:  944:      
        4:  945:      fValue := -10.0;
        -:  946:      
        4:  947:      AUnit.Assertions.Assert(Condition => not Math.Matrices.bMatrix_Has_No_Inverse(fValue),
        4:  948:                              Message   => "Matrices.bMatrix_Has_No_Inverse failed with value: " & float'Image(fValue));
        -:  949:      
        -:  950:
        -:  951:--  begin read only
        4:  952:   end Test_bMatrix_Has_No_Inverse;
        -:  953:--  end read only
        -:  954:
        -:  955:end Math.Matrices.Test_Data.Tests;
