        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/vectors/src/math-vectors.ads
        -:    0:Programs:25
        -:    1:-- Vector package for Project Naiad
        -:    2:-- Written by Per-Erik Måhl, 2013
        -:    3:with Math;
        -:    4:with Ada.Numerics;
        -:    5:with Ada.Exceptions;
        -:    6:with System;
        -:    7:with Ada.Unchecked_Deallocation;
        -:    8:with Exception_Handling;
        -:    9:
        -:   10:
        -:   11:-- Vectors package for classes, types and functionality regarding vectors. A vector object is stored in a pCVector variable and is created with the pxCreate function.
        4:   12:package Math.Vectors is
        -:   13:
        -:   14:   fVECTOR_PRECISION : constant float := 0.0001;
        -:   15:
    #####:   16:   type CVector is tagged private;
        -:   17:   --  <summary>Class for vector.</summary>
        -:   18:
        -:   19:   type pCVector is access all CVector;
        -:   20:   --  <summary>Pointer type for object of type CVector. Objects of type CVector should always be stored in variables of this type.</summary>
        -:   21:
        -:   22:
        -:   23:   procedure Free(pxVectorToDeallocate : in out pCVector);
        -:   24:
        -:   25:   function xCreate (fX, fY, fZ : float) return CVector;
        -:   26:   --  <summary>Creates an object of type CVector. Returns a pointer of type pCVector to the object created.</summary>
        -:   27:   --  <parameter name="fX">The value of the vector's X-component.</parameter>
        -:   28:   --  <parameter name="fY">The value of the vector's Y-component.</parameter>
        -:   29:   --  <parameter name="fZ">The value of the vector's Z-component.</parameter>
        -:   30:
        -:   31:   function pxGet_Allocated_Copy (this : in CVector) return pCVector;
        -:   32:   --  <summary>Creates an object of type CVector with the same component values as the object called on. Returns a pointer of type pCVector to the object created.</summary>
        -:   33:   --  <parameter name="this">The CVector object to copy the component values from.</parameter>
        -:   34:
        -:   35:   function xGet_Normalized (this : in CVector) return CVector;
        -:   36:   --  <summary>Creates an object of type CVector which is equal to the normalized vector of the object called on. Returns a pointer of type pCVector to the object created.</summary>
        -:   37:   --  <parameter name="this">The CVector object to base the normalized vector on.</parameter>
        -:   38:   --  <exception>Numeric_Error, if vector length = 0.0.</exception>
        -:   39:
        -:   40:   function fLength_Squared (this : in CVector) return float;
        -:   41:   --  <summary>Returns the length of the vector squared.</summary>
        -:   42:   --  <parameter name="this">The CVector object to calculate the length of.</parameter>
        -:   43:
        -:   44:   function fLength (this : in CVector) return float;
        -:   45:   --  <summary>Returns the length of the vector.</summary>
        -:   46:   --  <parameter name="this">The CVector object to calculate the length of.</parameter>
        -:   47:
        -:   48:   function "+" (pxLeftOperandVector : in pCVector; xRightOperandVector : in CVector) return CVector;
        -:   49:   function "+" (xLeftOperandVector : in CVector; pxRightOperandVector : in pCVector) return CVector;
        -:   50:   function "+" (xLeftOperandVector, xRightOperandVector : in CVector) return CVector;
        -:   51:   function "+" (pxLeftOperandVector, pxRightOperandVector : in pCVector) return CVector;
        -:   52:   --  <summary>Creates an object of type CVector with each component the sum of the two operand vectors' components. Returns a pointer of type pCVector to the object created.</summary>
        -:   53:   --  <parameter name="pxLeftOperandVector">The CVector object representing the left operand.</parameter>
        -:   54:   --  <parameter name="pxRightOperandVector">The CVector object representing the right operand.</parameter>
        -:   55:
        -:   56:   function "-" (pxLeftOperandVector : in pCVector; xRightOperandVector : in CVector) return CVector;
        -:   57:   function "-" (xLeftOperandVector : in CVector; pxRightOperandVector : in pCVector) return CVector;
        -:   58:   function "-" (xLeftOperandVector, xRightOperandVector : in CVector) return CVector;
        -:   59:   function "-" (pxLeftOperandVector, pxRightOperandVector : in pCVector) return CVector;
        -:   60:   --  <summary>Creates an object of type CVector with each component the difference of the two operand vectors' components. Returns a pointer of type pCVector to the object created.</summary>
        -:   61:   --  <parameter name="pxLeftOperandVector">The CVector object representing the left operand.</parameter>
        -:   62:   --  <parameter name="pxRightOperandVector">The CVector object representing the right operand.</parameter>
        -:   63:
        -:   64:   function "-" (xOperandVector : in CVector) return CVector;
        -:   65:   function "-" (pxOperandVector : in pCVector) return CVector;
        -:   66:   --  <summary>Creates an object of type CVector which has all the operand vector's components negated. Returns a pointer of type pCVector to the object created.</summary>
        -:   67:   --  <parameter name="pxOperandVector">The CVector object to negate.</parameter>
        -:   68:
        -:   69:   function "*" (pxLeftOperandVector : in pCVector; xRightOperandVector : in CVector) return CVector;
        -:   70:   function "*" (xLeftOperandVector : in CVector; pxRightOperandVector : in pCVector) return CVector;
        -:   71:   function "*" (xLeftOperandVector, xRightOperandVector : in CVector) return CVector;
        -:   72:   function "*" (pxLeftOperandVector, pxRightOperandVector : in pCVector) return CVector;
        -:   73:   --  <summary>Creates an object of type CVector with each component the product of the two operand vectors' components. Returns a pointer of type pCVector to the object created.</summary>
        -:   74:   --  <parameter name="pxLeftOperandVector">The CVector object representing the left operand.</parameter>
        -:   75:   --  <parameter name="pxRightOperandVector">The CVector object representing the right operand.</parameter>
        -:   76:
        -:   77:   function "*" (xLeftOperandVector : in CVector; fRightOperand : in float) return CVector;
        -:   78:   function "*" (pxLeftOperandVector : in pCVector; fRightOperand : in float) return CVector;
        -:   79:   --  <summary>Creates an object of type CVector with each component scaled with the right operand. Returns a pointer of type pCVector to the object created.</summary>
        -:   80:   --  <parameter name="pxLeftOperandVector">The CVector object representing the left operand.</parameter>
        -:   81:   --  <parameter name="fRightOperand">A floating point number saying how much the vector should be scaled.</parameter>
        -:   82:
        -:   83:   function "*" (fLeftOperand : in float; xRightOperandVector : in CVector) return CVector;
        -:   84:   function "*" (fLeftOperand : in float; pxRightOperandVector : in pCVector) return CVector;
        -:   85:   --  <summary>Creates an object of type CVector with each component scaled with the left operand. Returns a pointer of type pCVector to the object created.</summary>
        -:   86:   --  <parameter name="fLeftOperand">A floating point number saying how much the vector should be scaled.</parameter>
        -:   87:   --  <parameter name="pxRightOperandVector">The CVector object representing the right operand.</parameter>
        -:   88:
        -:   89:   function "/" (xLeftOperandVector : in CVector; fRightOperand : in float) return CVector;
        -:   90:   function "/" (pxLeftOperandVector : in pCVector; fRightOperand : in float) return CVector;
        -:   91:   --  <summary>Creates an object of type CVector with each component divided by the right operand. Returns a pointer of type pCVector to the object created.</summary>
        -:   92:   --  <parameter name="pxLeftOperandVector">The CVector object representing left operand.</parameter>
        -:   93:   --  <parameter name="fRightOperand">A floating point number representing the denominator.</parameter>
        -:   94:   --  <exception>Numeric_Error, if fRightOperand = 0.0.</exception>
        -:   95:
        -:   96:   function "=" (xLeftOperandVector : in CVector; xRightOperandVector : in CVector) return boolean;
        -:   97:   --  <summary>Returns true if the vectors are equal, false otherwise.</summary>
        -:   98:   --  <parameter name="pxLeftOperandVector">The CVector object representing left operand.</parameter>
        -:   99:   --  <parameter name="pxRightOperandVector">The CVector object representing right operand.</parameter>
        -:  100:
        -:  101:
        -:  102:   function fDot_Product (pxLeftOperandVector : in pCVector; pxRightOperandVector : in pCVector) return float;
        -:  103:   function fDot_Product (xLeftOperandVector : in CVector; pxRightOperandVector : in pCVector) return float;
        -:  104:   function fDot_Product (pxLeftOperandVector : in pCVector; xRightOperandVector : in CVector) return float;
        -:  105:   function fDot_Product (xLeftOperandVector : in CVector; xRightOperandVector : in CVector) return float;
        -:  106:   --  <summary>Calculates and returns the dot product between two vectors.</summary>
        -:  107:   --  <parameter name="pxLeftOperandVector">The CVector object representing left operand.</parameter>
        -:  108:   --  <parameter name="pxRightOperandVector">The CVector object representing right operand.</parameter>
        -:  109:
        -:  110:   function xCross_Product (xLeftOperandVector : in CVector; xRightOperandVector : in CVector) return CVector;
        -:  111:   function xCross_Product (xLeftOperandVector : in CVector; pxRightOperandVector : in pCVector) return CVector;
        -:  112:   function xCross_Product (pxLeftOperandVector : in pCVector; xRightOperandVector : in CVector) return CVector;
        -:  113:   function xCross_Product (pxLeftOperandVector : in pCVector; pxRightOperandVector : in pCVector) return CVector;
        -:  114:   --  <summary>Creates an object of type CVector which is the cross product between the two vectors. Returns a pointer of type pCVector to the object created.</summary>
        -:  115:   --  <parameter name="pxLeftOperandVector">The CVector object representing left operand.</parameter>
        -:  116:   --  <parameter name="pxRightOperandVector">The CVector object representing right operand.</parameter>
        -:  117:
        -:  118:   function fAngle_Between_In_Radians (pxLeftOperandVector, pxRightOperandVector : in pCVector) return float;
        -:  119:   function fAngle_Between_In_Radians (xLeftOperandVector, xRightOperandVector : in CVector) return float;
        -:  120:   function fAngle_Between_In_Radians (pxLeftOperandVector : in pCVector; xRightOperandVector : in CVector) return float;
        -:  121:   function fAngle_Between_In_Radians (xLeftOperandVector : in CVector; pxRightOperandVector : in pCVector) return float;
        -:  122:   --  <summary>Calculates and returns the angle in radians between two vectors.</summary>
        -:  123:   --  <parameter name="pxLeftOperandVector">The CVector object representing left operand.</parameter>
        -:  124:   --  <parameter name="pxRightOperandVector">The CVector object representing right operand.</parameter>
        -:  125:
        -:  126:
        -:  127:   function fGet_X (this : in CVector) return float;
        -:  128:   --  <summary>Returns the X-component of the vector.</summary>
        -:  129:   --  <parameter name="this">The CVector object to get the X-component from.</parameter>
        -:  130:
        -:  131:   function fGet_Y (this : in CVector) return float;
        -:  132:   --  <summary>Returns the Y-component of the vector.</summary>
        -:  133:   --  <parameter name="this">The CVector object to get the Y-component from.</parameter>
        -:  134:
        -:  135:   function fGet_Z (this : in CVector) return float;
        -:  136:   --  <summary>Returns the Z-component of the vector.</summary>
        -:  137:   --  <parameter name="this">The CVector object to get the Z-component from.</parameter>
        -:  138:
        -:  139:   procedure Copy_From(this : in out CVector; xSourceVector : in CVector);
        -:  140:   --  <summary>Copies the components from source vector and puts into this vector.</summary>
        -:  141:   --  <parameter name="this">The CVector object to copy the component values to.</parameter>
        -:  142:   --  <parameter name="pxSourceVector">The CVector object to copy the component values from.</parameter>
        -:  143:
        -:  144:private
      124:  145:   type CVector is tagged
        -:  146:      record
        -:  147:         fX : float;
        -:  148:         fY : float;
        -:  149:         fZ : float;
        -:  150:      end record;
        -:  151:
        -:  152:
        2:  153:end Math.Vectors;
