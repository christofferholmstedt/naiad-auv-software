        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/planes/src/math-planes.adb
        -:    0:Programs:25
        -:    1:with Math.Vectors;
        -:    2:with Ada.Numerics;
        -:    3:with Exception_Handling;
        -:    4:
        -:    5:package body Math.Planes is
        -:    6:
       30:    7:   function xCreate (xNormalVector : in Math.Vectors.CVector; fDistanceFromOrigin : in float) return CPlane is
        -:    8:   begin
       30:    9:      if xNormalVector.fLength_Squared = 0.0 then
    #####:   10:         Exception_Handling.Raise_Exception(E => Exception_Handling.UndefinedPlane'Identity,
        -:   11:                                            Message => "xCreate (xNormalVector : in Math.Vectors.CVector; fDistanceFromOrigin : in float) return CPlane");
        -:   12:      end if;
        -:   13:
      120:   14:      return CPlane'(fA => xNormalVector.fGet_X,
       30:   15:                         fB => xNormalVector.fGet_Y,
       30:   16:                         fC => xNormalVector.fGet_Z,
       30:   17:                         fD => fDistanceFromOrigin / xNormalVector.fLength);
        -:   18:   end xCreate;
        -:   19:
        8:   20:   function xCreate (pxNormalVector : in Math.Vectors.pCVector; fDistanceFromOrigin : in float) return CPlane is
        -:   21:      use Math.Vectors;
        -:   22:   begin
        8:   23:      if pxNormalVector /= null then
       16:   24:         return Math.Planes.xCreate(xNormalVector       => pxNormalVector.all,
        -:   25:                                     fDistanceFromOrigin => fDistanceFromOrigin);
        -:   26:      end if;
        -:   27:
    #####:   28:      raise Exception_Handling.NullPointer;
        -:   29:   end xCreate;
        -:   30:
       22:   31:   function pxGet_Allocated_Copy(this : in CPlane) return pCPlane is
        -:   32:   begin
       22:   33:      return new CPlane'(fA => this.fA,
        -:   34:                         fB => this.fB,
        -:   35:                         fC => this.fC,
        -:   36:                         fD => this.fD);
        -:   37:   end pxGet_Allocated_Copy;
        -:   38:
       54:   39:   function xGet_Normal_Vector (this : in CPlane) return Math.Vectors.CVector is
       54:   40:      pxNormalVector : Math.Vectors.pCVector;
       54:   41:      xNormalVector : Math.Vectors.CVector;
        -:   42:   begin
       54:   43:      pxNormalVector := Math.Vectors.xCreate(fX => this.fA,
        -:   44:                                              fY => this.fB,
        -:   45:                                              fZ => this.fC).pxGet_Allocated_Copy;
       54:   46:      xNormalVector := pxNormalVector.xGet_Normalized;
       54:   47:      Math.Vectors.Free(pxVectorToDeallocate => pxNormalVector);
       54:   48:      return xNormalVector;
        -:   49:   end xGet_Normal_Vector;
        -:   50:
       28:   51:   function fGet_Distance_From_Origin (this : in CPlane) return float is
       14:   52:      pxNormalVector : Math.Vectors.pCVector;
        -:   53:      fDistanceFromOrigin : float;
        -:   54:   begin
       14:   55:      pxNormalVector := Math.Vectors.xCreate(fX => this.fA,
        -:   56:                                              fY => this.fB,
        -:   57:                                              fZ => this.fC).pxGet_Allocated_Copy;
       14:   58:      fDistanceFromOrigin := this.fD * pxNormalVector.fLength;
       14:   59:      Math.Vectors.Free(pxVectorToDeallocate => pxNormalVector);
        -:   60:
       28:   61:      return abs(fDistanceFromOrigin);
       14:   62:   end fGet_Distance_From_Origin;
        -:   63:
        8:   64:   function fAngle_Between_In_Degrees (xLeftOperandPlane : in CPlane; xRightOperandPlane : in CPlane) return float is
        -:   65:      fAngleInRadians : float;
        -:   66:      fAngleInDegrees : float;
        -:   67:   begin
        4:   68:      fAngleInRadians := Math.Vectors.fAngle_Between_In_Radians(xLeftOperandPlane.xGet_Normal_Vector,
        4:   69:                                                                xRightOperandPlane.xGet_Normal_Vector);
        4:   70:      fAngleInDegrees :=  fAngleInRadians * (180.0 / Ada.Numerics.Pi);
        -:   71:
        8:   72:      return fAngleInDegrees;
        4:   73:   end fAngle_Between_In_Degrees;
        -:   74:
        4:   75:   function fAngle_Between_In_Degrees (pxLeftOperandPlane : in pCPlane; pxRightOperandPlane : in pCPlane) return float is
        -:   76:   begin
        4:   77:      if pxLeftOperandPlane /= null and then pxRightOperandPlane /= null then
        8:   78:         return fAngle_Between_In_Degrees(pxLeftOperandPlane.all, pxRightOperandPlane.all);
        -:   79:      end if;
        -:   80:
    #####:   81:      raise Exception_Handling.NullPointer;
        -:   82:   end fAngle_Between_In_Degrees;
        -:   83:
    #####:   84:   function fAngle_Between_In_Degrees (pxLeftOperandPlane : in pCPlane; xRightOperandPlane : in CPlane) return float is
        -:   85:   begin
    #####:   86:      if pxLeftOperandPlane /= null then
    #####:   87:         return fAngle_Between_In_Degrees(pxLeftOperandPlane.all, xRightOperandPlane);
        -:   88:      end if;
        -:   89:
    #####:   90:      raise Exception_Handling.NullPointer;
        -:   91:   end fAngle_Between_In_Degrees;
        -:   92:
    #####:   93:   function fAngle_Between_In_Degrees (xLeftOperandPlane : in CPlane; pxRightOperandPlane : in pCPlane) return float is
        -:   94:   begin
    #####:   95:      if pxRightOperandPlane /= null then
    #####:   96:         return fAngle_Between_In_Degrees(xLeftOperandPlane, pxRightOperandPlane.all);
        -:   97:      end if;
        -:   98:
    #####:   99:      raise Exception_Handling.NullPointer;
        -:  100:   end fAngle_Between_In_Degrees;
        -:  101:
        -:  102:--     procedure Log_Plane(this : in CPlane) is
        -:  103:--     begin
        -:  104:--        Ada.Text_IO.Put_Line("Plane normal: " & float'Image(this.xGet_Normal_Vector.fGet_X) & ", " & float'Image(this.xGet_Normal_Vector.fGet_Y) & ", " & float'Image(this.xGet_Normal_Vector.fGet_Z) & ".");
        -:  105:--     end Log_Plane;
        -:  106:
        -:  107:
        6:  108:   function xGet_Intersection_Vector_Between (xLeftOperandPlane : in CPlane; xRightOperandPlane : in CPlane) return Math.Vectors.CVector is
        -:  109:      use Math.Vectors;
        6:  110:      xVector : Math.Vectors.CVector;
        -:  111:   begin
       12:  112:      if xLeftOperandPlane.fGet_Distance_From_Origin * xLeftOperandPlane.xGet_Normal_Vector /=
        8:  113:        xRightOperandPlane.fGet_Distance_From_Origin * xRightOperandPlane.xGet_Normal_Vector and then
        4:  114:        Math.Vectors.fAngle_Between_In_Radians(xLeftOperandPlane.xGet_Normal_Vector, xRightOperandPlane.xGet_Normal_Vector) = 0.0 then
        2:  115:         Exception_Handling.Raise_Exception(E       => Exception_Handling.NoIntersectionBetweenPlanes'Identity,
        -:  116:                                            Message => "Math.Planes.xGet_Intersection_Vector_Between (xLeftOperandPlane : in CPlane; xRightOperandPlane : in CPlane) return Math.Vectors.CVector");
        -:  117:      end if;
        -:  118:
        4:  119:      return Math.Vectors.xCross_Product(xLeftOperandPlane.xGet_Normal_Vector, xRightOperandPlane.xGet_Normal_Vector).xGet_Normalized;
        -:  120:
        -:  121:   exception
        4:  122:      when Exception_Handling.DivisionByZero =>
        2:  123:         Exception_Handling.Handled_Exception;
        4:  124:         xVector := Math.Vectors.xCreate(fX => 1.0,
        -:  125:                                           fY => 0.0,
        -:  126:                                           fZ => 0.0);
        2:  127:         if xVector = xLeftOperandPlane.xGet_Normal_Vector then
        2:  128:            xVector := Math.Vectors.xCreate(fX => 0.0,
        -:  129:                                              fY => 1.0,
        -:  130:                                              fZ => 0.0);
        -:  131:         end if;
        2:  132:         return Math.Vectors.xCross_Product(xLeftOperandPlane.xGet_Normal_Vector + xVector, xRightOperandPlane.xGet_Normal_Vector).xGet_Normalized;
        4:  133:   end xGet_Intersection_Vector_Between;
        -:  134:
        2:  135:   function xGet_Intersection_Vector_Between (pxLeftOperandPlane : in pCPlane; pxRightOperandPlane : in pCPlane) return Math.Vectors.CVector is
        -:  136:   begin
        2:  137:      if pxLeftOperandPlane /= null and then pxRightOperandPlane /= null then
        4:  138:         return xGet_Intersection_Vector_Between(pxLeftOperandPlane.all, pxRightOperandPlane.all);
        -:  139:      end if;
        -:  140:
    #####:  141:      raise Exception_Handling.NullPointer;
        -:  142:   end xGet_Intersection_Vector_Between;
        -:  143:
        2:  144:   function xGet_Intersection_Vector_Between (pxLeftOperandPlane : in pCPlane; xRightOperandPlane : in CPlane) return Math.Vectors.CVector is
        -:  145:   begin
        2:  146:      if pxLeftOperandPlane /= null then
        2:  147:         return xGet_Intersection_Vector_Between(pxLeftOperandPlane.all, xRightOperandPlane);
        -:  148:      end if;
        -:  149:
    #####:  150:      raise Exception_Handling.NullPointer;
        -:  151:   end xGet_Intersection_Vector_Between;
        -:  152:
        2:  153:   function xGet_Intersection_Vector_Between (xLeftOperandPlane : in CPlane; pxRightOperandPlane : in pCPlane) return Math.Vectors.CVector is
        -:  154:   begin
        2:  155:      if pxRightOperandPlane /= null then
        4:  156:         return xGet_Intersection_Vector_Between(xLeftOperandPlane, pxRightOperandPlane.all);
        -:  157:      end if;
        -:  158:
    #####:  159:      raise Exception_Handling.NullPointer;
        -:  160:   end xGet_Intersection_Vector_Between;
        -:  161:
       10:  162:   procedure Copy_From(this : in out CPlane; xSourcePlane : in CPlane) is
        -:  163:   begin
       10:  164:         this.fA := xSourcePlane.fA;
       10:  165:         this.fB := xSourcePlane.fB;
       10:  166:         this.fC := xSourcePlane.fC;
       10:  167:         this.fD := xSourcePlane.fD;
       10:  168:   end Copy_From;
        -:  169:
        -:  170:
       22:  171:   procedure Free(pxPlaneToDeallocate : in out pCPlane) is
        -:  172:      procedure Dealloc is new Ada.Unchecked_Deallocation(CPlane, pCPlane);
        -:  173:   begin
       22:  174:      Dealloc(pxPlaneToDeallocate);
       22:  175:   end Free;
        -:  176:
        -:  177:end Math.Planes;
