        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/planes/obj/gnattest/tests/math-planes-cplane_test_data-cplane_tests.adb
        -:    0:Programs:25
        -:    1:--  This package has been generated automatically by GNATtest.
        -:    2:--  You are allowed to add your code to the bodies of test routines.
        -:    3:--  Such changes will be kept during further regeneration of this file.
        -:    4:--  All code placed outside of test routine bodies will be lost. The
        -:    5:--  code intended to set up and tear down the test environment should be
        -:    6:--  placed into Math.Planes.CPlane_Test_Data.
        -:    7:
        -:    8:with AUnit.Assertions; use AUnit.Assertions;
        -:    9:
        -:   10:package body Math.Planes.CPlane_Test_Data.CPlane_Tests is
        -:   11:
        -:   12:
        -:   13:--  begin read only
        -:   14:   procedure Test_1_xCreate (Gnattest_T : in out Test_CPlane);
        2:   15:   procedure Test_xCreate_4dc581 (Gnattest_T : in out Test_CPlane) renames Test_1_xCreate;
        -:   16:--  id:2.1/4dc58160bc1c3c8e/xCreate/1/0/
        -:   17:   procedure Test_1_xCreate (Gnattest_T : in out Test_CPlane) is
        -:   18:   --  math-planes.ads:18:4:xCreate
        -:   19:--  end read only
        -:   20:
        -:   21:      pragma Unreferenced (Gnattest_T);
        -:   22:
        -:   23:   begin
        -:   24:
        -:   25:      null;
        -:   26:      
        -:   27:--  begin read only
        -:   28:   end Test_1_xCreate;
        -:   29:--  end read only
        -:   30:
        -:   31:
        -:   32:--  begin read only
        -:   33:   procedure Test_2_xCreate (Gnattest_T : in out Test_CPlane);
        2:   34:   procedure Test_xCreate_d3d096 (Gnattest_T : in out Test_CPlane) renames Test_2_xCreate;
        -:   35:--  id:2.1/d3d096d9dfbe5351/xCreate/0/0/
        -:   36:   procedure Test_2_xCreate (Gnattest_T : in out Test_CPlane) is
        -:   37:   --  math-planes.ads:19:4:xCreate
        -:   38:--  end read only
        -:   39:
        -:   40:      pragma Unreferenced (Gnattest_T);
        -:   41:
        -:   42:   begin
        -:   43:
        -:   44:      null;
        -:   45:      
        -:   46:--  begin read only
        -:   47:   end Test_2_xCreate;
        -:   48:--  end read only
        -:   49:
        -:   50:
        -:   51:--  begin read only
        -:   52:   procedure Test_pxGet_Allocated_Copy (Gnattest_T : in out Test_CPlane);
        2:   53:   procedure Test_pxGet_Allocated_Copy_123053 (Gnattest_T : in out Test_CPlane) renames Test_pxGet_Allocated_Copy;
        -:   54:--  id:2.1/1230534ef8ef4675/pxGet_Allocated_Copy/1/0/
        4:   55:   procedure Test_pxGet_Allocated_Copy (Gnattest_T : in out Test_CPlane) is
        -:   56:   --  math-planes.ads:25:4:pxGet_Allocated_Copy
        -:   57:--  end read only
        -:   58:
        -:   59:      pragma Unreferenced (Gnattest_T);
        -:   60:      use System;
        -:   61:      
        2:   62:      xPlane : Math.Planes.CPlane;
        2:   63:      pxPlaneOne : Math.Planes.pCPlane;
        2:   64:      pxPlaneTwo : Math.Planes.pCPlane;
        -:   65:
        -:   66:   begin
        -:   67:
        2:   68:      xPlane := Math.Planes.xCreate(xNormalVector       => Math.Vectors.xCreate(fX => 1.0,
        -:   69:                                                                                    fY => 45.0,
        -:   70:                                                                                    fZ => -21.0),
        -:   71:                                        fDistanceFromOrigin => 12.3);
        2:   72:      pxPlaneOne := xPlane.pxGet_Allocated_Copy;
        2:   73:      pxPlaneTwo := xPlane.pxGet_Allocated_Copy;
        -:   74:      
        -:   75:
        2:   76:      AUnit.Assertions.Assert(Condition => pxPlaneOne.all = pxPlaneTwo.all,
        -:   77:                              Message   => "CPlane.pxGet_Allocated_Copy failed, plane one not equal to plane two.");
        2:   78:      AUnit.Assertions.Assert(Condition => pxPlaneOne.all = xPlane,
        -:   79:                              Message   => "CPlane.pxGet_Allocated_Copy failed, plane one not equal to original plane.");
        2:   80:      AUnit.Assertions.Assert(Condition => pxPlaneOne.all'Address /= pxPlaneTwo.all'Address,
        -:   81:                              Message   => "CPlane.pxGet_Allocated_Copy failed, allocated copies have same address.");
        -:   82:
        -:   83:      
        2:   84:         Math.Planes.Free(pxPlaneToDeallocate => pxPlaneOne);
        2:   85:         Math.Planes.Free(pxPlaneToDeallocate => pxPlaneTwo);      
        -:   86:
        -:   87:--  begin read only
        2:   88:   end Test_pxGet_Allocated_Copy;
        -:   89:--  end read only
        -:   90:
        -:   91:
        -:   92:--  begin read only
        -:   93:   procedure Test_xGet_Normal_Vector (Gnattest_T : in out Test_CPlane);
        2:   94:   procedure Test_xGet_Normal_Vector_a98d33 (Gnattest_T : in out Test_CPlane) renames Test_xGet_Normal_Vector;
        -:   95:--  id:2.1/a98d33c1d1be01d1/xGet_Normal_Vector/1/0/
        4:   96:   procedure Test_xGet_Normal_Vector (Gnattest_T : in out Test_CPlane) is
        -:   97:   --  math-planes.ads:29:4:xGet_Normal_Vector
        -:   98:--  end read only
        -:   99:
        -:  100:      pragma Unreferenced (Gnattest_T);
        -:  101:
        2:  102:      pxTestPlane : pCPlane;
        2:  103:      pxTestNormal : Math.Vectors.pCVector;
        -:  104:      use Math.Vectors;
        -:  105:
        -:  106:--      fExpectedAX : float := 0.980581;
        -:  107:--      fExpectedBY : float := 0.0;
        -:  108:--      fExpectedCZ : float := -0.196116;
        -:  109:
        -:  110:   begin
        -:  111:
        2:  112:      pxTestNormal := Math.Vectors.xCreate(fX => 5.0,
        -:  113:                                            fY => 0.0,
        -:  114:                                            fZ => -1.0).pxGet_Allocated_Copy;
        2:  115:      pxTestPlane := Math.Planes.xCreate(pxNormalVector      => pxTestNormal,
        -:  116:                                          fDistanceFromOrigin => 0.0).pxGet_Allocated_Copy;
        2:  117:      pxTestNormal.Copy_From(xSourceVector => pxTestNormal.xGet_Normalized);
        -:  118:
        2:  119:      AUnit.Assertions.Assert(Condition => pxTestNormal.all = pxTestPlane.xGet_Normal_Vector,
        2:  120:                              Message   => "CPlane.xGet_Normal_Vector failed. Value: " & float'image(pxTestPlane.xGet_Normal_Vector.fGet_X) & float'image(pxTestPlane.xGet_Normal_Vector.fGet_Y) & float'image(pxTestPlane.xGet_Normal_Vector.fGet_Z) & ". Expected: " & float'image(pxTestNormal.fGet_X) & float'image(pxTestNormal.fGet_Y) & float'image(pxTestNormal.fGet_Z) );
        -:  121:
        2:  122:      Math.Vectors.Free(pxVectorToDeallocate => pxTestNormal);
        2:  123:      Math.Planes.Free(pxPlaneToDeallocate => pxTestPlane);
        -:  124:--  begin read only
        2:  125:   end Test_xGet_Normal_Vector;
        -:  126:--  end read only
        -:  127:
        -:  128:
        -:  129:--  begin read only
        -:  130:   procedure Test_fGet_Distance_From_Origin (Gnattest_T : in out Test_CPlane);
        2:  131:   procedure Test_fGet_Distance_From_Origin_1b1e67 (Gnattest_T : in out Test_CPlane) renames Test_fGet_Distance_From_Origin;
        -:  132:--  id:2.1/1b1e6780f65bcbcd/fGet_Distance_From_Origin/1/0/
        4:  133:   procedure Test_fGet_Distance_From_Origin (Gnattest_T : in out Test_CPlane) is
        -:  134:   --  math-planes.ads:33:4:fGet_Distance_From_Origin
        -:  135:--  end read only
        -:  136:
        -:  137:      pragma Unreferenced (Gnattest_T);
        -:  138:
        2:  139:      pxTestPlane : pCPlane;
        2:  140:      pxTestNormal : Math.Vectors.pCVector;
        -:  141:      fExpectedD : float := 2.0;
        -:  142:   begin
        -:  143:
        -:  144:
        2:  145:      pxTestNormal := Math.Vectors.xCreate(fX => 5.0,
        -:  146:                                            fY => 0.0,
        -:  147:                                            fZ => -1.0).pxGet_Allocated_Copy;
        2:  148:      pxTestPlane := Math.Planes.xCreate(pxNormalVector      => pxTestNormal,
        -:  149:                                          fDistanceFromOrigin => fExpectedD).pxGet_Allocated_Copy;
        -:  150:
        2:  151:      AUnit.Assertions.Assert(Condition => pxTestPlane.fGet_Distance_From_Origin = fExpectedD,
        -:  152:                              Message   => "CPlane.fGet_Distance_From_Origin failed.");
        -:  153:
        2:  154:      Math.Vectors.Free(pxVectorToDeallocate => pxTestNormal);
        2:  155:      Math.Planes.Free(pxPlaneToDeallocate => pxTestPlane);
        -:  156:
        -:  157:--  begin read only
        2:  158:   end Test_fGet_Distance_From_Origin;
        -:  159:--  end read only
        -:  160:
        -:  161:
        -:  162:--  begin read only
        -:  163:   procedure Test_1_fAngle_Between_In_Degrees (Gnattest_T : in out Test_CPlane);
        2:  164:   procedure Test_fAngle_Between_In_Degrees_c567f3 (Gnattest_T : in out Test_CPlane) renames Test_1_fAngle_Between_In_Degrees;
        -:  165:--  id:2.1/c567f314dc9946e3/fAngle_Between_In_Degrees/1/0/
        -:  166:   procedure Test_1_fAngle_Between_In_Degrees (Gnattest_T : in out Test_CPlane) is
        -:  167:   --  math-planes.ads:38:4:fAngle_Between_In_Degrees
        -:  168:--  end read only
        -:  169:
        -:  170:      pragma Unreferenced (Gnattest_T);
        -:  171:
        -:  172:   begin
        -:  173:      null;
        -:  174:
        -:  175:--  begin read only
        -:  176:   end Test_1_fAngle_Between_In_Degrees;
        -:  177:--  end read only
        -:  178:
        -:  179:
        -:  180:--  begin read only
        -:  181:   procedure Test_2_fAngle_Between_In_Degrees (Gnattest_T : in out Test_CPlane);
        2:  182:   procedure Test_fAngle_Between_In_Degrees_3326a2 (Gnattest_T : in out Test_CPlane) renames Test_2_fAngle_Between_In_Degrees;
        -:  183:--  id:2.1/3326a28abb4662d5/fAngle_Between_In_Degrees/0/0/
        -:  184:   procedure Test_2_fAngle_Between_In_Degrees (Gnattest_T : in out Test_CPlane) is
        -:  185:   --  math-planes.ads:39:4:fAngle_Between_In_Degrees
        -:  186:--  end read only
        -:  187:
        -:  188:      pragma Unreferenced (Gnattest_T);
        -:  189:
        -:  190:   begin
        -:  191:
        -:  192:      null;
        -:  193:
        -:  194:--  begin read only
        -:  195:   end Test_2_fAngle_Between_In_Degrees;
        -:  196:--  end read only
        -:  197:
        -:  198:
        -:  199:--  begin read only
        -:  200:   procedure Test_3_fAngle_Between_In_Degrees (Gnattest_T : in out Test_CPlane);
        2:  201:   procedure Test_fAngle_Between_In_Degrees_39c39e (Gnattest_T : in out Test_CPlane) renames Test_3_fAngle_Between_In_Degrees;
        -:  202:--  id:2.1/39c39e8c68cafd06/fAngle_Between_In_Degrees/0/0/
        4:  203:   procedure Test_3_fAngle_Between_In_Degrees (Gnattest_T : in out Test_CPlane) is
        -:  204:   --  math-planes.ads:41:4:fAngle_Between_In_Degrees
        -:  205:--  end read only
        -:  206:
        -:  207:      pragma Unreferenced (Gnattest_T);
        -:  208:
        2:  209:      pxPlaneOne : Math.Planes.pCPlane;
        2:  210:      pxPlaneTwo : Math.Planes.pCPlane;
        -:  211:
        -:  212:   begin
        -:  213:
        2:  214:      pxPlaneOne := Math.Planes.xCreate(xNormalVector       => Math.Vectors.xCreate(fX => 1.0,
        -:  215:                                                                                    fY => 0.0,
        -:  216:                                                                                    fZ => 0.0),
        -:  217:                                        fDistanceFromOrigin => 0.0).pxGet_Allocated_Copy;
        2:  218:      pxPlaneTwo := Math.Planes.xCreate(xNormalVector       => Math.Vectors.xCreate(fX => 0.0,
        -:  219:                                                                                    fY => -2.0,
        -:  220:                                                                                    fZ => 0.0),
        -:  221:                                        fDistanceFromOrigin => -4.0).pxGet_Allocated_Copy;
        -:  222:      
        -:  223:
        2:  224:      AUnit.Assertions.Assert(Condition => Math.Planes.fAngle_Between_In_Degrees(pxPlaneOne, pxPlaneTwo) = 90.0,
        -:  225:                              Message   => "Planes.fAngle_Between_In_Degrees failed, planes should be perpendicular.");
        -:  226:
        -:  227:      
        2:  228:         Math.Planes.Free(pxPlaneToDeallocate => pxPlaneOne);
        2:  229:         Math.Planes.Free(pxPlaneToDeallocate => pxPlaneTwo);      
        -:  230:--  begin read only
        2:  231:   end Test_3_fAngle_Between_In_Degrees;
        -:  232:--  end read only
        -:  233:
        -:  234:
        -:  235:--  begin read only
        -:  236:   procedure Test_1_xGet_Intersection_Vector_Between (Gnattest_T : in out Test_CPlane);
        2:  237:   procedure Test_xGet_Intersection_Vector_Between_fcb85d (Gnattest_T : in out Test_CPlane) renames Test_1_xGet_Intersection_Vector_Between;
        -:  238:--  id:2.1/fcb85daa3aefe6ae/xGet_Intersection_Vector_Between/1/0/
        -:  239:   procedure Test_1_xGet_Intersection_Vector_Between (Gnattest_T : in out Test_CPlane) is
        -:  240:   --  math-planes.ads:46:4:xGet_Intersection_Vector_Between
        -:  241:--  end read only
        -:  242:
        -:  243:      pragma Unreferenced (Gnattest_T);
        -:  244:
        -:  245:   begin
        -:  246:
        -:  247:      null;
        -:  248:
        -:  249:--  begin read only
        -:  250:   end Test_1_xGet_Intersection_Vector_Between;
        -:  251:--  end read only
        -:  252:
        -:  253:
        -:  254:--  begin read only
        -:  255:   procedure Test_2_xGet_Intersection_Vector_Between (Gnattest_T : in out Test_CPlane);
        2:  256:   procedure Test_xGet_Intersection_Vector_Between_a801a4 (Gnattest_T : in out Test_CPlane) renames Test_2_xGet_Intersection_Vector_Between;
        -:  257:--  id:2.1/a801a487092a6ff0/xGet_Intersection_Vector_Between/0/0/
        -:  258:   procedure Test_2_xGet_Intersection_Vector_Between (Gnattest_T : in out Test_CPlane) is
        -:  259:   --  math-planes.ads:47:4:xGet_Intersection_Vector_Between
        -:  260:--  end read only
        -:  261:
        -:  262:      pragma Unreferenced (Gnattest_T);
        -:  263:
        -:  264:   begin
        -:  265:
        -:  266:      null;
        -:  267:
        -:  268:--  begin read only
        -:  269:   end Test_2_xGet_Intersection_Vector_Between;
        -:  270:--  end read only
        -:  271:
        -:  272:
        -:  273:--  begin read only
        -:  274:   procedure Test_3_xGet_Intersection_Vector_Between (Gnattest_T : in out Test_CPlane);
        2:  275:   procedure Test_xGet_Intersection_Vector_Between_1e6db6 (Gnattest_T : in out Test_CPlane) renames Test_3_xGet_Intersection_Vector_Between;
        -:  276:--  id:2.1/1e6db6b01382acef/xGet_Intersection_Vector_Between/0/0/
        4:  277:   procedure Test_3_xGet_Intersection_Vector_Between (Gnattest_T : in out Test_CPlane) is
        -:  278:   --  math-planes.ads:49:4:xGet_Intersection_Vector_Between
        -:  279:--  end read only
        -:  280:
        -:  281:      pragma Unreferenced (Gnattest_T);
        -:  282:
        2:  283:      pxPlaneOne : Math.Planes.pCPlane;
        2:  284:      pxPlaneTwo : Math.Planes.pCPlane;
        2:  285:      xIntersect : Math.Vectors.CVector;
        -:  286:   begin
        -:  287:      
        2:  288:      pxPlaneOne := Math.Planes.xCreate(xNormalVector       => Math.Vectors.xCreate(fX => 1.0,
        -:  289:                                                                                    fY => 0.0,
        -:  290:                                                                                    fZ => 0.0),
        -:  291:                                        fDistanceFromOrigin => 5.0).pxGet_Allocated_Copy;
        2:  292:      pxPlaneTwo := Math.Planes.xCreate(xNormalVector       => Math.Vectors.xCreate(fX => 1.0,
        -:  293:                                                                                    fY => 0.0,
        -:  294:                                                                                    fZ => 0.0),
        -:  295:                                        fDistanceFromOrigin => 5.0).pxGet_Allocated_Copy;
        -:  296:      
        -:  297:      
        2:  298:      xIntersect := Math.Planes.xGet_Intersection_Vector_Between(pxPlaneOne, pxPlaneTwo);
        -:  299:          
        2:  300:      AUnit.Assertions.Assert(Condition => xIntersect.fGet_X = 0.0,
        -:  301:                              Message   => "Planes.xGet_Intersection_Vector_Between failed, vector not in both planes.");
        2:  302:      AUnit.Assertions.Assert(Condition => abs(xIntersect.fGet_Y) > 0.0 or abs(xIntersect.fGet_Z) > 0.0,
        -:  303:                              Message   => "Planes.xGet_Intersection_Vector_Between failed, vector is zero.");    
        -:  304:      
        2:  305:      pxPlaneOne.Copy_From(xSourcePlane => Math.Planes.xCreate(xNormalVector       => Math.Vectors.xCreate(fX => 3.0,
        -:  306:                                                                                    fY => 0.0,
        -:  307:                                                                                    fZ => 0.0),
        -:  308:                                                               fDistanceFromOrigin => 5.0));
        2:  309:      pxPlaneTwo.Copy_From(xSourcePlane => Math.Planes.xCreate(xNormalVector       => Math.Vectors.xCreate(fX => 0.0,
        -:  310:                                                                                    fY => 4.0,
        -:  311:                                                                                    fZ => 0.0),
        -:  312:                                        fDistanceFromOrigin => 10.0));      
        -:  313:      
        2:  314:      xIntersect := Math.Planes.xGet_Intersection_Vector_Between(pxPlaneOne.all, pxPlaneTwo);
        -:  315:
        2:  316:      AUnit.Assertions.Assert(Condition => Math.Angles.fRadians_To_Degrees(Math.Vectors.fAngle_Between_In_Radians(xIntersect, pxPlaneOne.xGet_Normal_Vector)) = 90.0,
        -:  317:                              Message   => "Planes.xGet_Intersection_Vector_Between failed, intersection vector is not perpendicular to plane one's normal");
        2:  318:      AUnit.Assertions.Assert(Condition => Math.Angles.fRadians_To_Degrees(Math.Vectors.fAngle_Between_In_Radians(xIntersect, pxPlaneTwo.xGet_Normal_Vector)) = 90.0,
        -:  319:                              Message   => "Planes.xGet_Intersection_Vector_Between failed, intersection vector is not perpendicular to plane two's normal");
        -:  320:      
        -:  321:      
        -:  322:      
        2:  323:      pxPlaneOne.Copy_From(xSourcePlane => Math.Planes.xCreate(xNormalVector       => Math.Vectors.xCreate(fX => 0.0,
        -:  324:                                                                                    fY => 0.0,
        -:  325:                                                                                    fZ => 4.0),
        -:  326:                                                               fDistanceFromOrigin => 5.0));
        2:  327:      pxPlaneTwo.Copy_From(xSourcePlane => Math.Planes.xCreate(xNormalVector       => Math.Vectors.xCreate(fX => 0.0,
        -:  328:                                                                                    fY => 0.0,
        -:  329:                                                                                    fZ => 10.0),
        -:  330:                                        fDistanceFromOrigin => 10.0));      
        -:  331:      
        2:  332:      xIntersect := Math.Planes.xGet_Intersection_Vector_Between(pxPlaneOne, pxPlaneTwo.all);
        -:  333:
    #####:  334:      AUnit.Assertions.Assert(Condition => False,
        -:  335:                              Message   => "Planes.xGet_Intersection_Vector_Between failed, should've raised exception.");
        -:  336:
        -:  337:   exception
        4:  338:      when Exception_Handling.NoIntersectionBetweenPlanes =>
        2:  339:         Math.Planes.Free(pxPlaneToDeallocate => pxPlaneOne);
        2:  340:         Math.Planes.Free(pxPlaneToDeallocate => pxPlaneTwo);
        -:  341:         null; -- test passed
    =====:  342:      when E : others =>
    #####:  343:         AUnit.Assertions.Assert(Condition => False,
    =====:  344:                                 Message   => "Planes.xGet_Intersection_Vector_Between failed, wrong exception raised. Raised: " & Ada.Exceptions.Exception_Name(E));
    =====:  345:         Math.Planes.Free(pxPlaneToDeallocate => pxPlaneOne);
    =====:  346:         Math.Planes.Free(pxPlaneToDeallocate => pxPlaneTwo);
        -:  347:         
        -:  348:         
        -:  349:      
        -:  350:            
        -:  351:
        -:  352:
        -:  353:--  begin read only
        4:  354:   end Test_3_xGet_Intersection_Vector_Between;
        -:  355:--  end read only
        -:  356:
        -:  357:
        -:  358:--  begin read only
        -:  359:   procedure Test_Copy_From (Gnattest_T : in out Test_CPlane);
        2:  360:   procedure Test_Copy_From_aaf146 (Gnattest_T : in out Test_CPlane) renames Test_Copy_From;
        -:  361:--  id:2.1/aaf14650204a5d27/Copy_From/1/0/
        4:  362:   procedure Test_Copy_From (Gnattest_T : in out Test_CPlane) is
        -:  363:   --  math-planes.ads:56:4:Copy_From
        -:  364:--  end read only
        -:  365:
        -:  366:      pragma Unreferenced (Gnattest_T);
        -:  367:      use System;
        -:  368:      
        2:  369:      xPlaneOriginal : Math.Planes.CPlane;
        2:  370:      xPlaneCopy : Math.Planes.CPlane;
        -:  371:
        -:  372:   begin
        -:  373:
        2:  374:      xPlaneOriginal := Math.Planes.xCreate(xNormalVector       => Math.Vectors.xCreate(fX => 1.0,
        -:  375:                                                                                        fY => 0.0,
        -:  376:                                                                                        fZ => 0.0),
        -:  377:                                            fDistanceFromOrigin => 5.0);
        2:  378:      xPlaneCopy.Copy_From(xSourcePlane => xPlaneOriginal);
        -:  379:
        2:  380:      AUnit.Assertions.Assert(Condition => xPlaneOriginal = xPlaneCopy,
        -:  381:                              Message   => "CPlane.Copy_From failed, planes not equal after copy.");
        2:  382:      AUnit.Assertions.Assert(Condition => xPlaneOriginal'Address /= xPlaneCopy'Address,
        -:  383:                              Message   => "CPlane.Copy_From failed, addresses are equal.");
        -:  384:      
        -:  385:
        -:  386:--  begin read only
        2:  387:   end Test_Copy_From;
        -:  388:--  end read only
        -:  389:
        -:  390:
        -:  391:
        -:  392:
        -:  393:end Math.Planes.CPlane_Test_Data.CPlane_Tests;
