        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/quaternions/obj/gnattest/tests/math-quaternions-cquaternion_test_data-cquaternion_tests.adb
        -:    0:Programs:65
        -:    1:--  This package has been generated automatically by GNATtest.
        -:    2:--  You are allowed to add your code to the bodies of test routines.
        -:    3:--  Such changes will be kept during further regeneration of this file.
        -:    4:--  All code placed outside of test routine bodies will be lost. The
        -:    5:--  code intended to set up and tear down the test environment should be
        -:    6:--  placed into Math.Quaternions.CQuaternion_Test_Data.
        -:    7:
        -:    8:with AUnit.Assertions; use AUnit.Assertions;
        -:    9:
        -:   10:package body Math.Quaternions.CQuaternion_Test_Data.CQuaternion_Tests is
        -:   11:
        -:   12:
        -:   13:--  begin read only
        -:   14:   procedure Test_pxGet_Copy (Gnattest_T : in out Test_CQuaternion);
        4:   15:   procedure Test_pxGet_Copy_d4ad30 (Gnattest_T : in out Test_CQuaternion) renames Test_pxGet_Copy;
        -:   16:--  id:2.1/d4ad3014ebf1a501/pxGet_Copy/1/0/
        4:   17:   procedure Test_pxGet_Copy (Gnattest_T : in out Test_CQuaternion) is
        -:   18:   --  math-quaternions.ads:12:4:pxGet_Copy
        -:   19:--  end read only
        -:   20:
        -:   21:      pragma Unreferenced (Gnattest_T);
        -:   22:
        4:   23:      pxTestQuaternion : pCQuaternion;
        4:   24:      pxCopiedQuaternion : pCQuaternion;
        -:   25:      fExpectedXValue : float := 3.0;
        -:   26:      fExpectedYValue : float := 4.0;
        -:   27:      fExpectedZValue : float := -5.0;
        -:   28:      fExpectedWValue : float := 10.0;
        -:   29:   begin
        -:   30:
        4:   31:      pxTestQuaternion := Math.Quaternions.pxCreate(fX => fExpectedXValue,
        -:   32:                                                    fY => fExpectedYValue,
        -:   33:                                                    fZ => fExpectedZValue,
        -:   34:                                                    fW => fExpectedWValue);
        4:   35:      pxCopiedQuaternion := pxTestQuaternion.pxGet_Copy;
        -:   36:
        4:   37:      AUnit.Assertions.Assert(Condition => pxCopiedQuaternion'Address /= pxTestQuaternion'Address,
        -:   38:                              Message   => "CQuaternion.pxGet_Copy failed, pointer to copy is the same as pointer to original.");
        -:   39:
        4:   40:      AUnit.Assertions.Assert(Condition => pxCopiedQuaternion.fX = fExpectedXValue,
        4:   41:                              Message   => "CQuaternion.pxGet_Copy failed, fX got the wrong value. Value:" & float'Image(pxCopiedQuaternion.fX) & ". Expected:" & float'Image(fExpectedXValue) & ".");
        4:   42:      AUnit.Assertions.Assert(Condition => pxCopiedQuaternion.fY = fExpectedYValue,
        4:   43:                              Message   => "CQuaternion.pxGet_Copy failed, fY got the wrong value. Value:" & float'Image(pxCopiedQuaternion.fY) & ". Expected:" & float'Image(fExpectedYValue) & ".");
        4:   44:      AUnit.Assertions.Assert(Condition => pxCopiedQuaternion.fZ = fExpectedZValue,
        4:   45:                              Message   => "CQuaternion.pxGet_Copy failed, fZ got the wrong value. Value:" & float'Image(pxCopiedQuaternion.fZ) & ". Expected:" & float'Image(fExpectedZValue) & ".");
        4:   46:      AUnit.Assertions.Assert(Condition => pxCopiedQuaternion.fW = fExpectedWValue,
        4:   47:                              Message   => "CQuaternion.pxGet_Copy failed, fW got the wrong value. Value:" & float'Image(pxCopiedQuaternion.fW) & ". Expected:" & float'Image(fExpectedWValue) & ".");
        -:   48:--  begin read only
        4:   49:   end Test_pxGet_Copy;
        -:   50:--  end read only
        -:   51:
        -:   52:
        -:   53:--  begin read only
        -:   54:   procedure Test_pxGet_Normalized (Gnattest_T : in out Test_CQuaternion);
        4:   55:   procedure Test_pxGet_Normalized_be75a2 (Gnattest_T : in out Test_CQuaternion) renames Test_pxGet_Normalized;
        -:   56:--  id:2.1/be75a2cbb1bc553a/pxGet_Normalized/1/0/
        4:   57:   procedure Test_pxGet_Normalized (Gnattest_T : in out Test_CQuaternion) is
        -:   58:   --  math-quaternions.ads:21:4:pxGet_Normalized
        -:   59:--  end read only
        -:   60:
        -:   61:      pragma Unreferenced (Gnattest_T);
        -:   62:
        4:   63:      pxTestQuaternion : pCQuaternion;
        4:   64:      pxNormalizedQuaternion : pCQuaternion;
        -:   65:   begin
        -:   66:
        4:   67:      pxTestQuaternion := Math.Quaternions.pxCreate(fX => 15.0,
        -:   68:                                                    fY => 2.0,
        -:   69:                                                    fZ => -15.3,
        -:   70:                                                    fW => 93.0);
        4:   71:      pxNormalizedQuaternion := pxTestQuaternion.pxGet_Normalized;
        -:   72:
        4:   73:      AUnit.Assertions.Assert(Condition => pxTestQuaternion'Address /= pxNormalizedQuaternion'Address,
        -:   74:                              Message   => "CQuaternion.pxGet_Normalized failed, pointer to normalized quaternion is the same as pointer to original quaternion.");
        -:   75:
        -:   76:
        4:   77:      AUnit.Assertions.Assert(Condition => abs(pxNormalizedQuaternion.fGet_Length_Squared - 1.0) < 0.001,
        4:   78:                              Message   => "CQuaternion.pxGet_Normalized failed, length is wrong. Value: " & float'Image(pxNormalizedQuaternion.fGet_Length) & ". Expected: " & float'Image(1.0) & ".");
        8:   79:      AUnit.Assertions.Assert(Condition => abs(pxNormalizedQuaternion.fX - (pxTestQuaternion.fX / pxTestQuaternion.fGet_Length)) < 0.001,
        8:   80:                              Message   => "CQuaternion.pxGet_Normalized failed, fX got wrong value. Value: " & float'Image(pxNormalizedQuaternion.fX) & ". Expected: " & float'Image(pxTestQuaternion.fX / pxTestQuaternion.fGet_Length) & ".");
        8:   81:      AUnit.Assertions.Assert(Condition => abs(pxNormalizedQuaternion.fY - (pxTestQuaternion.fY / pxTestQuaternion.fGet_Length)) < 0.001,
        8:   82:                              Message   => "CQuaternion.pxGet_Normalized failed, fY got wrong value. Value: " & float'Image(pxNormalizedQuaternion.fY) & ". Expected: " & float'Image(pxTestQuaternion.fY / pxTestQuaternion.fGet_Length) & ".");
        8:   83:      AUnit.Assertions.Assert(Condition => abs(pxNormalizedQuaternion.fZ - (pxTestQuaternion.fZ / pxTestQuaternion.fGet_Length)) < 0.001,
        8:   84:                              Message   => "CQuaternion.pxGet_Normalized failed, fZ got wrong value. Value: " & float'Image(pxNormalizedQuaternion.fZ) & ". Expected: " & float'Image(pxTestQuaternion.fZ / pxTestQuaternion.fGet_Length) & ".");
        8:   85:      AUnit.Assertions.Assert(Condition => abs(pxNormalizedQuaternion.fW - (pxTestQuaternion.fW / pxTestQuaternion.fGet_Length)) < 0.001,
        8:   86:                              Message   => "CQuaternion.pxGet_Normalized failed, fW got wrong value. Value: " & float'Image(pxNormalizedQuaternion.fW) & ". Expected: " & float'Image(pxTestQuaternion.fW / pxTestQuaternion.fGet_Length) & ".");
        -:   87:
        -:   88:     -- test exceptions
        4:   89:      pxTestQuaternion := Math.Quaternions.pxCreate(fX => 0.0,
        -:   90:                                                    fY => 0.0,
        -:   91:                                                    fZ => 0.0,
        -:   92:                                                    fW => 0.0);
        4:   93:      pxNormalizedQuaternion := pxTestQuaternion.pxGet_Normalized;
    #####:   94:      AUnit.Assertions.Assert(Condition => False,
        -:   95:                              Message   => "CQuaternion.pxGet_Normalized division by zero failed, should have raised exception");
        -:   96:   exception
        4:   97:      when Numeric_Error =>
        -:   98:         null; -- Test passed
    #####:   99:      when E : others =>
    #####:  100:         AUnit.Assertions.Assert(Condition => False,
    #####:  101:                           Message   =>"CQuaternion.pxGet_Normalized division by zero failed, wrong exception raised: " & Ada.Exceptions.Exception_Name (E) & ". Expected: NUMERIC_ERROR.");
        -:  102:
        -:  103:
        -:  104:
        -:  105:
        -:  106:--  begin read only
        4:  107:   end Test_pxGet_Normalized;
        -:  108:--  end read only
        -:  109:
        -:  110:
        -:  111:--  begin read only
        -:  112:   procedure Test_fGet_Length (Gnattest_T : in out Test_CQuaternion);
        4:  113:   procedure Test_fGet_Length_a40d15 (Gnattest_T : in out Test_CQuaternion) renames Test_fGet_Length;
        -:  114:--  id:2.1/a40d15467fa6b82e/fGet_Length/1/0/
        4:  115:   procedure Test_fGet_Length (Gnattest_T : in out Test_CQuaternion) is
        -:  116:   --  math-quaternions.ads:23:4:fGet_Length
        -:  117:--  end read only
        -:  118:
        -:  119:      pragma Unreferenced (Gnattest_T);
        -:  120:      --(4.3,7.3,-12.3,63.0)
        4:  121:      pxTestQuaternion : pCQuaternion;
        -:  122:   begin
        -:  123:
        4:  124:      pxTestQuaternion := Math.Quaternions.pxCreate(fX => 4.3,
        -:  125:                                                    fY => 7.3,
        -:  126:                                                    fZ => -12.3,
        -:  127:                                                    fW => 63.0);
        -:  128:
        4:  129:      AUnit.Assertions.Assert(Condition => abs(pxTestQuaternion.fGet_Length - 64.7462) < 0.001,
        4:  130:                              Message   => "CQuaternion.pxGet_Length failed, wrong value. Value: " & float'Image(pxTestQuaternion.fGet_Length) & ". Expected: " & float'Image(64.7462) & ".");
        -:  131:
        -:  132:--  begin read only
        4:  133:   end Test_fGet_Length;
        -:  134:--  end read only
        -:  135:
        -:  136:
        -:  137:--  begin read only
        -:  138:   procedure Test_fGet_Length_Squared (Gnattest_T : in out Test_CQuaternion);
        4:  139:   procedure Test_fGet_Length_Squared_4d190d (Gnattest_T : in out Test_CQuaternion) renames Test_fGet_Length_Squared;
        -:  140:--  id:2.1/4d190d2d13e2b130/fGet_Length_Squared/1/0/
        4:  141:   procedure Test_fGet_Length_Squared (Gnattest_T : in out Test_CQuaternion) is
        -:  142:   --  math-quaternions.ads:24:4:fGet_Length_Squared
        -:  143:--  end read only
        -:  144:
        -:  145:      pragma Unreferenced (Gnattest_T);
        -:  146:
        4:  147:      pxTestQuaternion : pCQuaternion;
        -:  148:   begin
        -:  149:
        4:  150:      pxTestQuaternion := Math.Quaternions.pxCreate(fX => 4.3,
        -:  151:                                                    fY => 7.3,
        -:  152:                                                    fZ => -12.3,
        -:  153:                                                    fW => 63.0);
        -:  154:
        4:  155:      AUnit.Assertions.Assert(Condition => abs(pxTestQuaternion.fGet_Length_Squared - 4192.07041444) < 0.001,
        4:  156:                              Message   => "CQuaternion.pxGet_Length_Squared failed, wrong value. Value: " & float'Image(pxTestQuaternion.fGet_Length_Squared) & ". Expected: " & float'Image(4192.07041444) & ".");
        -:  157:
        -:  158:--  begin read only
        4:  159:   end Test_fGet_Length_Squared;
        -:  160:--  end read only
        -:  161:
        -:  162:
        -:  163:--  begin read only
        -:  164:   procedure Test_fGet_X (Gnattest_T : in out Test_CQuaternion);
        4:  165:   procedure Test_fGet_X_42438b (Gnattest_T : in out Test_CQuaternion) renames Test_fGet_X;
        -:  166:--  id:2.1/42438b75dc7e62f2/fGet_X/1/0/
        4:  167:   procedure Test_fGet_X (Gnattest_T : in out Test_CQuaternion) is
        -:  168:   --  math-quaternions.ads:25:4:fGet_X
        -:  169:--  end read only
        -:  170:
        -:  171:      pragma Unreferenced (Gnattest_T);
        -:  172:
        4:  173:      pxTestQuaternion : pCQuaternion;
        -:  174:   begin
        -:  175:
        -:  176:
        4:  177:      pxTestQuaternion := Math.Quaternions.pxCreate(fX => 4.3,
        -:  178:                                                    fY => 7.3,
        -:  179:                                                    fZ => -12.3,
        -:  180:                                                    fW => 63.0);
        -:  181:
        4:  182:      AUnit.Assertions.Assert(Condition => pxTestQuaternion.fGet_X = 4.3,
        4:  183:                              Message   => "CQuaternion.pxGet_X failed, wrong value. Value: " & float'Image(pxTestQuaternion.fGet_X) & ". Expected: " & float'Image(4.3) & ".");
        -:  184:
        -:  185:--  begin read only
        4:  186:   end Test_fGet_X;
        -:  187:--  end read only
        -:  188:
        -:  189:
        -:  190:--  begin read only
        -:  191:   procedure Test_fGet_Y (Gnattest_T : in out Test_CQuaternion);
        4:  192:   procedure Test_fGet_Y_c7b5f1 (Gnattest_T : in out Test_CQuaternion) renames Test_fGet_Y;
        -:  193:--  id:2.1/c7b5f1b72b128413/fGet_Y/1/0/
        4:  194:   procedure Test_fGet_Y (Gnattest_T : in out Test_CQuaternion) is
        -:  195:   --  math-quaternions.ads:26:4:fGet_Y
        -:  196:--  end read only
        -:  197:
        -:  198:      pragma Unreferenced (Gnattest_T);
        -:  199:
        4:  200:      pxTestQuaternion : pCQuaternion;
        -:  201:   begin
        -:  202:
        4:  203:      pxTestQuaternion := Math.Quaternions.pxCreate(fX => 4.3,
        -:  204:                                                    fY => 7.3,
        -:  205:                                                    fZ => -12.3,
        -:  206:                                                    fW => 63.0);
        -:  207:
        4:  208:      AUnit.Assertions.Assert(Condition => pxTestQuaternion.fGet_Y = 7.3,
        4:  209:                              Message   => "CQuaternion.pxGet_Y failed, wrong value. Value: " & float'Image(pxTestQuaternion.fGet_Y) & ". Expected: " & float'Image(7.3) & ".");
        -:  210:
        -:  211:--  begin read only
        4:  212:   end Test_fGet_Y;
        -:  213:--  end read only
        -:  214:
        -:  215:
        -:  216:--  begin read only
        -:  217:   procedure Test_fGet_Z (Gnattest_T : in out Test_CQuaternion);
        4:  218:   procedure Test_fGet_Z_dfd5d9 (Gnattest_T : in out Test_CQuaternion) renames Test_fGet_Z;
        -:  219:--  id:2.1/dfd5d94f2be36c5a/fGet_Z/1/0/
        4:  220:   procedure Test_fGet_Z (Gnattest_T : in out Test_CQuaternion) is
        -:  221:   --  math-quaternions.ads:27:4:fGet_Z
        -:  222:--  end read only
        -:  223:
        -:  224:      pragma Unreferenced (Gnattest_T);
        -:  225:
        4:  226:      pxTestQuaternion : pCQuaternion;
        -:  227:   begin
        -:  228:
        4:  229:      pxTestQuaternion := Math.Quaternions.pxCreate(fX => 4.3,
        -:  230:                                                    fY => 7.3,
        -:  231:                                                    fZ => -12.3,
        -:  232:                                                    fW => 63.0);
        -:  233:
        4:  234:      AUnit.Assertions.Assert(Condition => pxTestQuaternion.fGet_Z = -12.3,
        4:  235:                              Message   => "CQuaternion.pxGet_Z failed, wrong value. Value: " & float'Image(pxTestQuaternion.fGet_Z) & ". Expected: " & float'Image(-12.3) & ".");
        -:  236:
        -:  237:--  begin read only
        4:  238:   end Test_fGet_Z;
        -:  239:--  end read only
        -:  240:
        -:  241:
        -:  242:--  begin read only
        -:  243:   procedure Test_fGet_W (Gnattest_T : in out Test_CQuaternion);
        4:  244:   procedure Test_fGet_W_90387e (Gnattest_T : in out Test_CQuaternion) renames Test_fGet_W;
        -:  245:--  id:2.1/90387ea4bd39b36b/fGet_W/1/0/
        4:  246:   procedure Test_fGet_W (Gnattest_T : in out Test_CQuaternion) is
        -:  247:   --  math-quaternions.ads:28:4:fGet_W
        -:  248:--  end read only
        -:  249:
        -:  250:      pragma Unreferenced (Gnattest_T);
        -:  251:
        4:  252:      pxTestQuaternion : pCQuaternion;
        -:  253:   begin
        -:  254:
        4:  255:      pxTestQuaternion := Math.Quaternions.pxCreate(fX => 4.3,
        -:  256:                                                    fY => 7.3,
        -:  257:                                                    fZ => -12.3,
        -:  258:                                                    fW => 63.0);
        -:  259:
        4:  260:      AUnit.Assertions.Assert(Condition => pxTestQuaternion.fGet_W = 63.0,
        4:  261:                              Message   => "CQuaternion.pxGet_W failed, wrong value. Value: " & float'Image(pxTestQuaternion.fGet_W) & ". Expected: " & float'Image(63.0) & ".");
        -:  262:
        -:  263:--  begin read only
        4:  264:   end Test_fGet_W;
        -:  265:--  end read only
        -:  266:
        -:  267:
        -:  268:--  begin read only
        -:  269:   procedure Test_fGet_Axis_Vector (Gnattest_T : in out Test_CQuaternion);
        4:  270:   procedure Test_fGet_Axis_Vector_cd62fd (Gnattest_T : in out Test_CQuaternion) renames Test_fGet_Axis_Vector;
        -:  271:--  id:2.1/cd62fdaca3d8f8a6/fGet_Axis_Vector/1/0/
        4:  272:   procedure Test_fGet_Axis_Vector (Gnattest_T : in out Test_CQuaternion) is
        -:  273:   --  math-quaternions.ads:29:4:fGet_Axis_Vector
        -:  274:--  end read only
        -:  275:
        -:  276:      pragma Unreferenced (Gnattest_T);
        -:  277:
        4:  278:      pxTestVector : Math.Vectors.pCVector;
        4:  279:      pxTestQuaternion : Math.Quaternions.pCQuaternion;
        4:  280:      pxAxisVector : Math.Vectors.pCVector;
        -:  281:
        -:  282:   begin
        -:  283:
        4:  284:      pxTestVector := Math.Vectors.pxCreate(fX => 4.0,
        -:  285:                                            fY => 16.3,
        -:  286:                                            fZ => -23.0);
        4:  287:      pxTestQuaternion := Math.Quaternions.pxCreate(pxAxisVector    => pxTestVector,
        -:  288:                                                    fAngleInDegrees => 90.0);
        -:  289:
        -:  290:
        4:  291:      pxTestVector := pxTestVector.pxGet_Normalized;
        4:  292:      pxAxisVector := pxTestQuaternion.fGet_Axis_Vector;
        -:  293:
        4:  294:      AUnit.Assertions.Assert(Condition => abs(pxAxisVector.fGet_X - pxTestVector.fGet_X) < 0.001,
        4:  295:                              Message   => "CQuaternion.pxGet_Axis_Vector failed, wrong X value. Value: " & float'Image(pxAxisVector.fGet_X) & ". Expected: " & float'Image(pxTestVector.fGet_X) & ".");
        4:  296:      AUnit.Assertions.Assert(Condition => abs(pxAxisVector.fGet_Y - pxTestVector.fGet_Y) < 0.001,
        4:  297:                              Message   => "CQuaternion.pxGet_Axis_Vector failed, wrong Y value. Value: " & float'Image(pxAxisVector.fGet_Y) & ". Expected: " & float'Image(pxTestVector.fGet_Y) & ".");
        4:  298:      AUnit.Assertions.Assert(Condition => abs(pxAxisVector.fGet_Z - pxTestVector.fGet_Z) < 0.001,
        4:  299:                              Message   => "CQuaternion.pxGet_Axis_Vector failed, wrong Z value. Value: " & float'Image(pxAxisVector.fGet_Z) & ". Expected: " & float'Image(pxTestVector.fGet_Z) & ".");
        -:  300:
        4:  301:      pxTestQuaternion := Math.Quaternions.pxCreate(pxAxisVector    => pxTestVector,
        -:  302:                                                    fAngleInDegrees => 0.0);
        -:  303:
        -:  304:
        4:  305:      pxTestVector := Math.Vectors.pxCreate(fX => 1.0,
        -:  306:                                            fY => 0.0,
        -:  307:                                            fZ => 0.0);
        4:  308:      pxAxisVector := pxTestQuaternion.fGet_Axis_Vector;
        -:  309:
        4:  310:      AUnit.Assertions.Assert(Condition => abs(pxAxisVector.fGet_X - pxTestVector.fGet_X) < 0.001,
        4:  311:                              Message   => "CQuaternion.pxGet_Axis_Vector failed, wrong X value. Value: " & float'Image(pxAxisVector.fGet_X) & ". Expected: " & float'Image(pxTestVector.fGet_X) & ".");
        4:  312:      AUnit.Assertions.Assert(Condition => abs(pxAxisVector.fGet_Y - pxTestVector.fGet_Y) < 0.001,
        4:  313:                              Message   => "CQuaternion.pxGet_Axis_Vector failed, wrong Y value. Value: " & float'Image(pxAxisVector.fGet_Y) & ". Expected: " & float'Image(pxTestVector.fGet_Y) & ".");
        4:  314:      AUnit.Assertions.Assert(Condition => abs(pxAxisVector.fGet_Z - pxTestVector.fGet_Z) < 0.001,
        4:  315:                              Message   => "CQuaternion.pxGet_Axis_Vector failed, wrong Z value. Value: " & float'Image(pxAxisVector.fGet_Z) & ". Expected: " & float'Image(pxTestVector.fGet_Z) & ".");
        -:  316:
        -:  317:--  begin read only
        4:  318:   end Test_fGet_Axis_Vector;
        -:  319:--  end read only
        -:  320:
        -:  321:
        -:  322:--  begin read only
        -:  323:   procedure Test_fGet_Angle_In_Degrees (Gnattest_T : in out Test_CQuaternion);
        4:  324:   procedure Test_fGet_Angle_In_Degrees_ce63d3 (Gnattest_T : in out Test_CQuaternion) renames Test_fGet_Angle_In_Degrees;
        -:  325:--  id:2.1/ce63d3a8aac7255b/fGet_Angle_In_Degrees/1/0/
        4:  326:   procedure Test_fGet_Angle_In_Degrees (Gnattest_T : in out Test_CQuaternion) is
        -:  327:   --  math-quaternions.ads:30:4:fGet_Angle_In_Degrees
        -:  328:--  end read only
        -:  329:
        -:  330:      pragma Unreferenced (Gnattest_T);
        -:  331:
        4:  332:      pxTestQuaternion : Math.Quaternions.pCQuaternion;
        -:  333:      fAngle : float;
        -:  334:   begin
        -:  335:
        4:  336:      fAngle := 43.0;
        4:  337:      pxTestQuaternion := Math.Quaternions.pxCreate(pxAxisVector    => Math.Vectors.pxCreate(fX => 34.0,
        -:  338:                                                                                             fY => 12.0,
        -:  339:                                                                                             fZ => -345.2),
        -:  340:                                                    fAngleInDegrees => fAngle);
        4:  341:      AUnit.Assertions.Assert(Condition => abs(pxTestQuaternion.fGet_Angle_In_Degrees - fAngle) < 0.001,
        4:  342:                              Message   => "CQuaternion.pxGet_Angle_In_Degrees failed, wrong value. Value: " & float'Image(pxTestQuaternion.fGet_Angle_In_Degrees) & ". Expected: " & float'Image(fAngle) & ".");
        -:  343:
        -:  344:--  begin read only
        4:  345:   end Test_fGet_Angle_In_Degrees;
        -:  346:--  end read only
        -:  347:
        -:  348:
        -:  349:
        -:  350:end Math.Quaternions.CQuaternion_Test_Data.CQuaternion_Tests;
