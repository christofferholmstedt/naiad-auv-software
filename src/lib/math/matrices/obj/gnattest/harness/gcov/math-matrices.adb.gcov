        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/matrices/src/math-matrices.adb
        -:    0:Programs:122
        -:    1:with Ada.Numerics;
        -:    2:with Ada.Numerics.Elementary_Functions;
        -:    3:with Math.Angles;
        -:    4:with Ada.Text_IO;
        -:    5:
        -:    6:
        -:    7:package body Math.Matrices is
        -:    8:
        -:    9:
     8000:   10:   function fGet_Determinant (this : in CMatrix) return float is
     8000:   11:      pxXVector : Math.Vectors.pCVector;
     8000:   12:      pxYVector : Math.Vectors.pCVector;
     8000:   13:      pxZVector : Math.Vectors.pCVector;
     8000:   14:      pxMatrix : pCMatrix;
        -:   15:   begin
     8000:   16:      pxXVector := Math.Vectors.pxCreate(1.0,0.0,0.0);
     8000:   17:      pxYVector := Math.Vectors.pxCreate(0.0,1.0,0.0);
     8000:   18:      pxZVector := Math.Vectors.pxCreate(0.0,0.0,1.0);
     8000:   19:      pxMatrix := Math.Matrices.pxCreate(this.tfMatrix);
        -:   20:
     8000:   21:      pxXVector := pxMatrix * pxXVector;
     8000:   22:      pxYVector := pxMatrix * pxYVector;
     8000:   23:      pxZVector := pxMatrix * pxZVector;
        -:   24:
     8000:   25:      return Math.Vectors.fDot_Product(pxXVector, Math.Vectors.pxCross_Product(pxYVector, pxZVector));
        -:   26:   end fGet_Determinant;
        -:   27:
        2:   28:   procedure Copy_From(this : in out CMatrix; pxSourceMatrix : in pCMatrix) is
        -:   29:   begin
        8:   30:      for i in 1 .. 3
        8:   31:      loop
       24:   32:         for j in 1 .. 3
       24:   33:         loop
       18:   34:            this.tfMatrix(i,j) := pxSourceMatrix.tfMatrix(i,j);
       18:   35:         end loop;
        6:   36:      end loop;
        2:   37:   end Copy_From;
        -:   38:
        -:   39:
        -:   40:   ------------------------------
        -:   41:   -- pxCreate_From_Quaternion --
        -:   42:   ------------------------------
     2000:   43:   function tfGet_Raw_Matrix (this : in CMatrix) return TMatrix is
        -:   44:   begin
     2000:   45:      return this.tfMatrix;
        -:   46:   end tfGet_Raw_Matrix;
        -:   47:
       34:   48:   function pxCreate_From_Quaternion
        -:   49:     (pxFromQuaternion : in Math.Quaternions.pCQuaternion)
        -:   50:      return pCMatrix
        -:   51:   is
        -:   52:      tfMatrix : TMatrix;
        -:   53:      fA : float;
        -:   54:      fB : float;
        -:   55:      fC : float;
        -:   56:      fD : float;
        -:   57:   begin
        -:   58:
        -:   59:
       34:   60:      if 1.0 - pxFromQuaternion.fGet_Length_Squared > 0.0001 then
        2:   61:         Ada.Text_IO.Put_Line("Length: " & float'Image(pxFromQuaternion.fGet_Length_Squared));
        2:   62:         raise Numeric_Error;
        -:   63:      end if;
        -:   64:
       32:   65:      fA := pxFromQuaternion.fGet_W;
       32:   66:      fB := pxFromQuaternion.fGet_X;
       32:   67:      fC := pxFromQuaternion.fGet_Y;
       32:   68:      fD := pxFromQuaternion.fGet_Z;
        -:   69:
        -:   70:--      1-2*(fC*fC+fD*fD), 2*(fB*fC-fA*fD),   2*(fB*fD+fA*fC),
        -:   71:--  	2*(fB*fC+fA*fD),   1-2*(fB*fB+fD*fD), 2*(fC*fD-fA*fB),
        -:   72:--  	2*(fB*fD-fA*fC),   2*(fC*fD+fA*fB),   1-2*(fB*fB+fC*fC));
        -:   73:
       32:   74:      tfMatrix(1,1) := 1.0-2.0*(fC*fC+fD*fD);
       32:   75:      tfMatrix(1,2) := 2.0*(fB*fC-fA*fD);
       32:   76:      tfMatrix(1,3) := 2.0*(fB*fD+fA*fC);
        -:   77:
       32:   78:      tfMatrix(2,1) := 2.0*(fB*fC+fA*fD);
       32:   79:      tfMatrix(2,2) := 1.0-2.0*(fB*fB+fD*fD);
       32:   80:      tfMatrix(2,3) := 2.0*(fC*fD-fA*fB);
        -:   81:
       32:   82:      tfMatrix(3,1) := 2.0*(fB*fD-fA*fC);
       32:   83:      tfMatrix(3,2) := 2.0*(fC*fD+fA*fB);
       32:   84:      tfMatrix(3,3) := 1.0-2.0*(fB*fB+fC*fC);
        -:   85:
       32:   86:      return Math.Matrices.pxCreate(tfMatrix);
        -:   87:   end pxCreate_From_Quaternion;
        -:   88:
        -:   89:   -------------------------------------
        -:   90:   -- pxCreate_Rotation_Around_X_Axis --
        -:   91:   -------------------------------------
        -:   92:
   336978:   93:   function pxCreate_Rotation_Around_X_Axis
        -:   94:     (tfAngleInDegrees : in Math.Angles.TAngle)
        -:   95:      return pCMatrix
        -:   96:   is
   336978:   97:      pxNewMatrix : pCMatrix;
        -:   98:      fCosAngle : float;
        -:   99:      fSinAngle : float;
        -:  100:      fAngleInRadians : float;
        -:  101:   begin
   336978:  102:      fAngleInRadians := Math.Angles.fDegrees_To_Radians(Math.Angles.fTAngle_To_FAngle(tfAngleInDegrees));
   336978:  103:      fCosAngle := Ada.Numerics.Elementary_Functions.Cos(fAngleInRadians);
   336978:  104:      fSinAngle := Ada.Numerics.Elementary_Functions.Sin(fAngleInRadians);
        -:  105:
   336978:  106:      pxNewMatrix := new CMatrix;
        -:  107:
   336978:  108:      pxNewMatrix.tfMatrix := ( (1.0, 0.0, 0.0),
   336978:  109:                                (0.0, fCosAngle, -fSinAngle),
        -:  110:                                (0.0, fSinAngle, fCosAngle));
   336978:  111:      return pxNewMatrix;
        -:  112:   end pxCreate_Rotation_Around_X_Axis;
        -:  113:
        -:  114:
    56562:  115:   function pxCreate
        -:  116:     (tfMatrix : in TMatrix)
        -:  117:      return pCMatrix
        -:  118:   is
    56562:  119:      pxNewMatrix : pCMatrix;
        -:  120:   begin
    56562:  121:      pxNewMatrix := new CMatrix;
    56562:  122:      pxNewMatrix.tfMatrix := tfMatrix;
    56562:  123:      return pxNewMatrix;
        -:  124:   end pxCreate;
        -:  125:
        -:  126:
        -:  127:   -------------------------------------
        -:  128:   -- pxCreate_Rotation_Around_Y_Axis --
        -:  129:   -------------------------------------
        -:  130:
   336978:  131:   function pxCreate_Rotation_Around_Y_Axis
        -:  132:     (tfAngleInDegrees : in Math.Angles.TAngle)
        -:  133:      return pCMatrix
        -:  134:   is
   336978:  135:      pxNewMatrix : pCMatrix;
        -:  136:      fCosAngle : float;
        -:  137:      fSinAngle : float;
        -:  138:      fAngleInRadians : float;
        -:  139:   begin
   336978:  140:      fAngleInRadians := Math.Angles.fDegrees_To_Radians(Math.Angles.fTAngle_To_FAngle(tfAngleInDegrees));
   336978:  141:      fCosAngle := Ada.Numerics.Elementary_Functions.Cos(fAngleInRadians);
   336978:  142:      fSinAngle := Ada.Numerics.Elementary_Functions.Sin(fAngleInRadians);
        -:  143:
   336978:  144:      pxNewMatrix := new CMatrix;
        -:  145:
   336978:  146:      pxNewMatrix.tfMatrix := ( (fCosAngle, 0.0, fSinAngle),
        -:  147:                                (0.0, 1.0, 0.0),
   336978:  148:                                (-fSinAngle, 0.0, fCosAngle));
   336978:  149:      return pxNewMatrix;
        -:  150:   end pxCreate_Rotation_Around_Y_Axis;
        -:  151:
        -:  152:
        -:  153:   -------------------------------------
        -:  154:   -- pxCreate_Rotation_Around_Z_Axis --
        -:  155:   -------------------------------------
        -:  156:
    16986:  157:   function pxCreate_Rotation_Around_Z_Axis
        -:  158:     (tfAngleInDegrees : in Math.Angles.TAngle)
        -:  159:      return pCMatrix
        -:  160:   is
    16986:  161:      pxNewMatrix : pCMatrix;
        -:  162:      fCosAngle : float;
        -:  163:      fSinAngle : float;
        -:  164:      fAngleInRadians : float;
        -:  165:   begin
    16986:  166:      fAngleInRadians := Math.Angles.fDegrees_To_Radians(Math.Angles.fTAngle_To_FAngle(tfAngleInDegrees));
    16986:  167:      fCosAngle := Ada.Numerics.Elementary_Functions.Cos(fAngleInRadians);
    16986:  168:      fSinAngle := Ada.Numerics.Elementary_Functions.Sin(fAngleInRadians);
        -:  169:
    16986:  170:      pxNewMatrix := new CMatrix;
        -:  171:
    16986:  172:      pxNewMatrix.tfMatrix := ( (fCosAngle, -fSinAngle, 0.0),
        -:  173:                                (fSinAngle, fCosAngle, 0.0),
        -:  174:                                (0.0, 0.0, 1.0));
    16986:  175:      return pxNewMatrix;
        -:  176:   end pxCreate_Rotation_Around_Z_Axis;
        -:  177:
        -:  178:
        -:  179:
        -:  180:   -----------------------
        -:  181:   -- pxCreate_Identity --
        -:  182:   -----------------------
        -:  183:
       20:  184:   function pxCreate_Identity return pCMatrix is
       20:  185:      pxNewMatrix : pCMatrix;
        -:  186:   begin
       20:  187:      pxNewMatrix := new CMatrix;
       20:  188:      pxNewMatrix.tfMatrix := ((1.0,0.0,0.0),(0.0,1.0,0.0),(0.0,0.0,1.0));
       20:  189:      return pxNewMatrix;
        -:  190:   end pxCreate_Identity;
        -:  191:
        -:  192:
        -:  193:
        -:  194:
    12004:  195:   function "=" (pxLeftOperandMatrix : in pCMatrix; pxRightOperandMatrix : in pCMatrix) return boolean is
        -:  196:   begin
    48010:  197:      for iY in 1 .. 3
    48010:  198:      loop
   144026:  199:         for iX in 1 .. 3
   144026:  200:         loop
   108020:  201:            if abs(pxLeftOperandMatrix.tfMatrix(iY, iX) - pxRightOperandMatrix.tfMatrix(iY, iX)) > 0.000001 then
        2:  202:               return false;
        -:  203:            end if;
   108018:  204:         end loop;
    36006:  205:      end loop;
    12002:  206:      return true;
        -:  207:
        -:  208:--        exception
        -:  209:--           when CONSTRAINT_ERROR => return false;
        -:  210:   end "=";
        -:  211:
        -:  212:
        -:  213:
        -:  214:   ---------
        -:  215:   -- "*" --
        -:  216:   ---------
        -:  217:
    40522:  218:   function "*"
        -:  219:     (pxLeftOperandMatrix : in pCMatrix;
        -:  220:      pxRightOperandMatrix : in pCMatrix)
        -:  221:      return pCMatrix
        -:  222:   is
        -:  223:      tfMatrix : TMatrix;
        -:  224:   begin
   162088:  225:      tfMatrix := (( (pxLeftOperandMatrix.tfMatrix(1,1) * pxRightOperandMatrix.tfMatrix(1,1)) +
   121566:  226:                   (pxLeftOperandMatrix.tfMatrix(1,2) * pxRightOperandMatrix.tfMatrix(2,1)) +
    81044:  227:                   (pxLeftOperandMatrix.tfMatrix(1,3) * pxRightOperandMatrix.tfMatrix(3,1)),
        -:  228:
   121566:  229:                   (pxLeftOperandMatrix.tfMatrix(1,1) * pxRightOperandMatrix.tfMatrix(1,2)) +
   121566:  230:                   (pxLeftOperandMatrix.tfMatrix(1,2) * pxRightOperandMatrix.tfMatrix(2,2)) +
    81044:  231:                   (pxLeftOperandMatrix.tfMatrix(1,3) * pxRightOperandMatrix.tfMatrix(3,2)),
        -:  232:
   121566:  233:                   (pxLeftOperandMatrix.tfMatrix(1,1) * pxRightOperandMatrix.tfMatrix(1,3)) +
   121566:  234:                   (pxLeftOperandMatrix.tfMatrix(1,2) * pxRightOperandMatrix.tfMatrix(2,3)) +
    81044:  235:                   (pxLeftOperandMatrix.tfMatrix(1,3) * pxRightOperandMatrix.tfMatrix(3,3))),
        -:  236:
   121566:  237:                   ( (pxLeftOperandMatrix.tfMatrix(2,1) * pxRightOperandMatrix.tfMatrix(1,1)) +
   121566:  238:                   (pxLeftOperandMatrix.tfMatrix(2,2) * pxRightOperandMatrix.tfMatrix(2,1)) +
    81044:  239:                   (pxLeftOperandMatrix.tfMatrix(2,3) * pxRightOperandMatrix.tfMatrix(3,1)),
        -:  240:
   121566:  241:                   (pxLeftOperandMatrix.tfMatrix(2,1) * pxRightOperandMatrix.tfMatrix(1,2)) +
   121566:  242:                   (pxLeftOperandMatrix.tfMatrix(2,2) * pxRightOperandMatrix.tfMatrix(2,2)) +
    81044:  243:                   (pxLeftOperandMatrix.tfMatrix(2,3) * pxRightOperandMatrix.tfMatrix(3,2)),
        -:  244:
   121566:  245:                   (pxLeftOperandMatrix.tfMatrix(2,1) * pxRightOperandMatrix.tfMatrix(1,3)) +
   121566:  246:                   (pxLeftOperandMatrix.tfMatrix(2,2) * pxRightOperandMatrix.tfMatrix(2,3)) +
    81044:  247:                   (pxLeftOperandMatrix.tfMatrix(2,3) * pxRightOperandMatrix.tfMatrix(3,3))),
        -:  248:
   121566:  249:                  ( (pxLeftOperandMatrix.tfMatrix(3,1) * pxRightOperandMatrix.tfMatrix(1,1)) +
   121566:  250:                   (pxLeftOperandMatrix.tfMatrix(3,2) * pxRightOperandMatrix.tfMatrix(2,1)) +
    81044:  251:                   (pxLeftOperandMatrix.tfMatrix(3,3) * pxRightOperandMatrix.tfMatrix(3,1)),
        -:  252:
   121566:  253:                   (pxLeftOperandMatrix.tfMatrix(3,1) * pxRightOperandMatrix.tfMatrix(1,2)) +
   121566:  254:                   (pxLeftOperandMatrix.tfMatrix(3,2) * pxRightOperandMatrix.tfMatrix(2,2)) +
    81044:  255:                   (pxLeftOperandMatrix.tfMatrix(3,3) * pxRightOperandMatrix.tfMatrix(3,2)),
        -:  256:
   121566:  257:                   (pxLeftOperandMatrix.tfMatrix(3,1) * pxRightOperandMatrix.tfMatrix(1,3)) +
   121566:  258:                   (pxLeftOperandMatrix.tfMatrix(3,2) * pxRightOperandMatrix.tfMatrix(2,3)) +
    81044:  259:                   (pxLeftOperandMatrix.tfMatrix(3,3) * pxRightOperandMatrix.tfMatrix(3,3)))
        -:  260:
        -:  261:                  );
    40522:  262:      return Math.Matrices.pxCreate(tfMatrix => tfMatrix);
        -:  263:   end "*";
        -:  264:
        -:  265:   ---------
        -:  266:   -- "*" --
        -:  267:   ---------
        -:  268:
   666196:  269:   function "*"
        -:  270:     (pxLeftOperandMatrix : in pCMatrix;
        -:  271:      pxRightOperandVector : in Math.Vectors.pCVector)
        -:  272:      return Math.Vectors.pCVector
        -:  273:   is
   666196:  274:      pxProductVector : Math.Vectors.pCVector;
        -:  275:   begin
   666196:  276:      pxProductVector := Math.Vectors.pxCreate(fX =>
  1998588:  277:                                                 ( (pxLeftOperandMatrix.tfMatrix(1,1) * pxRightOperandVector.fGet_X) +
  1998588:  278:                                                  (pxLeftOperandMatrix.tfMatrix(1,2) * pxRightOperandVector.fGet_Y) +
  1332392:  279:                                                  (pxLeftOperandMatrix.tfMatrix(1,3) * pxRightOperandVector.fGet_Z) ),
        -:  280:
        -:  281:                                               fY =>
  1998588:  282:                                                 ( (pxLeftOperandMatrix.tfMatrix(2,1) * pxRightOperandVector.fGet_X) +
  1998588:  283:                                                  (pxLeftOperandMatrix.tfMatrix(2,2) * pxRightOperandVector.fGet_Y) +
  1332392:  284:                                                  (pxLeftOperandMatrix.tfMatrix(2,3) * pxRightOperandVector.fGet_Z) ),
        -:  285:
        -:  286:                                               fZ =>
  1998588:  287:                                                 ( (pxLeftOperandMatrix.tfMatrix(3,1) * pxRightOperandVector.fGet_X) +
  1998588:  288:                                                  (pxLeftOperandMatrix.tfMatrix(3,2) * pxRightOperandVector.fGet_Y) +
  1332392:  289:                                                  (pxLeftOperandMatrix.tfMatrix(3,3) * pxRightOperandVector.fGet_Z) ));
        -:  290:
   666196:  291:      return pxProductVector;
        -:  292:   end "*";
        -:  293:
        -:  294:
        -:  295:   ---------
        -:  296:   -- "*" --
        -:  297:   ---------
        -:  298:
        2:  299:   function "*"
        -:  300:     (pxLeftOperandMatrix : in pCMatrix;
        -:  301:      pxRightOperandPlane : in Math.Planes.pCPlane)
        -:  302:      return Math.Planes.pCPlane
        -:  303:   is
        2:  304:      pxNewNormal : Math.Vectors.pCVector;
        -:  305:   begin
        2:  306:      pxNewNormal := pxLeftOperandMatrix * pxRightOperandPlane.pxGet_Normal_Vector;
        2:  307:      return Math.Planes.pxCreate(pxNormalVector      => pxNewNormal,
        2:  308:                                  fDistanceFromOrigin => pxRightOperandPlane.fGet_Distance_From_Origin);
        -:  309:   end "*";
        -:  310:
        -:  311:   -------------------
        -:  312:   -- pxGet_Inverse --
        -:  313:   -------------------
        -:  314:
    27018:  315:   procedure Swap_Values_In_Extended_Matrix(fValue1 : in out float; fValue2 : in out float) is
        -:  316:      fTemp : float;
        -:  317:   begin
    27018:  318:      fTemp := fValue1;
    27018:  319:      fValue1 := fValue2;
    27018:  320:      fValue2 := fTemp;
    27018:  321:   end Swap_Values_In_Extended_Matrix;
        -:  322:
     4436:  323:   procedure Swap_Rows_In_Extended_Matrix(tfExtendedMatrix : in out TExtendedMatrix; iRow1 : in integer; iRow2 : in integer) is
        -:  324:   begin
    31052:  325:      for col in 1 .. 6
    31052:  326:      loop
    53232:  327:         Swap_Values_In_Extended_Matrix(fValue1 => tfExtendedMatrix(iRow1,col),
    26616:  328:                                        fValue2 => tfExtendedMatrix(iRow2,col));
    26616:  329:      end loop;
     4436:  330:   end Swap_Rows_In_Extended_Matrix;
        -:  331:
    12010:  332:   procedure Scale_Row_In_Extended_Matrix(tfExtendedMatrix : in out TExtendedMatrix; iStartingColumn : in integer) is
    12010:  333:      iY : integer := iStartingColumn;
        -:  334:   begin
    60052:  335:      for iX in reverse iStartingColumn .. 6
    60052:  336:      loop
    60052:  337:         tfExtendedMatrix(iY, iX) := tfExtendedMatrix(iY, iX) / tfExtendedMatrix(iY, iStartingColumn);
    48042:  338:      end loop;
    12010:  339:   end Scale_Row_In_Extended_Matrix;
        -:  340:
    12006:  341:   procedure Remove_Component_In_Following_Rows(tfExtendedMatrix : in out TExtendedMatrix; iRow : in integer) is
        -:  342:   begin
    24016:  343:      for iY in iRow+1 .. 3
    24016:  344:      loop
    68058:  345:         for iX in reverse iRow .. 6
    68058:  346:         loop
    68058:  347:            tfExtendedMatrix(iY, iX) := tfExtendedMatrix(iY, iX) - (tfExtendedMatrix(iRow, iX) * tfExtendedMatrix(iY, iRow));
    56048:  348:         end loop;
    12010:  349:      end loop;
    12006:  350:   end Remove_Component_In_Following_Rows;
        -:  351:
        -:  352:
    12006:  353:   procedure Remove_Component_In_Leading_Rows(tfExtendedMatrix : in out TExtendedMatrix; iRow : in integer) is
        -:  354:   begin
    24010:  355:      for iY in reverse 1 .. (iRow-1)
    24010:  356:      loop
    52020:  357:         for iX in reverse iRow .. 6
    52020:  358:         loop
    52020:  359:            tfExtendedMatrix(iY, iX) := tfExtendedMatrix(iY, iX) - (tfExtendedMatrix(iRow, iX) * tfExtendedMatrix(iY, iRow));
    40016:  360:         end loop;
    12004:  361:      end loop;
    12006:  362:   end Remove_Component_In_Leading_Rows;
        -:  363:
    12012:  364:   function Find_Row_With_Highest_Component(tfExtendedMatrix : in TExtendedMatrix; iColumn : in integer) return integer is
    12012:  365:      iMaxValueComponent : integer := iColumn;
        -:  366:   begin
    24024:  367:      for iRow in iColumn+1 .. 3
    24024:  368:      loop
    12012:  369:         if abs(tfExtendedMatrix(iRow, iColumn)) > abs(tfExtendedMatrix(iMaxValueComponent, iColumn)) then
     5062:  370:            iMaxValueComponent := iRow;
        -:  371:         end if;
    12012:  372:      end loop;
    12012:  373:      return iMaxValueComponent;
        -:  374:   end Find_Row_With_Highest_Component;
        -:  375:
    12014:  376:   function bMatrix_Has_No_Inverse(fValue : in float) return boolean is
        -:  377:   begin
    12014:  378:      if abs(fValue) > 0.0 then
    12008:  379:         return false;
        -:  380:      end if;
        6:  381:      return true;
        -:  382:   end bMatrix_Has_No_Inverse;
        -:  383:
        -:  384:
     4002:  385:   procedure Perform_Gauss_Jordan_Elimination_On(tfExtendedMatrix : in out TExtendedMatrix) is
        -:  386:      iRowWithMaxComponent : integer;
        -:  387:   begin
        -:  388:
    16006:  389:      for iRowAndColumn in 1 .. 3
    16006:  390:      loop
    12006:  391:         iRowWithMaxComponent := Find_Row_With_Highest_Component(tfExtendedMatrix => tfExtendedMatrix,
        -:  392:                                                                 iColumn          => iRowAndColumn);
        -:  393:
    12006:  394:         if bMatrix_Has_No_Inverse(tfExtendedMatrix(iRowWithMaxComponent, iRowAndColumn)) then
        2:  395:            raise Numeric_Error;
        -:  396:         end if;
        -:  397:
    12004:  398:         if iRowWithMaxComponent /= iRowAndColumn then
     4418:  399:            Swap_Rows_In_Extended_Matrix(tfExtendedMatrix => tfExtendedMatrix,
        -:  400:                                         iRow1            => iRowAndColumn,
        -:  401:                                         iRow2            => iRowWithMaxComponent);
        -:  402:         end if;
        -:  403:
        -:  404:
    12004:  405:         Scale_Row_In_Extended_Matrix(tfExtendedMatrix => tfExtendedMatrix,
        -:  406:                                      iStartingColumn  => iRowAndColumn);
        -:  407:
        -:  408:
        -:  409:
    12004:  410:         Remove_Component_In_Following_Rows(tfExtendedMatrix => tfExtendedMatrix,
        -:  411:                                            iRow             => iRowAndColumn);
        -:  412:
    12004:  413:         Remove_Component_In_Leading_Rows(tfExtendedMatrix => tfExtendedMatrix,
        -:  414:                                          iRow             => iRowAndColumn);
        -:  415:
    12004:  416:      end loop;
        -:  417:
     4000:  418:   end Perform_Gauss_Jordan_Elimination_On;
        -:  419:
     4128:  420:   function tfGet_Inverse_Part_From(tfExtendedMatrix : in TExtendedMatrix) return TMatrix is
        -:  421:      tfInverse : TMatrix;
        -:  422:   begin
    16512:  423:      for iY in 1 .. 3
    16512:  424:      loop
    49536:  425:         for iX in 1 .. 3
    49536:  426:         loop
    37152:  427:            tfInverse(iY, iX) := tfExtendedMatrix(iY, iX+3);
    37152:  428:         end loop;
    12384:  429:      end loop;
        -:  430:
     4128:  431:      return tfInverse;
        -:  432:   end tfGet_Inverse_Part_From;
        -:  433:
        -:  434:
     4258:  435:   function tfCreate_Extended_Matrix_From(tfMatrix : in TMatrix) return TExtendedMatrix is
        -:  436:      tfExtendedMatrix : TExtendedMatrix;
        -:  437:   begin
    17032:  438:      for iY in 1 .. 3
    17032:  439:      loop
    51096:  440:         for iX in 1 .. 3
    51096:  441:         loop
    38322:  442:            tfExtendedMatrix(iY, iX) := tfMatrix(iY, iX);
    38322:  443:            tfExtendedMatrix(iY, iX+3) := 0.0;
    38322:  444:         end loop;
    12774:  445:         tfExtendedMatrix(iY,iY+3) := 1.0;
    12774:  446:      end loop;
     4258:  447:      return tfExtendedMatrix;
        -:  448:   end tfCreate_Extended_Matrix_From;
        -:  449:
        -:  450:
     2000:  451:   function pxGet_Inverse (this : in CMatrix) return pCMatrix is
        -:  452:      tfExtendedMatrix : TExtendedMatrix;
        -:  453:   begin
     2000:  454:      tfExtendedMatrix := tfCreate_Extended_Matrix_From(tfMatrix => this.tfMatrix);
        -:  455:
     2000:  456:      Perform_Gauss_Jordan_Elimination_On(tfExtendedMatrix => tfExtendedMatrix);
        -:  457:
     2000:  458:      return Math.Matrices.pxCreate(tfMatrix => tfGet_Inverse_Part_From(tfExtendedMatrix => tfExtendedMatrix));
        -:  459:   end pxGet_Inverse;
        -:  460:
        -:  461:   ----------------
        -:  462:   -- pxGet_Copy --
        -:  463:   ----------------
        -:  464:
     2000:  465:   function pxGet_Copy (this : in CMatrix) return pCMatrix is
        -:  466:   begin
     2000:  467:      return Math.Matrices.pxCreate(tfMatrix => this.tfMatrix);
        -:  468:   end pxGet_Copy;
        -:  469:
        -:  470:   ---------------------
        -:  471:   -- pxGet_Transpose --
        -:  472:   ---------------------
        -:  473:
     2000:  474:   function pxGet_Transpose (this : in CMatrix) return pCMatrix is
        -:  475:      tfTranspose : TMatrix;
        -:  476:   begin
        -:  477:
        -:  478:
     8000:  479:      for i in 1 .. 3
     8000:  480:      loop
    24000:  481:         for j in 1 .. 3
    24000:  482:         loop
    18000:  483:            tfTranspose(i,j) := this.tfMatrix(j,i);
    18000:  484:         end loop;
     6000:  485:      end loop;
        -:  486:
     2000:  487:      return Math.Matrices.pxCreate(tfTranspose);
        -:  488:   end pxGet_Transpose;
        -:  489:
        -:  490:
        2:  491:   function pxGet_X_Vector (this : in CMatrix) return Math.Vectors.pCVector is
        2:  492:      pxXVector : Math.Vectors.pCVector;
        -:  493:   begin
        2:  494:      pxXVector := Math.Vectors.pxCreate(fX => this.tfMatrix(1,1),
        -:  495:                                         fY => this.tfMatrix(1,2),
        -:  496:                                         fZ => this.tfMatrix(1,3));
        2:  497:      return pxXVector;
        -:  498:   end pxGet_X_Vector;
        -:  499:
        2:  500:   function pxGet_Y_Vector (this : in CMatrix) return Math.Vectors.pCVector is
        2:  501:      pxYVector : Math.Vectors.pCVector;
        -:  502:   begin
        2:  503:      pxYVector := Math.Vectors.pxCreate(fX => this.tfMatrix(2,1),
        -:  504:                                         fY => this.tfMatrix(2,2),
        -:  505:                                         fZ => this.tfMatrix(2,3));
        2:  506:      return pxYVector;
        -:  507:   end pxGet_Y_Vector;
        -:  508:
        2:  509:   function pxGet_Z_Vector (this : in CMatrix) return Math.Vectors.pCVector is
        2:  510:      pxZVector : Math.Vectors.pCVector;
        -:  511:   begin
        2:  512:      pxZVector := Math.Vectors.pxCreate(fX => this.tfMatrix(3,1),
        -:  513:                                         fY => this.tfMatrix(3,2),
        -:  514:                                         fZ => this.tfMatrix(3,3));
        2:  515:      return pxZVector;
        -:  516:   end pxGet_Z_Vector;
        -:  517:end Math.Matrices;
