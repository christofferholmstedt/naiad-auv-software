        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/matrices/obj/gnattest/tests/math-matrices-cmatrix_test_data-cmatrix_tests.adb
        -:    0:Programs:122
        -:    1:--  This package has been generated automatically by GNATtest.
        -:    2:--  You are allowed to add your code to the bodies of test routines.
        -:    3:--  Such changes will be kept during further regeneration of this file.
        -:    4:--  All code placed outside of test routine bodies will be lost. The
        -:    5:--  code intended to set up and tear down the test environment should be
        -:    6:--  placed into Math.Matrices.CMatrix_Test_Data.
        -:    7:
        -:    8:with AUnit.Assertions; use AUnit.Assertions;
        -:    9:
        -:   10:package body Math.Matrices.CMatrix_Test_Data.CMatrix_Tests is
        -:   11:
        -:   12:
        -:   13:--  begin read only
        -:   14:   procedure Test_pxGet_Inverse (Gnattest_T : in out Test_CMatrix);
        4:   15:   procedure Test_pxGet_Inverse_4c7f5a (Gnattest_T : in out Test_CMatrix) renames Test_pxGet_Inverse;
        -:   16:--  id:2.1/4c7f5ab12bd672d4/pxGet_Inverse/1/0/
        4:   17:   procedure Test_pxGet_Inverse (Gnattest_T : in out Test_CMatrix) is
        -:   18:   --  math-matrices.ads:28:4:pxGet_Inverse
        -:   19:--  end read only
        -:   20:
        -:   21:      pragma Unreferenced (Gnattest_T);
        -:   22:
        4:   23:      pxOriginalMatrix : pCMatrix;
        4:   24:      pxInverseMatrix : pCMatrix;
        4:   25:      pxIdentityMatrix : pCMatrix;
        -:   26:      tfXRotAngle : Math.Angles.TAngle;
        -:   27:      tfYRotAngle : Math.Angles.TAngle;
        -:   28:      tfZRotAngle : Math.Angles.TAngle;
        -:   29:   begin
        -:   30:
        4:   31:      pxIdentityMatrix := pxCreate_Identity;
        4:   32:      for iXRot in 1 .. 10
       40:   33:      loop
       40:   34:         tfXRotAngle := Math.Angles.TAngle(float(36 * iXRot - 180) );
      400:   35:         for iYRot in 1 .. 10
      400:   36:         loop
      400:   37:            tfYRotAngle := Math.Angles.TAngle(float(36 * iYRot - 180));
     4000:   38:            for iZRot in 1 .. 10
     4000:   39:            loop
     4000:   40:               tfZRotAngle := Math.Angles.TAngle(float(36 * iZRot - 180));
     4000:   41:               pxOriginalMatrix := pxCreate_Rotation_Around_Z_Axis(tfZRotAngle) *
     4000:   42:                 pxCreate_Rotation_Around_Y_Axis(tfYRotAngle) *
     4000:   43:                 pxCreate_Rotation_Around_X_Axis(tfXRotAngle);
        -:   44:
     4000:   45:               if abs(pxOriginalMatrix.fGet_Determinant) = 0.0 then
        -:   46:                  -- raise expection
        -:   47:                  null;
        -:   48:               else
     4000:   49:                  pxInverseMatrix := pxOriginalMatrix.pxGet_Inverse;
        -:   50:
     4000:   51:                  AUnit.Assertions.Assert(Condition => pxOriginalMatrix * pxInverseMatrix = pxIdentityMatrix,
     4000:   52:                                          Message => "CMatrix.pxGet_Inverse failed, M * M-1 != I. Values: " & float'Image(float(tfXRotAngle)) & float'Image(float(tfYRotAngle)) & float'Image(float(tfZRotAngle)));
     4000:   53:                  AUnit.Assertions.Assert(Condition => pxInverseMatrix * pxOriginalMatrix = pxIdentityMatrix,
     4000:   54:                                          Message => "CMatrix.pxGet_Inverse failed, M-1 * M != I. Values: " & float'Image(float(tfXRotAngle)) & float'Image(float(tfYRotAngle)) & float'Image(float(tfZRotAngle)));
        -:   55:               end if;
        -:   56:
        -:   57:            end loop;
        -:   58:
        -:   59:         end loop;
        -:   60:      end loop;
        -:   61:
        -:   62:
        -:   63:
        -:   64:
        -:   65:
        -:   66:--  begin read only
        4:   67:   end Test_pxGet_Inverse;
        -:   68:--  end read only
        -:   69:
        -:   70:
        -:   71:--  begin read only
        -:   72:   procedure Test_pxGet_Copy (Gnattest_T : in out Test_CMatrix);
        4:   73:   procedure Test_pxGet_Copy_3c9397 (Gnattest_T : in out Test_CMatrix) renames Test_pxGet_Copy;
        -:   74:--  id:2.1/3c9397de3adc8e2e/pxGet_Copy/1/0/
        4:   75:   procedure Test_pxGet_Copy (Gnattest_T : in out Test_CMatrix) is
        -:   76:   --  math-matrices.ads:29:4:pxGet_Copy
        -:   77:--  end read only
        -:   78:
        -:   79:      pragma Unreferenced (Gnattest_T);
        -:   80:
        4:   81:      pxOriginalMatrix : pCMatrix;
        4:   82:      pxCopyMatrix : pCMatrix;
        -:   83:      tfXRotAngle : Math.Angles.TAngle;
        -:   84:      tfYRotAngle : Math.Angles.TAngle;
        -:   85:      tfZRotAngle : Math.Angles.TAngle;
        -:   86:   begin
        -:   87:
        4:   88:      for iXRot in 1 .. 10
       40:   89:      loop
       40:   90:         tfXRotAngle := Math.Angles.TAngle(float(36 * iXRot - 180));
      400:   91:         for iYRot in 1 .. 10
      400:   92:         loop
      400:   93:            tfYRotAngle := Math.Angles.TAngle(float(36 * iYRot - 180));
     4000:   94:            for iZRot in 1 .. 10
     4000:   95:            loop
     4000:   96:               tfZRotAngle := Math.Angles.TAngle(float(36 * iZRot - 180));
     4000:   97:               pxOriginalMatrix := pxCreate_Rotation_Around_Z_Axis(tfZRotAngle) *
     4000:   98:                 pxCreate_Rotation_Around_Y_Axis(tfYRotAngle) *
     4000:   99:                 pxCreate_Rotation_Around_X_Axis(tfXRotAngle);
        -:  100:
     4000:  101:              pxCopyMatrix := pxOriginalMatrix.pxGet_Copy;
        -:  102:
     4000:  103:                  AUnit.Assertions.Assert(Condition => pxOriginalMatrix = pxCopyMatrix,
     4000:  104:                                          Message => "CMatrix.pxGet_Copy failed, Values: " & float'Image(float(tfXRotAngle)) & float'Image(float(tfYRotAngle)) & float'Image(float(tfZRotAngle)));
        -:  105:            end loop;
        -:  106:
        -:  107:         end loop;
        -:  108:      end loop;
        -:  109:
        -:  110:--  begin read only
        4:  111:   end Test_pxGet_Copy;
        -:  112:--  end read only
        -:  113:
        -:  114:
        -:  115:--  begin read only
        -:  116:   procedure Test_pxGet_Transpose (Gnattest_T : in out Test_CMatrix);
        4:  117:   procedure Test_pxGet_Transpose_88bdfe (Gnattest_T : in out Test_CMatrix) renames Test_pxGet_Transpose;
        -:  118:--  id:2.1/88bdfed098f158c5/pxGet_Transpose/1/0/
        4:  119:   procedure Test_pxGet_Transpose (Gnattest_T : in out Test_CMatrix) is
        -:  120:   --  math-matrices.ads:30:4:pxGet_Transpose
        -:  121:--  end read only
        -:  122:
        -:  123:      pragma Unreferenced (Gnattest_T);
        -:  124:
        4:  125:      pxOriginalMatrix : pCMatrix;
        4:  126:     pxTransposeMatrix : pCMatrix;
        -:  127:      tfXRotAngle : Math.Angles.TAngle;
        -:  128:      tfYRotAngle : Math.Angles.TAngle;
        -:  129:      tfZRotAngle : Math.Angles.TAngle;
        -:  130:   begin
        -:  131:
        4:  132:      for iXRot in 1 .. 10
       40:  133:      loop
       40:  134:         tfXRotAngle := Math.Angles.TAngle(float(36 * iXRot - 180));
      400:  135:         for iYRot in 1 .. 10
      400:  136:         loop
      400:  137:            tfYRotAngle := Math.Angles.TAngle(float(36 * iYRot - 180));
     4000:  138:            for iZRot in 1 .. 10
     4000:  139:            loop
     4000:  140:               tfZRotAngle := Math.Angles.TAngle(float(36 * iZRot - 180));
     4000:  141:                 pxOriginalMatrix := pxCreate_Rotation_Around_Z_Axis(tfZRotAngle) *
     4000:  142:                   pxCreate_Rotation_Around_Y_Axis(tfYRotAngle) *
     4000:  143:                   pxCreate_Rotation_Around_X_Axis(tfXRotAngle);
        -:  144:
     4000:  145:               pxTransposeMatrix := pxOriginalMatrix.pxGet_Transpose;
        -:  146:
     4000:  147:               for i in 1 ..3
    12000:  148:               loop
    12000:  149:                  for j in 1 .. 3
    36000:  150:                  loop
    36000:  151:                     AUnit.Assertions.Assert(Condition => pxOriginalMatrix.tfMatrix(i,j) = pxTransposeMatrix.tfMatrix(j,i),
    36000:  152:                                             Message => "CMatrix.pxGet_Transpose failed, wrong value in (" & integer'Image(j) & "," & integer'Image(i) & "). Value: " & float'Image(float(pxTransposeMatrix.tfMatrix(j,i))) & ". Expected: " & float'Image(float(pxOriginalMatrix.tfMatrix(i,j))) & ".");
        -:  153:                  end loop;
        -:  154:               end loop;
        -:  155:
        -:  156:            end loop;
        -:  157:
        -:  158:         end loop;
        -:  159:      end loop;
        -:  160:
        -:  161:--  begin read only
        4:  162:   end Test_pxGet_Transpose;
        -:  163:--  end read only
        -:  164:
        -:  165:
        -:  166:--  begin read only
        -:  167:   procedure Test_tfGet_Raw_Matrix (Gnattest_T : in out Test_CMatrix);
        4:  168:   procedure Test_tfGet_Raw_Matrix_d46bc2 (Gnattest_T : in out Test_CMatrix) renames Test_tfGet_Raw_Matrix;
        -:  169:--  id:2.1/d46bc24c8df48416/tfGet_Raw_Matrix/1/0/
        4:  170:   procedure Test_tfGet_Raw_Matrix (Gnattest_T : in out Test_CMatrix) is
        -:  171:   --  math-matrices.ads:31:4:tfGet_Raw_Matrix
        -:  172:--  end read only
        -:  173:
        -:  174:      pragma Unreferenced (Gnattest_T);
        -:  175:
        4:  176:      pxMatrix : pCMatrix;
        -:  177:      tfMatrix : TMatrix;
        -:  178:
        -:  179:      tfXRotAngle : Math.Angles.TAngle;
        -:  180:      tfYRotAngle : Math.Angles.TAngle;
        -:  181:      tfZRotAngle : Math.Angles.TAngle;
        -:  182:   begin
        -:  183:
        4:  184:      for iXRot in 1 .. 10
       40:  185:      loop
       40:  186:         tfXRotAngle := Math.Angles.TAngle(float(36 * iXRot - 180));
      400:  187:         for iYRot in 1 .. 10
      400:  188:         loop
      400:  189:            tfYRotAngle := Math.Angles.TAngle(float(36 * iYRot - 180));
     4000:  190:            for iZRot in 1 .. 10
     4000:  191:            loop
     4000:  192:               tfZRotAngle := Math.Angles.TAngle(float(36 * iZRot - 180));
     4000:  193:                 pxMatrix := pxCreate_Rotation_Around_Z_Axis(tfZRotAngle) *
     4000:  194:                   pxCreate_Rotation_Around_Y_Axis(tfYRotAngle) *
     4000:  195:                   pxCreate_Rotation_Around_X_Axis(tfXRotAngle);
        -:  196:
     4000:  197:               tfMatrix := pxMatrix.tfGet_Raw_Matrix;
        -:  198:
     4000:  199:               for i in 1 ..3
    12000:  200:               loop
    12000:  201:                  for j in 1 .. 3
    36000:  202:                  loop
    36000:  203:                     AUnit.Assertions.Assert(Condition => pxMatrix.tfMatrix(i,j) = tfMatrix(i,j),
    36000:  204:                                             Message => "CMatrix.tfGet_Raw_Matrix failed, wrong value in (" & integer'Image(i) & "," & integer'Image(j) & "). Value: " & float'Image(float(tfMatrix(i,j))) & ". Expected: " & float'Image(float(pxMatrix.tfMatrix(i,j))) & ".");
        -:  205:                  end loop;
        -:  206:               end loop;
        -:  207:
        -:  208:            end loop;
        -:  209:
        -:  210:         end loop;
        -:  211:      end loop;
        -:  212:
        -:  213:--  begin read only
        4:  214:   end Test_tfGet_Raw_Matrix;
        -:  215:--  end read only
        -:  216:
        -:  217:
        -:  218:--  begin read only
        -:  219:   procedure Test_fGet_Determinant (Gnattest_T : in out Test_CMatrix);
        4:  220:   procedure Test_fGet_Determinant_6a3440 (Gnattest_T : in out Test_CMatrix) renames Test_fGet_Determinant;
        -:  221:--  id:2.1/6a34401378c12db4/fGet_Determinant/1/0/
        4:  222:   procedure Test_fGet_Determinant (Gnattest_T : in out Test_CMatrix) is
        -:  223:   --  math-matrices.ads:32:4:fGet_Determinant
        -:  224:--  end read only
        -:  225:
        -:  226:      pragma Unreferenced (Gnattest_T);
        -:  227:
        4:  228:      pxMatrix : pCMatrix;
        -:  229:      tfXRotAngle : Math.Angles.TAngle;
        -:  230:      tfYRotAngle : Math.Angles.TAngle;
        -:  231:      tfZRotAngle : Math.Angles.TAngle;
        -:  232:   begin
        -:  233:
        4:  234:      for iXRot in 1 .. 10
       40:  235:      loop
       40:  236:         tfXRotAngle := Math.Angles.TAngle(float(36 * iXRot - 180));
      400:  237:         for iYRot in 1 .. 10
      400:  238:         loop
      400:  239:            tfYRotAngle := Math.Angles.TAngle(float(36 * iYRot - 180));
     4000:  240:            for iZRot in 1 .. 10
     4000:  241:            loop
     4000:  242:               tfZRotAngle := Math.Angles.TAngle(float(36 * iZRot - 180));
     4000:  243:                 pxMatrix := pxCreate_Rotation_Around_Z_Axis(tfZRotAngle) *
     4000:  244:                   pxCreate_Rotation_Around_Y_Axis(tfYRotAngle) *
     4000:  245:                   pxCreate_Rotation_Around_X_Axis(tfXRotAngle);
        -:  246:
        -:  247:
     4000:  248:                   AUnit.Assertions.Assert(Condition => pxMatrix.fGet_Determinant - 1.0 < 0.00001,
     4000:  249:                                             Message => "CMatrix.pxGet_Determinant failed, wrong value for (" & integer'Image(iXRot) & "," & integer'Image(iYRot) & "," & integer'Image(iZRot) & "). Value: " & float'Image(pxMatrix.fGet_Determinant) & ". Expected: " & float'Image(1.0) & ".");
        -:  250:            end loop;
        -:  251:
        -:  252:         end loop;
        -:  253:      end loop;
        -:  254:
        -:  255:--  begin read only
        4:  256:   end Test_fGet_Determinant;
        -:  257:--  end read only
        -:  258:
        -:  259:
        -:  260:--  begin read only
        -:  261:   procedure Test_pxGet_X_Vector (Gnattest_T : in out Test_CMatrix);
        4:  262:   procedure Test_pxGet_X_Vector_160735 (Gnattest_T : in out Test_CMatrix) renames Test_pxGet_X_Vector;
        -:  263:--  id:2.1/160735b33c12b065/pxGet_X_Vector/1/0/
        4:  264:   procedure Test_pxGet_X_Vector (Gnattest_T : in out Test_CMatrix) is
        -:  265:   --  math-matrices.ads:34:4:pxGet_X_Vector
        -:  266:--  end read only
        -:  267:
        -:  268:      pragma Unreferenced (Gnattest_T);
        -:  269:
        -:  270:      use Math.Vectors;
        4:  271:      pxTestVector : Math.Vectors.pCVector;
        4:  272:      pxXVector : Math.Vectors.pCVector;
        -:  273:   begin
        -:  274:
        4:  275:      pxTestVector := Math.Vectors.pxCreate(fX => 1.0,
        -:  276:                                            fY => 0.0,
        -:  277:                                            fZ => 0.0);
        4:  278:      pxXVector := Math.Matrices.pxCreate_Identity.pxGet_X_Vector;
        -:  279:
        4:  280:      AUnit.Assertions.Assert(Condition => pxTestVector = pxXVector,
        -:  281:                              Message   => "CMatrix.pxGet_X_Vector failed.");
        -:  282:
        -:  283:--  begin read only
        4:  284:   end Test_pxGet_X_Vector;
        -:  285:--  end read only
        -:  286:
        -:  287:
        -:  288:--  begin read only
        -:  289:   procedure Test_pxGet_Y_Vector (Gnattest_T : in out Test_CMatrix);
        4:  290:   procedure Test_pxGet_Y_Vector_2cb764 (Gnattest_T : in out Test_CMatrix) renames Test_pxGet_Y_Vector;
        -:  291:--  id:2.1/2cb764bb93e43f1b/pxGet_Y_Vector/1/0/
        4:  292:   procedure Test_pxGet_Y_Vector (Gnattest_T : in out Test_CMatrix) is
        -:  293:   --  math-matrices.ads:35:4:pxGet_Y_Vector
        -:  294:--  end read only
        -:  295:
        -:  296:      pragma Unreferenced (Gnattest_T);
        -:  297:
        -:  298:      use Math.Vectors;
        4:  299:      pxTestVector : Math.Vectors.pCVector;
        4:  300:      pxYVector : Math.Vectors.pCVector;
        -:  301:   begin
        -:  302:
        4:  303:      pxTestVector := Math.Vectors.pxCreate(fX => 0.0,
        -:  304:                                            fY => 1.0,
        -:  305:                                            fZ => 0.0);
        4:  306:      pxYVector := Math.Matrices.pxCreate_Identity.pxGet_Y_Vector;
        -:  307:
        4:  308:      AUnit.Assertions.Assert(Condition => pxTestVector = pxYVector,
        -:  309:                              Message   => "CMatrix.pxGet_Y_Vector failed.");
        -:  310:--  begin read only
        4:  311:   end Test_pxGet_Y_Vector;
        -:  312:--  end read only
        -:  313:
        -:  314:
        -:  315:--  begin read only
        -:  316:   procedure Test_pxGet_Z_Vector (Gnattest_T : in out Test_CMatrix);
        4:  317:   procedure Test_pxGet_Z_Vector_fd9c88 (Gnattest_T : in out Test_CMatrix) renames Test_pxGet_Z_Vector;
        -:  318:--  id:2.1/fd9c8886cfec5468/pxGet_Z_Vector/1/0/
        4:  319:   procedure Test_pxGet_Z_Vector (Gnattest_T : in out Test_CMatrix) is
        -:  320:   --  math-matrices.ads:36:4:pxGet_Z_Vector
        -:  321:--  end read only
        -:  322:
        -:  323:      pragma Unreferenced (Gnattest_T);
        -:  324:      use Math.Vectors;
        4:  325:      pxTestVector : Math.Vectors.pCVector;
        4:  326:      pxZVector : Math.Vectors.pCVector;
        -:  327:   begin
        -:  328:
        4:  329:      pxTestVector := Math.Vectors.pxCreate(fX => 0.0,
        -:  330:                                            fY => 0.0,
        -:  331:                                            fZ => 1.0);
        4:  332:      pxZVector := Math.Matrices.pxCreate_Identity.pxGet_Z_Vector;
        -:  333:
        4:  334:      AUnit.Assertions.Assert(Condition => pxTestVector = pxZVector,
        -:  335:                              Message   => "CMatrix.pxGet_Z_Vector failed.");
        -:  336:
        -:  337:--  begin read only
        4:  338:   end Test_pxGet_Z_Vector;
        -:  339:--  end read only
        -:  340:
        -:  341:
        -:  342:--  begin read only
        -:  343:   procedure Test_Copy_From (Gnattest_T : in out Test_CMatrix);
        4:  344:   procedure Test_Copy_From_d33e2b (Gnattest_T : in out Test_CMatrix) renames Test_Copy_From;
        -:  345:--  id:2.1/d33e2b48baa0fe97/Copy_From/1/0/
        4:  346:   procedure Test_Copy_From (Gnattest_T : in out Test_CMatrix) is
        -:  347:   --  math-matrices.ads:38:4:Copy_From
        -:  348:--  end read only
        -:  349:
        -:  350:      pragma Unreferenced (Gnattest_T);
        -:  351:      use System;
        -:  352:
        4:  353:      pxTestMatrix : Math.Matrices.pCMatrix;
        4:  354:      pxCopyMatrix : Math.Matrices.pCMatrix;
        4:  355:      pxCopyPointerMatrix : Math.Matrices.pCMatrix;
        -:  356:
        -:  357:   begin
        -:  358:
        4:  359:      pxTestMatrix := Math.Matrices.pxCreate_Rotation_Around_Z_Axis(Math.Angles.TAngle(25.0)) *
        4:  360:        Math.Matrices.pxCreate_Rotation_Around_Z_Axis(Math.Angles.TAngle(-25.0)) *
        4:  361:        Math.Matrices.pxCreate_Rotation_Around_Z_Axis(Math.Angles.TAngle(50.0));
        -:  362:
        4:  363:      pxCopyMatrix := Math.Matrices.pxCreate_Identity;
        4:  364:      pxCopyPointerMatrix := pxCopyMatrix;
        4:  365:      pxCopyMatrix.Copy_From(pxTestMatrix);
        -:  366:
        4:  367:      AUnit.Assertions.Assert(Condition => pxTestMatrix = pxCopyPointerMatrix,
        -:  368:                              Message   => "CMatrix.Copy_From failed, matrices do not match.");
        4:  369:        AUnit.Assertions.Assert(Condition => pxCopyPointerMatrix.all'Address = pxCopyMatrix.all'Address,
        -:  370:                               Message   => "CMatrix.Copy_From failed, addresses do not match.");
        -:  371:
        -:  372:--  begin read only
        4:  373:   end Test_Copy_From;
        -:  374:--  end read only
        -:  375:
        -:  376:end Math.Matrices.CMatrix_Test_Data.CMatrix_Tests;
