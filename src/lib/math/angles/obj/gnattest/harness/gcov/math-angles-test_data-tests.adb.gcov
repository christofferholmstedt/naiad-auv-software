        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/angles/obj/gnattest/tests/math-angles-test_data-tests.adb
        -:    0:Programs:24
        -:    1:--  This package has been generated automatically by GNATtest.
        -:    2:--  You are allowed to add your code to the bodies of test routines.
        -:    3:--  Such changes will be kept during further regeneration of this file.
        -:    4:--  All code placed outside of test routine bodies will be lost. The
        -:    5:--  code intended to set up and tear down the test environment should be
        -:    6:--  placed into Math.Angles.Test_Data.
        -:    7:
        -:    8:with AUnit.Assertions; use AUnit.Assertions;
        -:    9:
        -:   10:package body Math.Angles.Test_Data.Tests is
        -:   11:
        -:   12:
        -:   13:--  begin read only
        -:   14:   procedure Test_fGet_Angle_Degrees_In_Range (Gnattest_T : in out Test);
        2:   15:   procedure Test_fGet_Angle_Degrees_In_Range_1c8f14 (Gnattest_T : in out Test) renames Test_fGet_Angle_Degrees_In_Range;
        -:   16:--  id:2.1/1c8f147d4fbef554/fGet_Angle_Degrees_In_Range/1/0/
        2:   17:   procedure Test_fGet_Angle_Degrees_In_Range (Gnattest_T : in out Test) is
        -:   18:   --  math-angles.ads:8:4:fGet_Angle_Degrees_In_Range
        -:   19:--  end read only
        -:   20:
        -:   21:      pragma Unreferenced (Gnattest_T);
        -:   22:
        2:   23:      fAngle : float := -250.0;
        -:   24:      fRangeFrom : float := -180.0;
        -:   25:   begin
        -:   26:
        2:   27:      fAngle := Math.Angles.fGet_Angle_Degrees_In_Range(fAngle              => fAngle,
        -:   28:                                                        fRangeFromExclusive => fRangeFrom);
        -:   29:
        2:   30:      AUnit.Assertions.Assert(Condition => fAngle > fRangeFrom and fAngle <= (fRangeFrom + 360.0),
        2:   31:                              Message   => "CRotator.fGet_Angle_Degrees_In_Range failed, value outside of range. Value: " & float'Image(fAngle) & ". Range from " & float'Image(fRangeFrom) & " to " & float'Image(fRangeFrom + 360.0) & ".");
        -:   32:
        2:   33:      fAngle := 43460.0;
        2:   34:      fAngle := Math.Angles.fGet_Angle_Degrees_In_Range(fAngle              => fAngle,
        -:   35:                                                        fRangeFromExclusive => fRangeFrom);
        -:   36:
        2:   37:      AUnit.Assertions.Assert(Condition => fAngle > fRangeFrom and fAngle <= (fRangeFrom + 360.0),
        2:   38:                              Message   => "CRotator.fGet_Angle_Degrees_In_Range failed, value outside of range. Value: " & float'Image(fAngle) & ". Range from " & float'Image(fRangeFrom) & " to " & float'Image(fRangeFrom + 360.0) & ".");
        -:   39:
        -:   40:--  begin read only
        2:   41:   end Test_fGet_Angle_Degrees_In_Range;
        -:   42:--  end read only
        -:   43:
        -:   44:
        -:   45:--  begin read only
        -:   46:   procedure Test_fGet_Angle_Radians_In_Range (Gnattest_T : in out Test);
        2:   47:   procedure Test_fGet_Angle_Radians_In_Range_73a42b (Gnattest_T : in out Test) renames Test_fGet_Angle_Radians_In_Range;
        -:   48:--  id:2.1/73a42b665dbd6024/fGet_Angle_Radians_In_Range/1/0/
        2:   49:   procedure Test_fGet_Angle_Radians_In_Range (Gnattest_T : in out Test) is
        -:   50:   --  math-angles.ads:9:4:fGet_Angle_Radians_In_Range
        -:   51:--  end read only
        -:   52:
        -:   53:      pragma Unreferenced (Gnattest_T);
        -:   54:
        2:   55:      fAngle : float := -100.5;
        -:   56:      fRangeFrom : float := -1.0 * Ada.Numerics.Pi;
        -:   57:   begin
        -:   58:
        2:   59:      fAngle := Math.Angles.fGet_Angle_Radians_In_Range(fAngle              => fAngle,
        -:   60:                                                        fRangeFromExclusive => fRangeFrom);
        -:   61:
        2:   62:      AUnit.Assertions.Assert(Condition => fAngle > fRangeFrom and fAngle <= (fRangeFrom + 360.0),
        2:   63:                              Message   => "CRotator.fGet_Angle_Radians_In_Range failed, value outside of range. Value: " & float'Image(fAngle) & ". Range from " & float'Image(fRangeFrom) & " to " & float'Image(fRangeFrom + (2.0 * Ada.Numerics.Pi)) & ".");
        -:   64:
        2:   65:      fAngle := 43460.0;
        2:   66:      fAngle := Math.Angles.fGet_Angle_Radians_In_Range(fAngle              => fAngle,
        -:   67:                                                        fRangeFromExclusive => fRangeFrom);
        -:   68:
        2:   69:      AUnit.Assertions.Assert(Condition => fAngle > fRangeFrom and fAngle <= (fRangeFrom + (2.0 * Ada.Numerics.Pi)),
        2:   70:                              Message   => "CRotator.fGet_Angle_Radians_In_Range failed, value outside of range. Value: " & float'Image(fAngle) & ". Range from " & float'Image(fRangeFrom) & " to " & float'Image(fRangeFrom + (2.0 * Ada.Numerics.Pi)) & ".");
        -:   71:
        -:   72:--  begin read only
        2:   73:   end Test_fGet_Angle_Radians_In_Range;
        -:   74:--  end read only
        -:   75:
        -:   76:
        -:   77:--  begin read only
        -:   78:   procedure Test_fRadians_To_Degrees (Gnattest_T : in out Test);
        2:   79:   procedure Test_fRadians_To_Degrees_020d52 (Gnattest_T : in out Test) renames Test_fRadians_To_Degrees;
        -:   80:--  id:2.1/020d52faaa612588/fRadians_To_Degrees/1/0/
        2:   81:   procedure Test_fRadians_To_Degrees (Gnattest_T : in out Test) is
        -:   82:   --  math-angles.ads:10:4:fRadians_To_Degrees
        -:   83:--  end read only
        -:   84:
        -:   85:      pragma Unreferenced (Gnattest_T);
        -:   86:
        -:   87:      fAngle : float;
        -:   88:   begin
        -:   89:
        2:   90:      for i in 1 .. 20000
    40000:   91:      loop
    40000:   92:         fAngle := Math.Angles.fRadians_To_Degrees(fAngle => float(i) / 100.0);
    40000:   93:         AUnit.Assertions.Assert(Condition => fAngle = ((float(i) / 100.0) * 180.0) / Ada.Numerics.Pi,
    40000:   94:                                 Message   => "Angles.fRadians_To_Degrees failed, wrong value. Value: " & float'Image(fAngle) & ". Expected: " & float'Image(((float(i) / 100.0) * 180.0) / Ada.Numerics.Pi) & ".");
        -:   95:      end loop;
        -:   96:
    40000:   97:      for i in 1 .. 20000
    40000:   98:      loop
    40000:   99:         fAngle := Math.Angles.fRadians_To_Degrees(fAngle => float(i) / (-100.0));
    40000:  100:         AUnit.Assertions.Assert(Condition => fAngle = ((float(i) / (-100.0)) * 180.0) / Ada.Numerics.Pi,
    40000:  101:                                 Message   => "Angles.fRadians_To_Degrees failed, wrong value. Value: " & float'Image(fAngle) & ". Expected: " & float'Image(((float(i) / 100.0) * 180.0) / Ada.Numerics.Pi) & ".");
        -:  102:      end loop;
        -:  103:
        -:  104:--  begin read only
        2:  105:   end Test_fRadians_To_Degrees;
        -:  106:--  end read only
        -:  107:
        -:  108:
        -:  109:--  begin read only
        -:  110:   procedure Test_fDegrees_To_Radians (Gnattest_T : in out Test);
        2:  111:   procedure Test_fDegrees_To_Radians_82d864 (Gnattest_T : in out Test) renames Test_fDegrees_To_Radians;
        -:  112:--  id:2.1/82d864d89bdadfe4/fDegrees_To_Radians/1/0/
        2:  113:   procedure Test_fDegrees_To_Radians (Gnattest_T : in out Test) is
        -:  114:   --  math-angles.ads:11:4:fDegrees_To_Radians
        -:  115:--  end read only
        -:  116:
        -:  117:      pragma Unreferenced (Gnattest_T);
        -:  118:
        -:  119:      fAngle : float;
        -:  120:   begin
        -:  121:
        2:  122:      for i in 1 .. 20000
    40000:  123:      loop
    40000:  124:         fAngle := Math.Angles.fDegrees_To_Radians(fAngle => float(i));
    40000:  125:         AUnit.Assertions.Assert(Condition => fAngle = ((float(i)) * Ada.Numerics.Pi) / 180.0,
    40000:  126:                                 Message   => "Angles.fDegrees_To_Radians failed, wrong value. Value: " & float'Image(fAngle) & ". Expected: " & float'Image(((float(i) / 100.0) * 180.0) / Ada.Numerics.Pi) & ".");
        -:  127:      end loop;
        -:  128:
    40000:  129:      for i in 1 .. 20000
    40000:  130:      loop
    40000:  131:         fAngle := Math.Angles.fDegrees_To_Radians(fAngle => -float(i));
    40000:  132:         AUnit.Assertions.Assert(Condition => fAngle = ((-float(i)) * Ada.Numerics.Pi) / 180.0,
    40000:  133:                                 Message   => "Angles.fDegrees_To_Radians failed, wrong value. Value: " & float'Image(fAngle) & ". Expected: " & float'Image(((float(i) / 100.0) * 180.0) / Ada.Numerics.Pi) & ".");
        -:  134:      end loop;
        -:  135:
        -:  136:--  begin read only
        2:  137:   end Test_fDegrees_To_Radians;
        -:  138:--  end read only
        -:  139:
        -:  140:
        -:  141:--  begin read only
        -:  142:   procedure Test_fTAngle_To_FAngle (Gnattest_T : in out Test);
        2:  143:   procedure Test_fTAngle_To_FAngle_d09c7f (Gnattest_T : in out Test) renames Test_fTAngle_To_FAngle;
        -:  144:--  id:2.1/d09c7fc8a4672d05/fTAngle_To_FAngle/1/0/
        2:  145:   procedure Test_fTAngle_To_FAngle (Gnattest_T : in out Test) is
        -:  146:   --  math-angles.ads:12:4:fTAngle_To_FAngle
        -:  147:--  end read only
        -:  148:
        -:  149:      pragma Unreferenced (Gnattest_T);
        -:  150:
        -:  151:      tfAngle : TAngle := 120.0;
        -:  152:   begin
        -:  153:
        -:  154:
        -:  155:
        2:  156:      AUnit.Assertions.Assert(Condition => Math.Angles.fTAngle_To_FAngle(tfAngle) = 120.0,
        -:  157:                              Message   => "fTAngle_To_FAngle failed.");
        -:  158:
        -:  159:--  begin read only
        2:  160:   end Test_fTAngle_To_FAngle;
        -:  161:--  end read only
        -:  162:
        -:  163:
        -:  164:--  begin read only
        -:  165:   procedure Test_tfFAngle_To_TAngle (Gnattest_T : in out Test);
        2:  166:   procedure Test_tfFAngle_To_TAngle_52086e (Gnattest_T : in out Test) renames Test_tfFAngle_To_TAngle;
        -:  167:--  id:2.1/52086e37e67bb240/tfFAngle_To_TAngle/1/0/
        2:  168:   procedure Test_tfFAngle_To_TAngle (Gnattest_T : in out Test) is
        -:  169:   --  math-angles.ads:13:4:tfFAngle_To_TAngle
        -:  170:--  end read only
        -:  171:
        -:  172:      pragma Unreferenced (Gnattest_T);
        -:  173:
        -:  174:      fAngle : float := 380.0;
        -:  175:   begin
        -:  176:
        -:  177:
        -:  178:
        2:  179:      AUnit.Assertions.Assert(Condition => Math.Angles.tfFAngle_To_TAngle(fAngle) = TAngle(fAngle - 360.0),
        -:  180:                              Message   => "tfFAngle_To_TAngle failed.");
        -:  181:
        -:  182:
        -:  183:--  begin read only
        2:  184:   end Test_tfFAngle_To_TAngle;
        -:  185:--  end read only
        -:  186:
        -:  187:
        -:  188:
        -:  189:end Math.Angles.Test_Data.Tests;
