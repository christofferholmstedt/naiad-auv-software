        -:    0:Source:/home/evr/git/naiad-auv-software/src/lib/math/vectors/obj/gnattest/tests/math-vectors-cvector_test_data-cvector_tests.adb
        -:    0:Programs:57
        -:    1:--  This package has been generated automatically by GNATtest.
        -:    2:--  You are allowed to add your code to the bodies of test routines.
        -:    3:--  Such changes will be kept during further regeneration of this file.
        -:    4:--  All code placed outside of test routine bodies will be lost. The
        -:    5:--  code intended to set up and tear down the test environment should be
        -:    6:--  placed into Math.Vectors.CVector_Test_Data.
        -:    7:
        -:    8:with AUnit.Assertions; use AUnit.Assertions;
        -:    9:
        -:   10:package body Math.Vectors.CVector_Test_Data.CVector_Tests is
        -:   11:
        -:   12:
        -:   13:--  begin read only
        -:   14:   procedure Test_pxGet_Copy (Gnattest_T : in out Test_CVector);
        2:   15:   procedure Test_pxGet_Copy_4fdcfb (Gnattest_T : in out Test_CVector) renames Test_pxGet_Copy;
        -:   16:--  id:2.1/4fdcfbc63674ebe3/pxGet_Copy/1/0/
        2:   17:   procedure Test_pxGet_Copy (Gnattest_T : in out Test_CVector) is
        -:   18:   --  math-vectors.ads:13:4:pxGet_Copy
        -:   19:--  end read only
        -:   20:
        -:   21:      pragma Unreferenced (Gnattest_T);
        -:   22:
        -:   23:      use System;
        -:   24:
        2:   25:      pxTestVector : pCVector;
        2:   26:      pxCopiedVector : pCVector;
        -:   27:
        -:   28:   begin
        -:   29:
        2:   30:      pxTestVector := Math.Vectors.pxCreate(fX => 5.2,
        -:   31:                                                  fY => -2.6,
        -:   32:                                                  fZ => 8.2);
        2:   33:      pxCopiedVector := pxTestVector.pxGet_Copy;
        -:   34:
        2:   35:      AUnit.Assertions.Assert(Condition => pxCopiedVector.fX = 5.2,
        -:   36:                              Message   => "CVector.pxGetCopy failed, fX got the wrong value");
        2:   37:      AUnit.Assertions.Assert(Condition => pxCopiedVector.fY = -2.6,
        -:   38:                              Message   => "CVector.pxGetCopy failed, fY got the wrong value");
        2:   39:      AUnit.Assertions.Assert(Condition => pxCopiedVector.fZ = 8.2,
        -:   40:                              Message   => "CVector.pxGetCopy failed, fZ got the wrong value");
        -:   41:
        -:   42:
        2:   43:      AUnit.Assertions.Assert(Condition => pxTestVector.all'Address /= pxCopiedVector.all'Address,
        -:   44:                              Message => "CVector.pxGetCopy failed, pointers has the same address, not a deep copy");
        -:   45:
        -:   46:--  begin read only
        2:   47:   end Test_pxGet_Copy;
        -:   48:--  end read only
        -:   49:
        -:   50:
        -:   51:--  begin read only
        -:   52:   procedure Test_pxGet_Normalized (Gnattest_T : in out Test_CVector);
        2:   53:   procedure Test_pxGet_Normalized_a00a60 (Gnattest_T : in out Test_CVector) renames Test_pxGet_Normalized;
        -:   54:--  id:2.1/a00a60382fe44b5d/pxGet_Normalized/1/0/
        2:   55:   procedure Test_pxGet_Normalized (Gnattest_T : in out Test_CVector) is
        -:   56:   --  math-vectors.ads:14:4:pxGet_Normalized
        -:   57:--  end read only
        -:   58:
        -:   59:      pragma Unreferenced (Gnattest_T);
        -:   60:
        -:   61:
        -:   62:      use System;
        2:   63:      pxTestVector : pCVector;
        2:   64:      pxNormalizedVector : pCVector;
        -:   65:
        -:   66:   begin
        -:   67:
        -:   68:
        2:   69:      pxTestVector := Math.Vectors.pxCreate(fX => 14.2,
        -:   70:                                                  fY => -64.2,
        -:   71:                                                  fZ => 0.2);
        2:   72:      pxNormalizedVector := pxTestVector.pxGet_Normalized;
        2:   73:      AUnit.Assertions.Assert(Condition => abs(pxNormalizedVector.fLength - 1.0) < 0.0001,
        -:   74:                              Message   => "CVector.pxGet_Normalized failed");
        -:   75:
        -:   76:
        -:   77:
        2:   78:      AUnit.Assertions.Assert(Condition => pxTestVector.all'Address /= pxNormalizedVector.all'Address,
        -:   79:                              Message => "CVector.pxGet_Normalized failed, testVector and normalizedVector has the same address");
        -:   80:
        -:   81:      -- test exceptions
        2:   82:      pxTestVector := Math.Vectors.pxCreate(fX => 0.0,
        -:   83:                                                  fY => 0.0,
        -:   84:                                                  fZ => 0.0);
        2:   85:      pxNormalizedVector := pxTestVector.pxGet_Normalized;
    #####:   86:      AUnit.Assertions.Assert(Condition => False,
        -:   87:                              Message   => "CVector.pxGet_Normalized division by zero failed, should have raised exception");
        -:   88:   exception
        2:   89:      when Numeric_Error =>
        -:   90:         null; -- Test passed
    =====:   91:      when E : others =>
    #####:   92:         AUnit.Assertions.Assert(Condition => False,
    =====:   93:                                 Message   =>"CVector.pxGet_Normalized division by zero failed, wrong exception raised: " & Ada.Exceptions.Exception_Name (E) & ". Expected: NUMERIC_ERROR.");
        -:   94:
        -:   95:--  begin read only
        2:   96:   end Test_pxGet_Normalized;
        -:   97:--  end read only
        -:   98:
        -:   99:
        -:  100:--  begin read only
        -:  101:   procedure Test_fLength_Squared (Gnattest_T : in out Test_CVector);
        2:  102:   procedure Test_fLength_Squared_cce6ee (Gnattest_T : in out Test_CVector) renames Test_fLength_Squared;
        -:  103:--  id:2.1/cce6ee4164d3103e/fLength_Squared/1/0/
        2:  104:   procedure Test_fLength_Squared (Gnattest_T : in out Test_CVector) is
        -:  105:   --  math-vectors.ads:16:4:fLength_Squared
        -:  106:--  end read only
        -:  107:
        -:  108:      pragma Unreferenced (Gnattest_T);
        -:  109:
        2:  110:      pxTestVector : Math.Vectors.pCVector;
        -:  111:
        -:  112:    begin
        -:  113:
        2:  114:      pxTestVector := Math.Vectors.pxCreate(fX => 10.0,
        -:  115:                                                  fY => 5.0,
        -:  116:                                                  fZ => 2.0);
        2:  117:      AUnit.Assertions.Assert(Condition => pxTestVector.fLength_Squared = 129.0,
        2:  118:                              Message   => "CVector.fLength_Squared failed, expected 129.0, actual: " & float'Image(pxTestVector.fLength_Squared));
        -:  119:
        -:  120:--  begin read only
        2:  121:   end Test_fLength_Squared;
        -:  122:--  end read only
        -:  123:
        -:  124:
        -:  125:--  begin read only
        -:  126:   procedure Test_fLength (Gnattest_T : in out Test_CVector);
        2:  127:   procedure Test_fLength_7b67f3 (Gnattest_T : in out Test_CVector) renames Test_fLength;
        -:  128:--  id:2.1/7b67f3ae3f80f9b4/fLength/1/0/
        2:  129:   procedure Test_fLength (Gnattest_T : in out Test_CVector) is
        -:  130:   --  math-vectors.ads:17:4:fLength
        -:  131:--  end read only
        -:  132:
        -:  133:      pragma Unreferenced (Gnattest_T);
        -:  134:
        2:  135:     pxTestVector : pCVector;
        -:  136:   begin
        -:  137:
        2:  138:      pxTestVector := Math.Vectors.pxCreate(fX => 5.0,
        -:  139:                                                  fY => 2.0,
        -:  140:                                                  fZ => -6.0);
        -:  141:
        2:  142:      AUnit.Assertions.Assert(Condition => abs(pxTestVector.fLength - 8.06226) < 0.0001,
        2:  143:                              Message   => "CVector.fLength failed, expected 8.06226, actual: " & float'Image(pxTestVector.fLength));
        -:  144:
        -:  145:--  begin read only
        2:  146:   end Test_fLength;
        -:  147:--  end read only
        -:  148:
        -:  149:
        -:  150:--  begin read only
        -:  151:   procedure Test_fGet_X (Gnattest_T : in out Test_CVector);
        2:  152:   procedure Test_fGet_X_2bcacb (Gnattest_T : in out Test_CVector) renames Test_fGet_X;
        -:  153:--  id:2.1/2bcacbb17d7f7a8a/fGet_X/1/0/
        2:  154:   procedure Test_fGet_X (Gnattest_T : in out Test_CVector) is
        -:  155:   --  math-vectors.ads:34:4:fGet_X
        -:  156:--  end read only
        -:  157:
        -:  158:      pragma Unreferenced (Gnattest_T);
        -:  159:
        2:  160:     pxTestVector : pCVector;
        -:  161:   begin
        -:  162:
        2:  163:      pxTestVector := Math.Vectors.pxCreate(fX => 23.5,
        -:  164:                                                  fY => 0.0,
        -:  165:                                                  fZ => 0.0);
        -:  166:
        2:  167:      AUnit.Assertions.Assert(Condition => pxTestVector.fGet_X = 23.5,
        2:  168:                              Message   => "CVector.fGet_X failed, expected 23.5 actual: " & float'Image(pxTestVector.fX));
        -:  169:
        -:  170:--  begin read only
        2:  171:   end Test_fGet_X;
        -:  172:--  end read only
        -:  173:
        -:  174:
        -:  175:--  begin read only
        -:  176:   procedure Test_fGet_Y (Gnattest_T : in out Test_CVector);
        2:  177:   procedure Test_fGet_Y_5c8b74 (Gnattest_T : in out Test_CVector) renames Test_fGet_Y;
        -:  178:--  id:2.1/5c8b745c6398c08a/fGet_Y/1/0/
        2:  179:   procedure Test_fGet_Y (Gnattest_T : in out Test_CVector) is
        -:  180:   --  math-vectors.ads:35:4:fGet_Y
        -:  181:--  end read only
        -:  182:
        -:  183:      pragma Unreferenced (Gnattest_T);
        -:  184:
        2:  185:      pxTestVector : pCVector;
        -:  186:   begin
        -:  187:
        2:  188:      pxTestVector := Math.Vectors.pxCreate(fX => 0.0,
        -:  189:                                                  fY => 23.5,
        -:  190:                                                  fZ => 0.0);
        -:  191:
        2:  192:      AUnit.Assertions.Assert(Condition => pxTestVector.fGet_Y = 23.5,
        2:  193:                              Message   => "CVector.fGet_Y failed, expected 23.5, actual: " & float'Image(pxTestVector.fY));
        -:  194:
        -:  195:--  begin read only
        2:  196:   end Test_fGet_Y;
        -:  197:--  end read only
        -:  198:
        -:  199:
        -:  200:--  begin read only
        -:  201:   procedure Test_fGet_Z (Gnattest_T : in out Test_CVector);
        2:  202:   procedure Test_fGet_Z_6025cf (Gnattest_T : in out Test_CVector) renames Test_fGet_Z;
        -:  203:--  id:2.1/6025cfe92d752a4a/fGet_Z/1/0/
        2:  204:   procedure Test_fGet_Z (Gnattest_T : in out Test_CVector) is
        -:  205:   --  math-vectors.ads:36:4:fGet_Z
        -:  206:--  end read only
        -:  207:
        -:  208:      pragma Unreferenced (Gnattest_T);
        -:  209:
        2:  210:      pxTestVector : pCVector;
        -:  211:   begin
        -:  212:
        2:  213:      pxTestVector := Math.Vectors.pxCreate(fX => 0.0,
        -:  214:                                                  fY => 0.0,
        -:  215:                                                  fZ => 23.5);
        -:  216:
        2:  217:      AUnit.Assertions.Assert(Condition => pxTestVector.fGet_Z = 23.5,
        2:  218:                              Message   => "CVector.fGet_Z failed, expected 23.5, actual: " & float'Image(pxTestVector.fZ));
        -:  219:
        -:  220:--  begin read only
        2:  221:   end Test_fGet_Z;
        -:  222:--  end read only
        -:  223:
        -:  224:
        -:  225:--  begin read only
        -:  226:   procedure Test_Copy_From (Gnattest_T : in out Test_CVector);
        2:  227:   procedure Test_Copy_From_535aa7 (Gnattest_T : in out Test_CVector) renames Test_Copy_From;
        -:  228:--  id:2.1/535aa7efaabab4a8/Copy_From/1/0/
        2:  229:   procedure Test_Copy_From (Gnattest_T : in out Test_CVector) is
        -:  230:   --  math-vectors.ads:38:4:Copy_From
        -:  231:--  end read only
        -:  232:
        -:  233:      pragma Unreferenced (Gnattest_T);
        -:  234:      use System;
        -:  235:
        2:  236:      pxOriginalVector : pCVector;
        2:  237:      pxCopyVector : pCVector;
        2:  238:      pxPointerCopyVector : pCVector;
        -:  239:
        -:  240:   begin
        -:  241:
        2:  242:      pxOriginalVector := Math.Vectors.pxCreate(fX => 4.0,
        -:  243:                                                fY => 3.0,
        -:  244:                                                fZ => -124.0);
        2:  245:      pxCopyVector := Math.Vectors.pxCreate(fX => 233.0,
        -:  246:                                            fY => -214.0,
        -:  247:                                            fZ => 4.5);
        2:  248:      pxPointerCopyVector := pxCopyVector;
        -:  249:
        2:  250:      pxCopyVector.Copy_From(pxOriginalVector);
        -:  251:
        -:  252:
        2:  253:      AUnit.Assertions.Assert(Condition => pxPointerCopyVector = pxOriginalVector,
        -:  254:                              Message   => "CVector.Copy_From failed, vectors are different.");
        2:  255:      AUnit.Assertions.Assert(Condition => pxPointerCopyVector.all'Address = pxCopyVector.all'Address,
        -:  256:                              Message   => "CVector.Copy_From failed, pointers address is not the same as copy vectors address.");
        -:  257:
        -:  258:
        -:  259:--  begin read only
        2:  260:   end Test_Copy_From;
        -:  261:--  end read only
        -:  262:
        -:  263:
        -:  264:--  begin read only
        -:  265:   procedure Test_1_Devide (Gnattest_T : in out Test_CVector);
        2:  266:   procedure Test_Devide_7a37a3 (Gnattest_T : in out Test_CVector) renames Test_1_Devide;
        -:  267:--  id:2.1/7a37a3bfda72490e/Devide/1/0/
        2:  268:   procedure Test_1_Devide (Gnattest_T : in out Test_CVector) is
        -:  269:   --  math-vectors.ads:49:4:"/"
        -:  270:--  end read only
        -:  271:
        -:  272:      pragma Unreferenced (Gnattest_T);
        -:  273:
        -:  274:      use System;
        2:  275:      pxDividedVector : Math.Vectors.pCVector;
        2:  276:      xLeftOperandVector : Math.Vectors.pCVector;
        -:  277:      fRightOperand : float;
        -:  278:
        -:  279:
        -:  280:   begin
        -:  281:
        2:  282:      xLeftOperandVector := Math.Vectors.pxCreate(fX => 2.0, fY => 5.0,fZ => 4.0);
        2:  283:      fRightOperand := 2.0;
        -:  284:
        2:  285:      pxDividedVector := xLeftOperandVector / fRightOperand;
        -:  286:
        2:  287:      AUnit.Assertions.Assert(Condition => pxDividedVector.fX = 1.0,
        2:  288:                              Message   => "CVector./(binary CVector / float) failed, fX got the wrong value, expected 1.0, actual: " & float'Image(pxDividedVector.fX));
        2:  289:      AUnit.Assertions.Assert(Condition => pxDividedVector.fY = 2.5,
        2:  290:                              Message   => "CVector./(binary CVector / float) failed, fY got the wrong value, expected 2.5, actual: " & float'Image(pxDividedVector.fY));
        2:  291:      AUnit.Assertions.Assert(Condition => pxDividedVector.fZ = 2.0,
        2:  292:                              Message   => "CVector./(binary CVector / float) failed, fZ got the wrong value, expected 2.0, actual: " & float'Image(pxDividedVector.fZ));
        -:  293:
        2:  294:      Aunit.Assertions.Assert(Condition => pxDividedVector.all'Address /= xLeftOperandVector.all'Address,
        -:  295:                              Message => ("CVector./(binary CVector / float) failed, dividedVector is a shallow copy of one operand"));
        -:  296:
        -:  297:
        -:  298:      -- test exceptions
        2:  299:      fRightOperand := 0.0;
        2:  300:      pxDividedVector := xLeftOperandVector / fRightOperand;
    #####:  301:      AUnit.Assertions.Assert(Condition => False,
        -:  302:                              Message   => "CVector./(binary CVector / float) division by zero failed, should have raised exception");
        -:  303:   exception
        2:  304:      when Numeric_Error =>
        -:  305:         null; -- Test passed
    #####:  306:      when E : others =>
    #####:  307:         AUnit.Assertions.Assert(Condition => False,
    #####:  308:                           Message   =>"CVector./(binary CVector / float) division by zero failed, wrong exception raised: " & Ada.Exceptions.Exception_Name (E) & ". Expected: NUMERIC_ERROR.");
        -:  309:
        -:  310:
        -:  311:--  begin read only
        2:  312:   end Test_1_Devide;
        -:  313:--  end read only
        -:  314:
        -:  315:end Math.Vectors.CVector_Test_Data.CVector_Tests;
