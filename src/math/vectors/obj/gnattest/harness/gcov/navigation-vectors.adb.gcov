        -:    0:Source:/home/evr/git/naiad-auv-software/src/navigation/vectors/src/navigation-vectors.adb
        -:    0:Programs:22
        -:    1:with Navigation;
        -:    2:
        -:    3:package body Navigation.Vectors is
        -:    4:
       56:    5:   function pxCreate (fX, fY, fZ : float) return pCVector is
       56:    6:      pxNew_Vector : pCVector := new CVector;
        -:    7:   begin
       56:    8:      pxNew_Vector.fX := fX;
       56:    9:      pxNew_Vector.fY := fY;
       56:   10:      pxNew_Vector.fZ := fZ;
       56:   11:      return pxNew_Vector;
        -:   12:   end pxCreate;
        -:   13:
        -:   14:
        2:   15:   function fLength_Squared (this : in CVector) return float is
        -:   16:   begin
        2:   17:      return (this.fX**2) * (this.fY**2) * (this.fZ**2);
        -:   18:   end fLength_Squared;
        -:   19:
        2:   20:   function "*" (pxLeftOperandVector, pxRightOperandVector : in pCVector) return pCVector is
        2:   21:      pxProductVector : pCVector;
        -:   22:   begin
        8:   23:      pxProductVector := pxCreate(fX => pxLeftOperandVector.fX * pxRightOperandVector.fX,
        4:   24:                                  fY => pxLeftOperandVector.fY * pxRightOperandVector.fY,
        4:   25:                                  fZ => pxLeftOperandVector.fZ * pxRightOperandVector.fZ);
        2:   26:      return pxProductVector;
        -:   27:   end "*";
        -:   28:
        4:   29:   function "*" (pxLeftOperandVector : in pCVector; fRightOperand : in float) return pCVector is
        4:   30:      pxScaledVector : pCVector;
        -:   31:   begin
       12:   32:      pxScaledVector := pxCreate(fX => pxLeftOperandVector.fX * fRightOperand,
        4:   33:                                 fY => pxLeftOperandVector.fY * fRightOperand,
        4:   34:                                 fZ => pxLeftOperandVector.fZ * fRightOperand);
        4:   35:      return pxScaledVector;
        -:   36:   end "*";
        -:   37:
        2:   38:   function "*" (fLeftOperand : in float; pxRightOperandVector : in pCVector) return pCVector is
        2:   39:      pxScaledVector : pCVector;
        -:   40:   begin
        6:   41:      pxScaledVector := pxCreate(fX => pxRightOperandVector.fX * fLeftOperand,
        2:   42:                                 fY => pxRightOperandVector.fY * fLeftOperand,
        2:   43:                                 fZ => pxRightOperandVector.fZ * fLeftOperand);
        2:   44:      return pxScaledVector;
        -:   45:   end "*";
        -:   46:
        4:   47:   function "/" (pxLeftOperandVector : in pCVector; fRightOperand : in float) return pCVector is
        -:   48:      fScaleFactor : float;
        -:   49:   begin
        4:   50:      if fRightOperand = 0.0 then
        2:   51:         raise Numeric_Error;
        -:   52:      end if;
        -:   53:
        2:   54:      fScaleFactor := 1.0 / fRightOperand;
        2:   55:      return pxLeftOperandVector * fScaleFactor;
        -:   56:   end "/";
        -:   57:
        -:   58:
        -:   59:
        4:   60:   function "+" (pxLeftOperandVector, pxRightOperandVector : in pCVector) return pCVector is
        4:   61:      pxSumVector : pCVector;
        -:   62:   begin
       16:   63:      pxSumVector := pxCreate(fX => pxLeftOperandVector.fX + pxRightOperandVector.fX,
        8:   64:                              fY => pxLeftOperandVector.fY + pxRightOperandVector.fY,
        8:   65:                              fZ => pxLeftOperandVector.fZ + pxRightOperandVector.fZ);
        4:   66:      return pxSumVector;
        -:   67:   end "+";
        -:   68:
        4:   69:   function "-" (pxOperandVector : in pCVector) return pCVector is
        4:   70:      pxNegatedVector : pCVector;
        -:   71:   begin
       12:   72:      pxNegatedVector := pxCreate(fX => -pxOperandVector.fX,
        4:   73:                                  fY => -pxOperandVector.fY,
        4:   74:                                  fZ => -pxOperandVector.fZ);
        4:   75:      return pxNegatedVector;
        -:   76:   end "-";
        -:   77:
        2:   78:   function "-" (pxLeftOperandVector, pxRightOperandVector : in pCVector) return pCVector is
        -:   79:   begin
        2:   80:      return pxLeftOperandVector + (-pxRightOperandVector);
        -:   81:   end "-";
        -:   82:
        4:   83:   function fDot_Product (this : in CVector; pxOtherVector : in pCVector) return float is
        -:   84:      fDotProduct : float;
        -:   85:   begin
        8:   86:      fDotProduct := (this.fX * pxOtherVector.fX)
        4:   87:        + (this.fY * pxOtherVector.fY)
        4:   88:        + (this.fZ * pxOtherVector.fZ);
        4:   89:      return fDotProduct;
        -:   90:   end fDot_Product;
        -:   91:
        4:   92:   function fDot_Product (pxLeftOperandVector : in pCVector; pxRightOperandVector : in pCVector) return float is
        -:   93:      fDotProduct : float;
        -:   94:   begin
       12:   95:      fDotProduct := (pxLeftOperandVector.fX * pxRightOperandVector.fX)
        8:   96:        + (pxLeftOperandVector.fY * pxRightOperandVector.fY)
        8:   97:        + (pxLeftOperandVector.fZ * pxRightOperandVector.fZ);
        4:   98:      return fDotProduct;
        -:   99:   end fDot_Product;
        -:  100:
        -:  101:
        -:  102:
        -:  103:
        -:  104:
        -:  105:end Navigation.Vectors;
